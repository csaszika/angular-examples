(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["dashboard-example-dashboard-example-module-ngfactory"], {

    /***/ "./node_modules/@angular/cdk/esm5/accordion.es5.js":
    /*!*********************************************************!*\
  !*** ./node_modules/@angular/cdk/esm5/accordion.es5.js ***!
  \*********************************************************/
    /*! exports provided: CdkAccordionItem, CdkAccordion, CdkAccordionModule */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkAccordionItem", function () {
            return CdkAccordionItem;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkAccordion", function () {
            return CdkAccordion;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkAccordionModule", function () {
            return CdkAccordionModule;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm5/collections.es5.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Used to generate unique ID for each accordion.
         */
        var /** @type {?} */ nextId = 0;
        /**
         * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.
         */
        var CdkAccordion = /** @class */ (function () {
            function CdkAccordion() {
                /**
                 * Stream that emits true/false when openAll/closeAll is triggered.
                 */
                this._openCloseAllActions = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                /**
                 * A readonly id value to use for unique selection coordination.
                 */
                this.id = "cdk-accordion-" + nextId++;
                this._multi = false;
            }

            Object.defineProperty(CdkAccordion.prototype, "multi", {
                get: /**
                 * Whether the accordion should allow multiple expanded accordion items simultaneously.
                 * @return {?}
                 */
                function () {
                    return this._multi;
                },
                set: /**
                 * @param {?} multi
                 * @return {?}
                 */
                function (multi) {
                    this._multi = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(multi);
                },
                enumerable: true,
                configurable: true
            });
            /** Opens all enabled accordion items in an accordion where multi is enabled. */
            /**
             * Opens all enabled accordion items in an accordion where multi is enabled.
             * @return {?}
             */
            CdkAccordion.prototype.openAll = /**
             * Opens all enabled accordion items in an accordion where multi is enabled.
             * @return {?}
             */
            function () {
                this._openCloseAll(true);
            };
            /** Closes all enabled accordion items in an accordion where multi is enabled. */
            /**
             * Closes all enabled accordion items in an accordion where multi is enabled.
             * @return {?}
             */
            CdkAccordion.prototype.closeAll = /**
             * Closes all enabled accordion items in an accordion where multi is enabled.
             * @return {?}
             */
            function () {
                this._openCloseAll(false);
            };
            /**
             * @param {?} expanded
             * @return {?}
             */
            CdkAccordion.prototype._openCloseAll = /**
             * @param {?} expanded
             * @return {?}
             */
            function (expanded) {
                if (this.multi) {
                    this._openCloseAllActions.next(expanded);
                }
            };
            CdkAccordion.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: 'cdk-accordion, [cdkAccordion]',
                        exportAs: 'cdkAccordion',
                    },]
                },
            ];
            /** @nocollapse */
            CdkAccordion.propDecorators = {
                "multi": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
            };
            return CdkAccordion;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Used to generate unique ID for each accordion item.
         */
        var /** @type {?} */ nextId$1 = 0;
        /**
         * An basic directive expected to be extended and decorated as a component.  Sets up all
         * events and attributes needed to be managed by a CdkAccordion parent.
         */
        var CdkAccordionItem = /** @class */ (function () {
            function CdkAccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {
                var _this = this;
                this.accordion = accordion;
                this._changeDetectorRef = _changeDetectorRef;
                this._expansionDispatcher = _expansionDispatcher;
                /**
                 * Subscription to openAll/closeAll events.
                 */
                this._openCloseAllSubscription = rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
                /**
                 * Event emitted every time the AccordionItem is closed.
                 */
                this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Event emitted every time the AccordionItem is opened.
                 */
                this.opened = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Event emitted when the AccordionItem is destroyed.
                 */
                this.destroyed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Emits whenever the expanded state of the accordion changes.
                 * Primarily used to facilitate two-way binding.
                 * \@docs-private
                 */
                this.expandedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * The unique AccordionItem id.
                 */
                this.id = "cdk-accordion-child-" + nextId$1++;
                this._expanded = false;
                this._disabled = false;
                /**
                 * Unregister function for _expansionDispatcher.
                 */
                this._removeUniqueSelectionListener = function () {
                };
                this._removeUniqueSelectionListener =
                    _expansionDispatcher.listen(function (id, accordionId) {
                        if (_this.accordion && !_this.accordion.multi &&
                            _this.accordion.id === accordionId && _this.id !== id) {
                            _this.expanded = false;
                        }
                    });
                // When an accordion item is hosted in an accordion, subscribe to open/close events.
                if (this.accordion) {
                    this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();
                }
            }

            Object.defineProperty(CdkAccordionItem.prototype, "expanded", {
                get: /**
                 * Whether the AccordionItem is expanded.
                 * @return {?}
                 */
                function () {
                    return this._expanded;
                },
                set: /**
                 * @param {?} expanded
                 * @return {?}
                 */
                function (expanded) {
                    expanded = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(expanded);
                    // Only emit events and update the internal value if the value changes.
                    if (this._expanded !== expanded) {
                        this._expanded = expanded;
                        this.expandedChange.emit(expanded);
                        if (expanded) {
                            this.opened.emit();
                            /**
                             * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,
                             * the name value is the id of the accordion.
                             */
                            var /** @type {?} */ accordionId = this.accordion ? this.accordion.id : this.id;
                            this._expansionDispatcher.notify(this.id, accordionId);
                        }
                        else {
                            this.closed.emit();
                        }
                        // Ensures that the animation will run when the value is set outside of an `@Input`.
                        // This includes cases like the open, close and toggle methods.
                        this._changeDetectorRef.markForCheck();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CdkAccordionItem.prototype, "disabled", {
                get: /**
                 * Whether the AccordionItem is disabled.
                 * @return {?}
                 */
                function () {
                    return this._disabled;
                },
                set: /**
                 * @param {?} disabled
                 * @return {?}
                 */
                function (disabled) {
                    this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(disabled);
                },
                enumerable: true,
                configurable: true
            });
            /** Emits an event for the accordion item being destroyed. */
            /**
             * Emits an event for the accordion item being destroyed.
             * @return {?}
             */
            CdkAccordionItem.prototype.ngOnDestroy = /**
             * Emits an event for the accordion item being destroyed.
             * @return {?}
             */
            function () {
                this.opened.complete();
                this.closed.complete();
                this.destroyed.emit();
                this.destroyed.complete();
                this._removeUniqueSelectionListener();
                this._openCloseAllSubscription.unsubscribe();
            };
            /** Toggles the expanded state of the accordion item. */
            /**
             * Toggles the expanded state of the accordion item.
             * @return {?}
             */
            CdkAccordionItem.prototype.toggle = /**
             * Toggles the expanded state of the accordion item.
             * @return {?}
             */
            function () {
                if (!this.disabled) {
                    this.expanded = !this.expanded;
                }
            };
            /** Sets the expanded state of the accordion item to false. */
            /**
             * Sets the expanded state of the accordion item to false.
             * @return {?}
             */
            CdkAccordionItem.prototype.close = /**
             * Sets the expanded state of the accordion item to false.
             * @return {?}
             */
            function () {
                if (!this.disabled) {
                    this.expanded = false;
                }
            };
            /** Sets the expanded state of the accordion item to true. */
            /**
             * Sets the expanded state of the accordion item to true.
             * @return {?}
             */
            CdkAccordionItem.prototype.open = /**
             * Sets the expanded state of the accordion item to true.
             * @return {?}
             */
            function () {
                if (!this.disabled) {
                    this.expanded = true;
                }
            };
            /**
             * @return {?}
             */
            CdkAccordionItem.prototype._subscribeToOpenCloseAllActions = /**
             * @return {?}
             */
            function () {
                var _this = this;
                return this.accordion._openCloseAllActions.subscribe(function (expanded) {
                    // Only change expanded state if item is enabled
                    if (!_this.disabled) {
                        _this.expanded = expanded;
                    }
                });
            };
            CdkAccordionItem.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: 'cdk-accordion-item, [cdkAccordionItem]',
                        exportAs: 'cdkAccordionItem',
                    },]
                },
            ];
            /** @nocollapse */
            CdkAccordionItem.ctorParameters = function () {
                return [
                    {type: CdkAccordion, decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"],},
                    {type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__["UniqueSelectionDispatcher"],},
                ];
            };
            CdkAccordionItem.propDecorators = {
                "closed": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "opened": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "destroyed": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "expandedChange": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "expanded": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "disabled": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
            };
            return CdkAccordionItem;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var CdkAccordionModule = /** @class */ (function () {
            function CdkAccordionModule() {
            }

            CdkAccordionModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                        exports: [CdkAccordion, CdkAccordionItem],
                        declarations: [CdkAccordion, CdkAccordionItem],
                    },]
                },
            ];
            return CdkAccordionModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=accordion.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/cdk/esm5/observers.es5.js":
    /*!*********************************************************!*\
  !*** ./node_modules/@angular/cdk/esm5/observers.es5.js ***!
  \*********************************************************/
    /*! exports provided: MutationObserverFactory, ContentObserver, CdkObserveContent, ObserversModule */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MutationObserverFactory", function () {
            return MutationObserverFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ContentObserver", function () {
            return ContentObserver;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkObserveContent", function () {
            return CdkObserveContent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ObserversModule", function () {
            return ObserversModule;
        });
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.
         * \@docs-private
         */
        var MutationObserverFactory = /** @class */ (function () {
            function MutationObserverFactory() {
            }

            /**
             * @param {?} callback
             * @return {?}
             */
            MutationObserverFactory.prototype.create = /**
             * @param {?} callback
             * @return {?}
             */
            function (callback) {
                return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);
            };
            MutationObserverFactory.decorators = [
                {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{providedIn: 'root'},]},
            ];
            /** @nocollapse */ MutationObserverFactory.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["defineInjectable"])({
                factory: function MutationObserverFactory_Factory() {
                    return new MutationObserverFactory();
                }, token: MutationObserverFactory, providedIn: "root"
            });
            return MutationObserverFactory;
        }());
        /**
         * An injectable service that allows watching elements for changes to their content.
         */
        var ContentObserver = /** @class */ (function () {
            function ContentObserver(_mutationObserverFactory) {
                this._mutationObserverFactory = _mutationObserverFactory;
                /**
                 * Keeps track of the existing MutationObservers so they can be reused.
                 */
                this._observedElements = new Map();
            }

            /**
             * @return {?}
             */
            ContentObserver.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                var _this = this;
                this._observedElements.forEach(function (_, element) {
                    return _this._cleanupObserver(element);
                });
            };
            /**
             * Observe content changes on an element.
             * @param element The element to observe for content changes.
             */
            /**
             * Observe content changes on an element.
             * @param {?} element The element to observe for content changes.
             * @return {?}
             */
            ContentObserver.prototype.observe = /**
             * Observe content changes on an element.
             * @param {?} element The element to observe for content changes.
             * @return {?}
             */
            function (element) {
                var _this = this;
                return rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"].create(function (observer) {
                    var /** @type {?} */ stream = _this._observeElement(element);
                    var /** @type {?} */ subscription = stream.subscribe(observer);
                    return function () {
                        subscription.unsubscribe();
                        _this._unobserveElement(element);
                    };
                });
            };
            /**
             * Observes the given element by using the existing MutationObserver if available, or creating a
             * new one if not.
             * @param {?} element
             * @return {?}
             */
            ContentObserver.prototype._observeElement = /**
             * Observes the given element by using the existing MutationObserver if available, or creating a
             * new one if not.
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (!this._observedElements.has(element)) {
                    var /** @type {?} */ stream_1 = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                    var /** @type {?} */ observer = this._mutationObserverFactory.create(function (mutations) {
                        return stream_1.next(mutations);
                    });
                    if (observer) {
                        observer.observe(element, {
                            characterData: true,
                            childList: true,
                            subtree: true
                        });
                    }
                    this._observedElements.set(element, {observer: observer, stream: stream_1, count: 1});
                }
                else {
                    /** @type {?} */ ((this._observedElements.get(element))).count++;
                }
                return /** @type {?} */ ((this._observedElements.get(element))).stream;
            };
            /**
             * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is
             * observing this element.
             * @param {?} element
             * @return {?}
             */
            ContentObserver.prototype._unobserveElement = /**
             * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is
             * observing this element.
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (this._observedElements.has(element)) {
                    /** @type {?} */ ((this._observedElements.get(element))).count--;
                    if (!/** @type {?} */ ((this._observedElements.get(element))).count) {
                        this._cleanupObserver(element);
                    }
                }
            };
            /**
             * Clean up the underlying MutationObserver for the specified element.
             * @param {?} element
             * @return {?}
             */
            ContentObserver.prototype._cleanupObserver = /**
             * Clean up the underlying MutationObserver for the specified element.
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (this._observedElements.has(element)) {
                    var _a = /** @type {?} */ ((this._observedElements.get(element))), observer = _a.observer,
                        stream = _a.stream;
                    if (observer) {
                        observer.disconnect();
                    }
                    stream.complete();
                    this._observedElements.delete(element);
                }
            };
            ContentObserver.decorators = [
                {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{providedIn: 'root'},]},
            ];
            /** @nocollapse */
            ContentObserver.ctorParameters = function () {
                return [
                    {type: MutationObserverFactory,},
                ];
            };
            /** @nocollapse */ ContentObserver.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["defineInjectable"])({
                factory: function ContentObserver_Factory() {
                    return new ContentObserver(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["inject"])(MutationObserverFactory));
                }, token: ContentObserver, providedIn: "root"
            });
            return ContentObserver;
        }());
        /**
         * Directive that triggers a callback whenever the content of
         * its associated element has changed.
         */
        var CdkObserveContent = /** @class */ (function () {
            function CdkObserveContent(_contentObserver, _elementRef, _ngZone) {
                this._contentObserver = _contentObserver;
                this._elementRef = _elementRef;
                this._ngZone = _ngZone;
                /**
                 * Event emitted for each change in the element's content.
                 */
                this.event = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                this._disabled = false;
                this._currentSubscription = null;
            }

            Object.defineProperty(CdkObserveContent.prototype, "disabled", {
                get: /**
                 * Whether observing content is disabled. This option can be used
                 * to disconnect the underlying MutationObserver until it is needed.
                 * @return {?}
                 */
                function () {
                    return this._disabled;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceBooleanProperty"])(value);
                    if (this._disabled) {
                        this._unsubscribe();
                    }
                    else {
                        this._subscribe();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CdkObserveContent.prototype, "debounce", {
                get: /**
                 * Debounce interval for emitting the changes.
                 * @return {?}
                 */
                function () {
                    return this._debounce;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._debounce = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__["coerceNumberProperty"])(value);
                    this._subscribe();
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            CdkObserveContent.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                if (!this._currentSubscription && !this.disabled) {
                    this._subscribe();
                }
            };
            /**
             * @return {?}
             */
            CdkObserveContent.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._unsubscribe();
            };
            /**
             * @return {?}
             */
            CdkObserveContent.prototype._subscribe = /**
             * @return {?}
             */
            function () {
                var _this = this;
                this._unsubscribe();
                var /** @type {?} */ stream = this._contentObserver.observe(this._elementRef.nativeElement);
                // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.
                // Consider brining it back inside the zone next time we're making breaking changes.
                // Bringing it back inside can cause things like infinite change detection loops and changed
                // after checked errors if people's code isn't handling it properly.
                this._ngZone.runOutsideAngular(function () {
                    _this._currentSubscription =
                        (_this.debounce ? stream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["debounceTime"])(_this.debounce)) : stream).subscribe(_this.event);
                });
            };
            /**
             * @return {?}
             */
            CdkObserveContent.prototype._unsubscribe = /**
             * @return {?}
             */
            function () {
                if (this._currentSubscription) {
                    this._currentSubscription.unsubscribe();
                }
            };
            CdkObserveContent.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: '[cdkObserveContent]',
                        exportAs: 'cdkObserveContent',
                    },]
                },
            ];
            /** @nocollapse */
            CdkObserveContent.ctorParameters = function () {
                return [
                    {type: ContentObserver,},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"],},
                ];
            };
            CdkObserveContent.propDecorators = {
                "event": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"], args: ['cdkObserveContent',]},],
                "disabled": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
                    args: ['cdkObserveContentDisabled',]
                },],
                "debounce": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
            };
            return CdkObserveContent;
        }());
        var ObserversModule = /** @class */ (function () {
            function ObserversModule() {
            }

            ObserversModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                        exports: [CdkObserveContent],
                        declarations: [CdkObserveContent],
                        providers: [MutationObserverFactory]
                    },]
                },
            ];
            return ObserversModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=observers.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/cdk/esm5/stepper.es5.js":
    /*!*******************************************************!*\
  !*** ./node_modules/@angular/cdk/esm5/stepper.es5.js ***!
  \*******************************************************/
    /*! exports provided: StepperSelectionEvent, CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious, CdkStepperModule */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "StepperSelectionEvent", function () {
            return StepperSelectionEvent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkStep", function () {
            return CdkStep;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkStepper", function () {
            return CdkStepper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkStepLabel", function () {
            return CdkStepLabel;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkStepperNext", function () {
            return CdkStepperNext;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkStepperPrevious", function () {
            return CdkStepperPrevious;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkStepperModule", function () {
            return CdkStepperModule;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm5/keycodes.es5.js");
        /* harmony import */
        var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var CdkStepLabel = /** @class */ (function () {
            function CdkStepLabel(template) {
                this.template = template;
            }

            CdkStepLabel.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[cdkStepLabel]',
                    },]
                },
            ];
            /** @nocollapse */
            CdkStepLabel.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],},
                ];
            };
            return CdkStepLabel;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Used to generate unique ID for each stepper component.
         */
        var /** @type {?} */ nextId = 0;
        /**
         * Change event emitted on selection changes.
         */
        var /**
         * Change event emitted on selection changes.
         */
        StepperSelectionEvent = /** @class */ (function () {
            function StepperSelectionEvent() {
            }

            return StepperSelectionEvent;
        }());
        var CdkStep = /** @class */ (function () {
            function CdkStep(_stepper) {
                this._stepper = _stepper;
                /**
                 * Whether user has seen the expanded step content or not.
                 */
                this.interacted = false;
                this._editable = true;
                this._optional = false;
                this._customCompleted = null;
            }

            Object.defineProperty(CdkStep.prototype, "editable", {
                get: /**
                 * Whether the user can return to this step once it has been marked as complted.
                 * @return {?}
                 */
                function () {
                    return this._editable;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._editable = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CdkStep.prototype, "optional", {
                get: /**
                 * Whether the completion of step is optional.
                 * @return {?}
                 */
                function () {
                    return this._optional;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._optional = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CdkStep.prototype, "completed", {
                get: /**
                 * Whether step is marked as completed.
                 * @return {?}
                 */
                function () {
                    return this._customCompleted == null ? this._defaultCompleted : this._customCompleted;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._customCompleted = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CdkStep.prototype, "_defaultCompleted", {
                get: /**
                 * @return {?}
                 */
                function () {
                    return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;
                },
                enumerable: true,
                configurable: true
            });
            /** Selects this step component. */
            /**
             * Selects this step component.
             * @return {?}
             */
            CdkStep.prototype.select = /**
             * Selects this step component.
             * @return {?}
             */
            function () {
                this._stepper.selected = this;
            };
            /** Resets the step to its initial state. Note that this includes resetting form data. */
            /**
             * Resets the step to its initial state. Note that this includes resetting form data.
             * @return {?}
             */
            CdkStep.prototype.reset = /**
             * Resets the step to its initial state. Note that this includes resetting form data.
             * @return {?}
             */
            function () {
                this.interacted = false;
                if (this._customCompleted != null) {
                    this._customCompleted = false;
                }
                if (this.stepControl) {
                    this.stepControl.reset();
                }
            };
            /**
             * @return {?}
             */
            CdkStep.prototype.ngOnChanges = /**
             * @return {?}
             */
            function () {
                // Since basically all inputs of the MatStep get proxied through the view down to the
                // underlying MatStepHeader, we have to make sure that change detection runs correctly.
                this._stepper._stateChanged();
            };
            CdkStep.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'cdk-step',
                        exportAs: 'cdkStep',
                        template: '<ng-template><ng-content></ng-content></ng-template>',
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                    },]
                },
            ];
            /** @nocollapse */
            CdkStep.ctorParameters = function () {
                return [
                    {
                        type: CdkStepper,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
                                return CdkStepper;
                            }),]
                        },]
                    },
                ];
            };
            CdkStep.propDecorators = {
                "stepLabel": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
                    args: [CdkStepLabel,]
                },],
                "content": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
                    args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],]
                },],
                "stepControl": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "label": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "editable": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "optional": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "completed": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
            };
            return CdkStep;
        }());
        var CdkStepper = /** @class */ (function () {
            function CdkStepper(_dir, _changeDetectorRef) {
                this._dir = _dir;
                this._changeDetectorRef = _changeDetectorRef;
                /**
                 * Emits when the component is destroyed.
                 */
                this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_6__["Subject"]();
                this._linear = false;
                this._selectedIndex = 0;
                /**
                 * Event emitted when the selected step has changed.
                 */
                this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                this._orientation = 'horizontal';
                this._groupId = nextId++;
            }

            Object.defineProperty(CdkStepper.prototype, "linear", {
                get: /**
                 * Whether the validity of previous steps should be checked or not.
                 * @return {?}
                 */
                function () {
                    return this._linear;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._linear = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CdkStepper.prototype, "selectedIndex", {
                get: /**
                 * The index of the selected step.
                 * @return {?}
                 */
                function () {
                    return this._selectedIndex;
                },
                set: /**
                 * @param {?} index
                 * @return {?}
                 */
                function (index) {
                    if (this._steps) {
                        // Ensure that the index can't be out of bounds.
                        if (index < 0 || index > this._steps.length - 1) {
                            throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');
                        }
                        if (this._selectedIndex != index &&
                            !this._anyControlsInvalidOrPending(index) &&
                            (index >= this._selectedIndex || this._steps.toArray()[index].editable)) {
                            this._updateSelectedItemIndex(index);
                        }
                    }
                    else {
                        this._selectedIndex = index;
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CdkStepper.prototype, "selected", {
                get: /**
                 * The step that is selected.
                 * @return {?}
                 */
                function () {
                    // @deletion-target 7.0.0 Change return type to `CdkStep | undefined`.
                    return this._steps ? this._steps.toArray()[this.selectedIndex] : /** @type {?} */ ((undefined));
                },
                set: /**
                 * @param {?} step
                 * @return {?}
                 */
                function (step) {
                    this.selectedIndex = this._steps ? this._steps.toArray().indexOf(step) : -1;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            CdkStepper.prototype.ngAfterViewInit = /**
             * @return {?}
             */
            function () {
                var _this = this;
                this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusKeyManager"](this._stepHeader)
                    .withWrap()
                    .withVerticalOrientation(this._orientation === 'vertical');
                (this._dir ? /** @type {?} */ (this._dir.change) : Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])())
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["startWith"])(this._layoutDirection()), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(this._destroyed))
                    .subscribe(function (direction) {
                        return _this._keyManager.withHorizontalOrientation(direction);
                    });
                this._keyManager.updateActiveItemIndex(this._selectedIndex);
            };
            /**
             * @return {?}
             */
            CdkStepper.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._destroyed.next();
                this._destroyed.complete();
            };
            /** Selects and focuses the next step in list. */
            /**
             * Selects and focuses the next step in list.
             * @return {?}
             */
            CdkStepper.prototype.next = /**
             * Selects and focuses the next step in list.
             * @return {?}
             */
            function () {
                this.selectedIndex = Math.min(this._selectedIndex + 1, this._steps.length - 1);
            };
            /** Selects and focuses the previous step in list. */
            /**
             * Selects and focuses the previous step in list.
             * @return {?}
             */
            CdkStepper.prototype.previous = /**
             * Selects and focuses the previous step in list.
             * @return {?}
             */
            function () {
                this.selectedIndex = Math.max(this._selectedIndex - 1, 0);
            };
            /** Resets the stepper to its initial state. Note that this includes clearing form data. */
            /**
             * Resets the stepper to its initial state. Note that this includes clearing form data.
             * @return {?}
             */
            CdkStepper.prototype.reset = /**
             * Resets the stepper to its initial state. Note that this includes clearing form data.
             * @return {?}
             */
            function () {
                this._updateSelectedItemIndex(0);
                this._steps.forEach(function (step) {
                    return step.reset();
                });
                this._stateChanged();
            };
            /** Returns a unique id for each step label element. */
            /**
             * Returns a unique id for each step label element.
             * @param {?} i
             * @return {?}
             */
            CdkStepper.prototype._getStepLabelId = /**
             * Returns a unique id for each step label element.
             * @param {?} i
             * @return {?}
             */
            function (i) {
                return "cdk-step-label-" + this._groupId + "-" + i;
            };
            /** Returns unique id for each step content element. */
            /**
             * Returns unique id for each step content element.
             * @param {?} i
             * @return {?}
             */
            CdkStepper.prototype._getStepContentId = /**
             * Returns unique id for each step content element.
             * @param {?} i
             * @return {?}
             */
            function (i) {
                return "cdk-step-content-" + this._groupId + "-" + i;
            };
            /** Marks the component to be change detected. */
            /**
             * Marks the component to be change detected.
             * @return {?}
             */
            CdkStepper.prototype._stateChanged = /**
             * Marks the component to be change detected.
             * @return {?}
             */
            function () {
                this._changeDetectorRef.markForCheck();
            };
            /** Returns position state of the step with the given index. */
            /**
             * Returns position state of the step with the given index.
             * @param {?} index
             * @return {?}
             */
            CdkStepper.prototype._getAnimationDirection = /**
             * Returns position state of the step with the given index.
             * @param {?} index
             * @return {?}
             */
            function (index) {
                var /** @type {?} */ position = index - this._selectedIndex;
                if (position < 0) {
                    return this._layoutDirection() === 'rtl' ? 'next' : 'previous';
                }
                else if (position > 0) {
                    return this._layoutDirection() === 'rtl' ? 'previous' : 'next';
                }
                return 'current';
            };
            /** Returns the type of icon to be displayed. */
            /**
             * Returns the type of icon to be displayed.
             * @param {?} index
             * @return {?}
             */
            CdkStepper.prototype._getIndicatorType = /**
             * Returns the type of icon to be displayed.
             * @param {?} index
             * @return {?}
             */
            function (index) {
                var /** @type {?} */ step = this._steps.toArray()[index];
                if (!step.completed || this._selectedIndex == index) {
                    return 'number';
                }
                else {
                    return step.editable ? 'edit' : 'done';
                }
            };
            /** Returns the index of the currently-focused step header. */
            /**
             * Returns the index of the currently-focused step header.
             * @return {?}
             */
            CdkStepper.prototype._getFocusIndex = /**
             * Returns the index of the currently-focused step header.
             * @return {?}
             */
            function () {
                return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;
            };
            /**
             * @param {?} newIndex
             * @return {?}
             */
            CdkStepper.prototype._updateSelectedItemIndex = /**
             * @param {?} newIndex
             * @return {?}
             */
            function (newIndex) {
                var /** @type {?} */ stepsArray = this._steps.toArray();
                this.selectionChange.emit({
                    selectedIndex: newIndex,
                    previouslySelectedIndex: this._selectedIndex,
                    selectedStep: stepsArray[newIndex],
                    previouslySelectedStep: stepsArray[this._selectedIndex],
                });
                this._keyManager.updateActiveItemIndex(newIndex);
                this._selectedIndex = newIndex;
                this._stateChanged();
            };
            /**
             * @param {?} event
             * @return {?}
             */
            CdkStepper.prototype._onKeydown = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                var /** @type {?} */ keyCode = event.keyCode;
                if (this._keyManager.activeItemIndex != null && (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["SPACE"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["ENTER"])) {
                    this.selectedIndex = this._keyManager.activeItemIndex;
                    event.preventDefault();
                }
                else if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["HOME"]) {
                    this._keyManager.setFirstItemActive();
                    event.preventDefault();
                }
                else if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["END"]) {
                    this._keyManager.setLastItemActive();
                    event.preventDefault();
                }
                else {
                    this._keyManager.onKeydown(event);
                }
            };
            /**
             * @param {?} index
             * @return {?}
             */
            CdkStepper.prototype._anyControlsInvalidOrPending = /**
             * @param {?} index
             * @return {?}
             */
            function (index) {
                var /** @type {?} */ steps = this._steps.toArray();
                steps[this._selectedIndex].interacted = true;
                if (this._linear && index >= 0) {
                    return steps.slice(0, index).some(function (step) {
                        var /** @type {?} */ control = step.stepControl;
                        var /** @type {?} */ isIncomplete = control ?
                            (control.invalid || control.pending || !step.interacted) :
                            !step.completed;
                        return isIncomplete && !step.optional;
                    });
                }
                return false;
            };
            /**
             * @return {?}
             */
            CdkStepper.prototype._layoutDirection = /**
             * @return {?}
             */
            function () {
                return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
            };
            CdkStepper.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[cdkStepper]',
                        exportAs: 'cdkStepper',
                    },]
                },
            ];
            /** @nocollapse */
            CdkStepper.ctorParameters = function () {
                return [
                    {
                        type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"],},
                ];
            };
            CdkStepper.propDecorators = {
                "_steps": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [CdkStep,]},],
                "linear": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selectedIndex": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selected": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selectionChange": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
            };
            return CdkStepper;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Button that moves to the next step in a stepper workflow.
         */
        var CdkStepperNext = /** @class */ (function () {
            function CdkStepperNext(_stepper) {
                this._stepper = _stepper;
                /**
                 * Type of the next button. Defaults to "submit" if not specified.
                 */
                this.type = 'submit';
            }

            CdkStepperNext.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: 'button[cdkStepperNext]',
                        host: {
                            '(click)': '_stepper.next()',
                            '[type]': 'type',
                        }
                    },]
                },
            ];
            /** @nocollapse */
            CdkStepperNext.ctorParameters = function () {
                return [
                    {type: CdkStepper,},
                ];
            };
            CdkStepperNext.propDecorators = {
                "type": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
            };
            return CdkStepperNext;
        }());
        /**
         * Button that moves to the previous step in a stepper workflow.
         */
        var CdkStepperPrevious = /** @class */ (function () {
            function CdkStepperPrevious(_stepper) {
                this._stepper = _stepper;
                /**
                 * Type of the previous button. Defaults to "button" if not specified.
                 */
                this.type = 'button';
            }

            CdkStepperPrevious.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: 'button[cdkStepperPrevious]',
                        host: {
                            '(click)': '_stepper.previous()',
                            '[type]': 'type',
                        }
                    },]
                },
            ];
            /** @nocollapse */
            CdkStepperPrevious.ctorParameters = function () {
                return [
                    {type: CdkStepper,},
                ];
            };
            CdkStepperPrevious.propDecorators = {
                "type": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
            };
            return CdkStepperPrevious;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var CdkStepperModule = /** @class */ (function () {
            function CdkStepperModule() {
            }

            CdkStepperModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                        imports: [_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"], _angular_common__WEBPACK_IMPORTED_MODULE_8__["CommonModule"]],
                        exports: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious],
                        declarations: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious]
                    },]
                },
            ];
            return CdkStepperModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=stepper.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/cdk/esm5/table.es5.js":
    /*!*****************************************************!*\
  !*** ./node_modules/@angular/cdk/esm5/table.es5.js ***!
  \*****************************************************/
    /*! exports provided: DataSource, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DataRowOutlet", function () {
            return DataRowOutlet;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "HeaderRowOutlet", function () {
            return HeaderRowOutlet;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "FooterRowOutlet", function () {
            return FooterRowOutlet;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CDK_TABLE_TEMPLATE", function () {
            return CDK_TABLE_TEMPLATE;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkTable", function () {
            return CdkTable;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkCellDef", function () {
            return CdkCellDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkHeaderCellDef", function () {
            return CdkHeaderCellDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkFooterCellDef", function () {
            return CdkFooterCellDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkColumnDef", function () {
            return CdkColumnDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "BaseCdkCell", function () {
            return BaseCdkCell;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkHeaderCell", function () {
            return CdkHeaderCell;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkFooterCell", function () {
            return CdkFooterCell;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkCell", function () {
            return CdkCell;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CDK_ROW_TEMPLATE", function () {
            return CDK_ROW_TEMPLATE;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "BaseRowDef", function () {
            return BaseRowDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkHeaderRowDef", function () {
            return CdkHeaderRowDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkFooterRowDef", function () {
            return CdkFooterRowDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkRowDef", function () {
            return CdkRowDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkCellOutlet", function () {
            return CdkCellOutlet;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkHeaderRow", function () {
            return CdkHeaderRow;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkFooterRow", function () {
            return CdkFooterRow;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkRow", function () {
            return CdkRow;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkTableModule", function () {
            return CdkTableModule;
        });
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm5/collections.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "DataSource", function () {
            return _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["DataSource"];
        });

        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Cell definition for a CDK table.
         * Captures the template of a column's data row cell as well as cell-specific properties.
         */
        var CdkCellDef = /** @class */ (function () {
            function CdkCellDef(template) {
                this.template = template;
            }

            CdkCellDef.decorators = [
                {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{selector: '[cdkCellDef]'},]},
            ];
            /** @nocollapse */
            CdkCellDef.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],},
                ];
            };
            return CdkCellDef;
        }());
        /**
         * Header cell definition for a CDK table.
         * Captures the template of a column's header cell and as well as cell-specific properties.
         */
        var CdkHeaderCellDef = /** @class */ (function () {
            function CdkHeaderCellDef(template) {
                this.template = template;
            }

            CdkHeaderCellDef.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
                    args: [{selector: '[cdkHeaderCellDef]'},]
                },
            ];
            /** @nocollapse */
            CdkHeaderCellDef.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],},
                ];
            };
            return CdkHeaderCellDef;
        }());
        /**
         * Footer cell definition for a CDK table.
         * Captures the template of a column's footer cell and as well as cell-specific properties.
         */
        var CdkFooterCellDef = /** @class */ (function () {
            function CdkFooterCellDef(template) {
                this.template = template;
            }

            CdkFooterCellDef.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
                    args: [{selector: '[cdkFooterCellDef]'},]
                },
            ];
            /** @nocollapse */
            CdkFooterCellDef.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],},
                ];
            };
            return CdkFooterCellDef;
        }());
        /**
         * Column definition for the CDK table.
         * Defines a set of cells available for a table column.
         */
        var CdkColumnDef = /** @class */ (function () {
            function CdkColumnDef() {
            }

            Object.defineProperty(CdkColumnDef.prototype, "name", {
                get: /**
                 * Unique name for this column.
                 * @return {?}
                 */
                function () {
                    return this._name;
                },
                set: /**
                 * @param {?} name
                 * @return {?}
                 */
                function (name) {
                    // If the directive is set without a name (updated programatically), then this setter will
                    // trigger with an empty string and should not overwrite the programatically set value.
                    if (!name) {
                        return;
                    }
                    this._name = name;
                    this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');
                },
                enumerable: true,
                configurable: true
            });
            CdkColumnDef.decorators = [
                {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{selector: '[cdkColumnDef]'},]},
            ];
            /** @nocollapse */
            CdkColumnDef.propDecorators = {
                "name": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['cdkColumnDef',]},],
                "cell": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"], args: [CdkCellDef,]},],
                "headerCell": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
                    args: [CdkHeaderCellDef,]
                },],
                "footerCell": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
                    args: [CdkFooterCellDef,]
                },],
            };
            return CdkColumnDef;
        }());
        /**
         * Base class for the cells. Adds a CSS classname that identifies the column it renders in.
         */
        var /**
         * Base class for the cells. Adds a CSS classname that identifies the column it renders in.
         */
        BaseCdkCell = /** @class */ (function () {
            function BaseCdkCell(columnDef, elementRef) {
                var /** @type {?} */ columnClassName = "cdk-column-" + columnDef.cssClassFriendlyName;
                elementRef.nativeElement.classList.add(columnClassName);
            }

            return BaseCdkCell;
        }());
        /**
         * Header cell template container that adds the right classes and role.
         */
        var CdkHeaderCell = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CdkHeaderCell, _super);

            function CdkHeaderCell(columnDef, elementRef) {
                return _super.call(this, columnDef, elementRef) || this;
            }

            CdkHeaderCell.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: 'cdk-header-cell, th[cdk-header-cell]',
                        host: {
                            'class': 'cdk-header-cell',
                            'role': 'columnheader',
                        },
                    },]
                },
            ];
            /** @nocollapse */
            CdkHeaderCell.ctorParameters = function () {
                return [
                    {type: CdkColumnDef,},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                ];
            };
            return CdkHeaderCell;
        }(BaseCdkCell));
        /**
         * Footer cell template container that adds the right classes and role.
         */
        var CdkFooterCell = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CdkFooterCell, _super);

            function CdkFooterCell(columnDef, elementRef) {
                return _super.call(this, columnDef, elementRef) || this;
            }

            CdkFooterCell.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: 'cdk-footer-cell, td[cdk-footer-cell]',
                        host: {
                            'class': 'cdk-footer-cell',
                            'role': 'gridcell',
                        },
                    },]
                },
            ];
            /** @nocollapse */
            CdkFooterCell.ctorParameters = function () {
                return [
                    {type: CdkColumnDef,},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                ];
            };
            return CdkFooterCell;
        }(BaseCdkCell));
        /**
         * Cell template container that adds the right classes and role.
         */
        var CdkCell = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CdkCell, _super);

            function CdkCell(columnDef, elementRef) {
                return _super.call(this, columnDef, elementRef) || this;
            }

            CdkCell.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: 'cdk-cell, td[cdk-cell]',
                        host: {
                            'class': 'cdk-cell',
                            'role': 'gridcell',
                        },
                    },]
                },
            ];
            /** @nocollapse */
            CdkCell.ctorParameters = function () {
                return [
                    {type: CdkColumnDef,},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                ];
            };
            return CdkCell;
        }(BaseCdkCell));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * The row template that can be used by the mat-table. Should not be used outside of the
         * material library.
         */
        var /** @type {?} */ CDK_ROW_TEMPLATE = "<ng-container cdkCellOutlet></ng-container>";
        /**
         * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs
         * for changes and notifying the table.
         * @abstract
         */
        var /**
         * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs
         * for changes and notifying the table.
         * @abstract
         */
        BaseRowDef = /** @class */ (function () {
            function BaseRowDef(template, _differs) {
                this.template = template;
                this._differs = _differs;
            }

            /**
             * @param {?} changes
             * @return {?}
             */
            BaseRowDef.prototype.ngOnChanges = /**
             * @param {?} changes
             * @return {?}
             */
            function (changes) {
                // Create a new columns differ if one does not yet exist. Initialize it based on initial value
                // of the columns property or an empty array if none is provided.
                var /** @type {?} */ columns = changes['columns'].currentValue || [];
                if (!this._columnsDiffer) {
                    this._columnsDiffer = this._differs.find(columns).create();
                    this._columnsDiffer.diff(columns);
                }
            };
            /**
             * Returns the difference between the current columns and the columns from the last diff, or null
             * if there is no difference.
             */
            /**
             * Returns the difference between the current columns and the columns from the last diff, or null
             * if there is no difference.
             * @return {?}
             */
            BaseRowDef.prototype.getColumnsDiff = /**
             * Returns the difference between the current columns and the columns from the last diff, or null
             * if there is no difference.
             * @return {?}
             */
            function () {
                return this._columnsDiffer.diff(this.columns);
            };
            return BaseRowDef;
        }());
        /**
         * Header row definition for the CDK table.
         * Captures the header row's template and other header properties such as the columns to display.
         */
        var CdkHeaderRowDef = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CdkHeaderRowDef, _super);

            function CdkHeaderRowDef(template, _differs) {
                return _super.call(this, template, _differs) || this;
            }

            /** Gets this row def's relevant cell template from the provided column def. */
            /**
             * Gets this row def's relevant cell template from the provided column def.
             * @param {?} column
             * @return {?}
             */
            CdkHeaderRowDef.prototype.extractCellTemplate = /**
             * Gets this row def's relevant cell template from the provided column def.
             * @param {?} column
             * @return {?}
             */
            function (column) {
                return column.headerCell.template;
            };
            CdkHeaderRowDef.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: '[cdkHeaderRowDef]',
                        inputs: ['columns: cdkHeaderRowDef'],
                    },]
                },
            ];
            /** @nocollapse */
            CdkHeaderRowDef.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"],},
                ];
            };
            return CdkHeaderRowDef;
        }(BaseRowDef));
        /**
         * Footer row definition for the CDK table.
         * Captures the footer row's template and other footer properties such as the columns to display.
         */
        var CdkFooterRowDef = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CdkFooterRowDef, _super);

            function CdkFooterRowDef(template, _differs) {
                return _super.call(this, template, _differs) || this;
            }

            /** Gets this row def's relevant cell template from the provided column def. */
            /**
             * Gets this row def's relevant cell template from the provided column def.
             * @param {?} column
             * @return {?}
             */
            CdkFooterRowDef.prototype.extractCellTemplate = /**
             * Gets this row def's relevant cell template from the provided column def.
             * @param {?} column
             * @return {?}
             */
            function (column) {
                return column.footerCell.template;
            };
            CdkFooterRowDef.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: '[cdkFooterRowDef]',
                        inputs: ['columns: cdkFooterRowDef'],
                    },]
                },
            ];
            /** @nocollapse */
            CdkFooterRowDef.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"],},
                ];
            };
            return CdkFooterRowDef;
        }(BaseRowDef));
        /**
         * Data row definition for the CDK table.
         * Captures the header row's template and other row properties such as the columns to display and
         * a when predicate that describes when this row should be used.
         * @template T
         */
        var CdkRowDef = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CdkRowDef, _super);
            // TODO(andrewseguin): Add an input for providing a switch function to determine
            //   if this template should be used.
            function CdkRowDef(template, _differs) {
                return _super.call(this, template, _differs) || this;
            }

            /** Gets this row def's relevant cell template from the provided column def. */
            /**
             * Gets this row def's relevant cell template from the provided column def.
             * @param {?} column
             * @return {?}
             */
            CdkRowDef.prototype.extractCellTemplate = /**
             * Gets this row def's relevant cell template from the provided column def.
             * @param {?} column
             * @return {?}
             */
            function (column) {
                return column.cell.template;
            };
            CdkRowDef.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: '[cdkRowDef]',
                        inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],
                    },]
                },
            ];
            /** @nocollapse */
            CdkRowDef.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"],},
                ];
            };
            return CdkRowDef;
        }(BaseRowDef));
        /**
         * Outlet for rendering cells inside of a row or header row.
         * \@docs-private
         */
        var CdkCellOutlet = /** @class */ (function () {
            function CdkCellOutlet(_viewContainer) {
                this._viewContainer = _viewContainer;
                CdkCellOutlet.mostRecentCellOutlet = this;
            }

            /**
             * Static property containing the latest constructed instance of this class.
             * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using
             * createEmbeddedView. After one of these components are created, this property will provide
             * a handle to provide that component's cells and context. After init, the CdkCellOutlet will
             * construct the cells with the provided context.
             */
            CdkCellOutlet.mostRecentCellOutlet = null;
            CdkCellOutlet.decorators = [
                {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{selector: '[cdkCellOutlet]'},]},
            ];
            /** @nocollapse */
            CdkCellOutlet.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"],},
                ];
            };
            return CdkCellOutlet;
        }());
        /**
         * Header template container that contains the cell outlet. Adds the right class and role.
         */
        var CdkHeaderRow = /** @class */ (function () {
            function CdkHeaderRow() {
            }

            CdkHeaderRow.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'cdk-header-row, tr[cdk-header-row]',
                        template: CDK_ROW_TEMPLATE,
                        host: {
                            'class': 'cdk-header-row',
                            'role': 'row',
                        },
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                    },]
                },
            ];
            return CdkHeaderRow;
        }());
        /**
         * Footer template container that contains the cell outlet. Adds the right class and role.
         */
        var CdkFooterRow = /** @class */ (function () {
            function CdkFooterRow() {
            }

            CdkFooterRow.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'cdk-footer-row, tr[cdk-footer-row]',
                        template: CDK_ROW_TEMPLATE,
                        host: {
                            'class': 'cdk-footer-row',
                            'role': 'row',
                        },
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                    },]
                },
            ];
            return CdkFooterRow;
        }());
        /**
         * Data row template container that contains the cell outlet. Adds the right class and role.
         */
        var CdkRow = /** @class */ (function () {
            function CdkRow() {
            }

            CdkRow.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'cdk-row, tr[cdk-row]',
                        template: CDK_ROW_TEMPLATE,
                        host: {
                            'class': 'cdk-row',
                            'role': 'row',
                        },
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                    },]
                },
            ];
            return CdkRow;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * Returns an error to be thrown when attempting to find an unexisting column.
         * \@docs-private
         * @param {?} id Id whose lookup failed.
         * @return {?}
         */
        function getTableUnknownColumnError(id) {
            return Error("Could not find column with id \"" + id + "\".");
        }

        /**
         * Returns an error to be thrown when two column definitions have the same name.
         * \@docs-private
         * @param {?} name
         * @return {?}
         */
        function getTableDuplicateColumnNameError(name) {
            return Error("Duplicate column definition name provided: \"" + name + "\".");
        }

        /**
         * Returns an error to be thrown when there are multiple rows that are missing a when function.
         * \@docs-private
         * @return {?}
         */
        function getTableMultipleDefaultRowDefsError() {
            return Error("There can only be one default row without a when predicate function.");
        }

        /**
         * Returns an error to be thrown when there are no matching row defs for a particular set of data.
         * \@docs-private
         * @param {?} data
         * @return {?}
         */
        function getTableMissingMatchingRowDefError(data) {
            return Error("Could not find a matching row definition for the" +
                ("provided row data: " + JSON.stringify(data)));
        }

        /**
         * Returns an error to be thrown when there is no row definitions present in the content.
         * \@docs-private
         * @return {?}
         */
        function getTableMissingRowDefsError() {
            return Error('Missing definitions for header, footer, and row; ' +
                'cannot determine which columns should be rendered.');
        }

        /**
         * Returns an error to be thrown when the data source does not match the compatible types.
         * \@docs-private
         * @return {?}
         */
        function getTableUnknownDataSourceError() {
            return Error("Provided data source did not match an array, Observable, or DataSource");
        }

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Provides a handle for the table to grab the view container's ng-container to insert data rows.
         * \@docs-private
         */
        var DataRowOutlet = /** @class */ (function () {
            function DataRowOutlet(viewContainer, elementRef) {
                this.viewContainer = viewContainer;
                this.elementRef = elementRef;
            }

            DataRowOutlet.decorators = [
                {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{selector: '[rowOutlet]'},]},
            ];
            /** @nocollapse */
            DataRowOutlet.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                ];
            };
            return DataRowOutlet;
        }());
        /**
         * Provides a handle for the table to grab the view container's ng-container to insert the header.
         * \@docs-private
         */
        var HeaderRowOutlet = /** @class */ (function () {
            function HeaderRowOutlet(viewContainer, elementRef) {
                this.viewContainer = viewContainer;
                this.elementRef = elementRef;
            }

            HeaderRowOutlet.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
                    args: [{selector: '[headerRowOutlet]'},]
                },
            ];
            /** @nocollapse */
            HeaderRowOutlet.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                ];
            };
            return HeaderRowOutlet;
        }());
        /**
         * Provides a handle for the table to grab the view container's ng-container to insert the footer.
         * \@docs-private
         */
        var FooterRowOutlet = /** @class */ (function () {
            function FooterRowOutlet(viewContainer, elementRef) {
                this.viewContainer = viewContainer;
                this.elementRef = elementRef;
            }

            FooterRowOutlet.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
                    args: [{selector: '[footerRowOutlet]'},]
                },
            ];
            /** @nocollapse */
            FooterRowOutlet.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                ];
            };
            return FooterRowOutlet;
        }());
        /**
         * The table template that can be used by the mat-table. Should not be used outside of the
         * material library.
         * \@docs-private
         */
        var /** @type {?} */ CDK_TABLE_TEMPLATE = "\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>";
        /**
         * Class used to conveniently type the embedded view ref for rows with a context.
         * \@docs-private
         * @abstract
         * @template T
         */
        var /**
         * Class used to conveniently type the embedded view ref for rows with a context.
         * \@docs-private
         * @abstract
         * @template T
         */
        RowViewRef = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(RowViewRef, _super);

            function RowViewRef() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            return RowViewRef;
        }(_angular_core__WEBPACK_IMPORTED_MODULE_1__["EmbeddedViewRef"]));
        /**
         * A data table that can render a header row, data rows, and a footer row.
         * Uses the dataSource input to determine the data to be rendered. The data can be provided either
         * as a data array, an Observable stream that emits the data array to render, or a DataSource with a
         * connect function that will return an Observable stream that emits the data array to render.
         * @template T
         */
        var CdkTable = /** @class */ (function () {
            function CdkTable(_differs, _changeDetectorRef, _elementRef, role) {
                this._differs = _differs;
                this._changeDetectorRef = _changeDetectorRef;
                this._elementRef = _elementRef;
                /**
                 * Subject that emits when the component has been destroyed.
                 */
                this._onDestroy = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
                /**
                 * Map of all the user's defined columns (header, data, and footer cell template) identified by
                 * name. Collection populated by the column definitions gathered by `ContentChildren` as well as
                 * any custom column definitions added to `_customColumnDefs`.
                 */
                this._columnDefsByName = new Map();
                /**
                 * Column definitions that were defined outside of the direct content children of the table.
                 * These will be defined when, e.g., creating a wrapper around the cdkTable that has
                 * column definitions as *it's* content child.
                 */
                this._customColumnDefs = new Set();
                /**
                 * Data row definitions that were defined outside of the direct content children of the table.
                 * These will be defined when, e.g., creating a wrapper around the cdkTable that has
                 * built-in data rows as *it's* content child.
                 */
                this._customRowDefs = new Set();
                /**
                 * Header row definitions that were defined outside of the direct content children of the table.
                 * These will be defined when, e.g., creating a wrapper around the cdkTable that has
                 * built-in header rows as *it's* content child.
                 */
                this._customHeaderRowDefs = new Set();
                /**
                 * Footer row definitions that were defined outside of the direct content children of the table.
                 * These will be defined when, e.g., creating a wrapper around the cdkTable that has a
                 * built-in footer row as *it's* content child.
                 */
                this._customFooterRowDefs = new Set();
                /**
                 * Whether the header row definition has been changed. Triggers an update to the header row after
                 * content is checked. Initialized as true so that the table renders the initial set of rows.
                 */
                this._headerRowDefChanged = true;
                /**
                 * Whether the footer row definition has been changed. Triggers an update to the footer row after
                 * content is checked. Initialized as true so that the table renders the initial set of rows.
                 */
                this._footerRowDefChanged = true;
                /**
                 * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing
                 * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with
                 * the cached `RenderRow` objects when possible, the row identity is preserved when the data
                 * and row template matches, which allows the `IterableDiffer` to check rows by reference
                 * and understand which rows are added/moved/removed.
                 *
                 * Implemented as a map of maps where the first key is the `data: T` object and the second is the
                 * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that
                 * contains an array of created pairs. The array is necessary to handle cases where the data
                 * array contains multiple duplicate data objects and each instantiated `RenderRow` must be
                 * stored.
                 */
                this._cachedRenderRowsMap = new Map();
                this._multiTemplateDataRows = false;
                /**
                 * Stream containing the latest information on what rows are being displayed on screen.
                 * Can be used by the data source to as a heuristic of what data should be provided.
                 */
                this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_3__["BehaviorSubject"]({
                    start: 0,
                    end: Number.MAX_VALUE
                });
                if (!role) {
                    this._elementRef.nativeElement.setAttribute('role', 'grid');
                }
            }

            Object.defineProperty(CdkTable.prototype, "trackBy", {
                get: /**
                 * Tracking function that will be used to check the differences in data changes. Used similarly
                 * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data
                 * relative to the function to know if a row should be added/removed/moved.
                 * Accepts a function that takes two parameters, `index` and `item`.
                 * @return {?}
                 */
                function () {
                    return this._trackByFn;
                },
                set: /**
                 * @param {?} fn
                 * @return {?}
                 */
                function (fn) {
                    if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() &&
                        fn != null && typeof fn !== 'function' && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {
                        console.warn("trackBy must be a function, but received " + JSON.stringify(fn) + ".");
                    }
                    this._trackByFn = fn;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CdkTable.prototype, "dataSource", {
                get: /**
                 * The table's source of data, which can be provided in three ways (in order of complexity):
                 *   - Simple data array (each object represents one table row)
                 *   - Stream that emits a data array each time the array changes
                 *   - `DataSource` object that implements the connect/disconnect interface.
                 *
                 * If a data array is provided, the table must be notified when the array's objects are
                 * added, removed, or moved. This can be done by calling the `renderRows()` function which will
                 * render the diff since the last table render. If the data array reference is changed, the table
                 * will automatically trigger an update to the rows.
                 *
                 * When providing an Observable stream, the table will trigger an update automatically when the
                 * stream emits a new array of data.
                 *
                 * Finally, when providing a `DataSource` object, the table will use the Observable stream
                 * provided by the connect function and trigger updates when that stream emits new data array
                 * values. During the table's ngOnDestroy or when the data source is removed from the table, the
                 * table will call the DataSource's `disconnect` function (may be useful for cleaning up any
                 * subscriptions registered during the connect process).
                 * @return {?}
                 */
                function () {
                    return this._dataSource;
                },
                set: /**
                 * @param {?} dataSource
                 * @return {?}
                 */
                function (dataSource) {
                    if (this._dataSource !== dataSource) {
                        this._switchDataSource(dataSource);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CdkTable.prototype, "multiTemplateDataRows", {
                get: /**
                 * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'
                 * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each
                 * dataobject will render the first row that evaluates its when predicate to true, in the order
                 * defined in the table, or otherwise the default row which does not have a when predicate.
                 * @return {?}
                 */
                function () {
                    return this._multiTemplateDataRows;
                },
                set: /**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    this._multiTemplateDataRows = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["coerceBooleanProperty"])(v);
                    if (this._rowOutlet.viewContainer.length) {
                        this._forceRenderDataRows();
                    }
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            CdkTable.prototype.ngOnInit = /**
             * @return {?}
             */
            function () {
                var _this = this;
                if (this._elementRef.nativeElement.nodeName === 'TABLE') {
                    this._applyNativeTableSections();
                }
                // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If
                // the user has provided a custom trackBy, return the result of that function as evaluated
                // with the values of the `RenderRow`'s data and index.
                this._dataDiffer = this._differs.find([]).create(function (_i, dataRow) {
                    return _this.trackBy ? _this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;
                });
            };
            /**
             * @return {?}
             */
            CdkTable.prototype.ngAfterContentChecked = /**
             * @return {?}
             */
            function () {
                // Cache the row and column definitions gathered by ContentChildren and programmatic injection.
                this._cacheRowDefs();
                this._cacheColumnDefs();
                // Make sure that the user has at least added header, footer, or data row def.
                if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {
                    throw getTableMissingRowDefsError();
                }
                // Render updates if the list of columns have been changed for the header, row, or footer defs.
                this._renderUpdatedColumns();
                // If the header row definition has been changed, trigger a render to the header row.
                if (this._headerRowDefChanged) {
                    this._forceRenderHeaderRows();
                    this._headerRowDefChanged = false;
                }
                // If the footer row definition has been changed, trigger a render to the footer row.
                if (this._footerRowDefChanged) {
                    this._forceRenderFooterRows();
                    this._footerRowDefChanged = false;
                }
                // If there is a data source and row definitions, connect to the data source unless a
                // connection has already been made.
                if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {
                    this._observeRenderChanges();
                }
            };
            /**
             * @return {?}
             */
            CdkTable.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._rowOutlet.viewContainer.clear();
                this._headerRowOutlet.viewContainer.clear();
                this._footerRowOutlet.viewContainer.clear();
                this._cachedRenderRowsMap.clear();
                this._onDestroy.next();
                this._onDestroy.complete();
                if (this.dataSource instanceof _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["DataSource"]) {
                    this.dataSource.disconnect(this);
                }
            };
            /**
             * Renders rows based on the table's latest set of data, which was either provided directly as an
             * input or retrieved through an Observable stream (directly or from a DataSource).
             * Checks for differences in the data since the last diff to perform only the necessary
             * changes (add/remove/move rows).
             *
             * If the table's data source is a DataSource or Observable, this will be invoked automatically
             * each time the provided Observable stream emits a new data array. Otherwise if your data is
             * an array, this function will need to be called to render any changes.
             */
            /**
             * Renders rows based on the table's latest set of data, which was either provided directly as an
             * input or retrieved through an Observable stream (directly or from a DataSource).
             * Checks for differences in the data since the last diff to perform only the necessary
             * changes (add/remove/move rows).
             *
             * If the table's data source is a DataSource or Observable, this will be invoked automatically
             * each time the provided Observable stream emits a new data array. Otherwise if your data is
             * an array, this function will need to be called to render any changes.
             * @return {?}
             */
            CdkTable.prototype.renderRows = /**
             * Renders rows based on the table's latest set of data, which was either provided directly as an
             * input or retrieved through an Observable stream (directly or from a DataSource).
             * Checks for differences in the data since the last diff to perform only the necessary
             * changes (add/remove/move rows).
             *
             * If the table's data source is a DataSource or Observable, this will be invoked automatically
             * each time the provided Observable stream emits a new data array. Otherwise if your data is
             * an array, this function will need to be called to render any changes.
             * @return {?}
             */
            function () {
                var _this = this;
                this._renderRows = this._getAllRenderRows();
                var /** @type {?} */ changes = this._dataDiffer.diff(this._renderRows);
                if (!changes) {
                    return;
                }
                var /** @type {?} */ viewContainer = this._rowOutlet.viewContainer;
                changes.forEachOperation(function (record, prevIndex, currentIndex) {
                    if (record.previousIndex == null) {
                        _this._insertRow(record.item, currentIndex);
                    }
                    else if (currentIndex == null) {
                        viewContainer.remove(prevIndex);
                    }
                    else {
                        var /** @type {?} */ view = /** @type {?} */ (viewContainer.get(prevIndex));
                        viewContainer.move(/** @type {?} */ ((view)), currentIndex);
                    }
                });
                // Update the meta context of a row's context data (index, count, first, last, ...)
                this._updateRowIndexContext();
                // Update rows that did not get added/removed/moved but may have had their identity changed,
                // e.g. if trackBy matched data on some property but the actual data reference changed.
                changes.forEachIdentityChange(function (record) {
                    var /** @type {?} */ rowView = /** @type {?} */ (viewContainer.get(/** @type {?} */ ((record.currentIndex))));
                    rowView.context.$implicit = record.item.data;
                });
            };
            /**
             * Sets the header row definition to be used. Overrides the header row definition gathered by
             * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the
             * table's content is checked.
             * @docs-private
             * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead
             * @deletion-target 8.0.0
             */
            /**
             * Sets the header row definition to be used. Overrides the header row definition gathered by
             * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the
             * table's content is checked.
             * \@docs-private
             * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead
             * \@deletion-target 8.0.0
             * @param {?} headerRowDef
             * @return {?}
             */
            CdkTable.prototype.setHeaderRowDef = /**
             * Sets the header row definition to be used. Overrides the header row definition gathered by
             * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the
             * table's content is checked.
             * \@docs-private
             * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead
             * \@deletion-target 8.0.0
             * @param {?} headerRowDef
             * @return {?}
             */
            function (headerRowDef) {
                this._customHeaderRowDefs = new Set([headerRowDef]);
                this._headerRowDefChanged = true;
            };
            /**
             * Sets the footer row definition to be used. Overrides the footer row definition gathered by
             * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the
             * table's content is checked.
             * @docs-private
             * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead
             * @deletion-target 8.0.0
             */
            /**
             * Sets the footer row definition to be used. Overrides the footer row definition gathered by
             * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the
             * table's content is checked.
             * \@docs-private
             * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead
             * \@deletion-target 8.0.0
             * @param {?} footerRowDef
             * @return {?}
             */
            CdkTable.prototype.setFooterRowDef = /**
             * Sets the footer row definition to be used. Overrides the footer row definition gathered by
             * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the
             * table's content is checked.
             * \@docs-private
             * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead
             * \@deletion-target 8.0.0
             * @param {?} footerRowDef
             * @return {?}
             */
            function (footerRowDef) {
                this._customFooterRowDefs = new Set([footerRowDef]);
                this._footerRowDefChanged = true;
            };
            /** Adds a column definition that was not included as part of the content children. */
            /**
             * Adds a column definition that was not included as part of the content children.
             * @param {?} columnDef
             * @return {?}
             */
            CdkTable.prototype.addColumnDef = /**
             * Adds a column definition that was not included as part of the content children.
             * @param {?} columnDef
             * @return {?}
             */
            function (columnDef) {
                this._customColumnDefs.add(columnDef);
            };
            /** Removes a column definition that was not included as part of the content children. */
            /**
             * Removes a column definition that was not included as part of the content children.
             * @param {?} columnDef
             * @return {?}
             */
            CdkTable.prototype.removeColumnDef = /**
             * Removes a column definition that was not included as part of the content children.
             * @param {?} columnDef
             * @return {?}
             */
            function (columnDef) {
                this._customColumnDefs.delete(columnDef);
            };
            /** Adds a row definition that was not included as part of the content children. */
            /**
             * Adds a row definition that was not included as part of the content children.
             * @param {?} rowDef
             * @return {?}
             */
            CdkTable.prototype.addRowDef = /**
             * Adds a row definition that was not included as part of the content children.
             * @param {?} rowDef
             * @return {?}
             */
            function (rowDef) {
                this._customRowDefs.add(rowDef);
            };
            /** Removes a row definition that was not included as part of the content children. */
            /**
             * Removes a row definition that was not included as part of the content children.
             * @param {?} rowDef
             * @return {?}
             */
            CdkTable.prototype.removeRowDef = /**
             * Removes a row definition that was not included as part of the content children.
             * @param {?} rowDef
             * @return {?}
             */
            function (rowDef) {
                this._customRowDefs.delete(rowDef);
            };
            /** Adds a header row definition that was not included as part of the content children. */
            /**
             * Adds a header row definition that was not included as part of the content children.
             * @param {?} headerRowDef
             * @return {?}
             */
            CdkTable.prototype.addHeaderRowDef = /**
             * Adds a header row definition that was not included as part of the content children.
             * @param {?} headerRowDef
             * @return {?}
             */
            function (headerRowDef) {
                this._customHeaderRowDefs.add(headerRowDef);
                this._headerRowDefChanged = true;
            };
            /** Removes a header row definition that was not included as part of the content children. */
            /**
             * Removes a header row definition that was not included as part of the content children.
             * @param {?} headerRowDef
             * @return {?}
             */
            CdkTable.prototype.removeHeaderRowDef = /**
             * Removes a header row definition that was not included as part of the content children.
             * @param {?} headerRowDef
             * @return {?}
             */
            function (headerRowDef) {
                this._customHeaderRowDefs.delete(headerRowDef);
                this._headerRowDefChanged = true;
            };
            /** Adds a footer row definition that was not included as part of the content children. */
            /**
             * Adds a footer row definition that was not included as part of the content children.
             * @param {?} footerRowDef
             * @return {?}
             */
            CdkTable.prototype.addFooterRowDef = /**
             * Adds a footer row definition that was not included as part of the content children.
             * @param {?} footerRowDef
             * @return {?}
             */
            function (footerRowDef) {
                this._customFooterRowDefs.add(footerRowDef);
                this._footerRowDefChanged = true;
            };
            /** Removes a footer row definition that was not included as part of the content children. */
            /**
             * Removes a footer row definition that was not included as part of the content children.
             * @param {?} footerRowDef
             * @return {?}
             */
            CdkTable.prototype.removeFooterRowDef = /**
             * Removes a footer row definition that was not included as part of the content children.
             * @param {?} footerRowDef
             * @return {?}
             */
            function (footerRowDef) {
                this._customFooterRowDefs.delete(footerRowDef);
                this._footerRowDefChanged = true;
            };
            /**
             * Get the list of RenderRow objects to render according to the current list of data and defined
             * row definitions. If the previous list already contained a particular pair, it should be reused
             * so that the differ equates their references.
             * @return {?}
             */
            CdkTable.prototype._getAllRenderRows = /**
             * Get the list of RenderRow objects to render according to the current list of data and defined
             * row definitions. If the previous list already contained a particular pair, it should be reused
             * so that the differ equates their references.
             * @return {?}
             */
            function () {
                var /** @type {?} */ renderRows = [];
                // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the
                // new cache while unused ones can be picked up by garbage collection.
                var /** @type {?} */ prevCachedRenderRows = this._cachedRenderRowsMap;
                this._cachedRenderRowsMap = new Map();
                // For each data object, get the list of rows that should be rendered, represented by the
                // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.
                for (var /** @type {?} */ i = 0; i < this._data.length; i++) {
                    var /** @type {?} */ data = this._data[i];
                    var /** @type {?} */ renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));
                    if (!this._cachedRenderRowsMap.has(data)) {
                        this._cachedRenderRowsMap.set(data, new WeakMap());
                    }
                    for (var /** @type {?} */ j = 0; j < renderRowsForData.length; j++) {
                        var /** @type {?} */ renderRow = renderRowsForData[j];
                        var /** @type {?} */ cache = /** @type {?} */ ((this._cachedRenderRowsMap.get(renderRow.data)));
                        if (cache.has(renderRow.rowDef)) {
                            /** @type {?} */ ((cache.get(renderRow.rowDef))).push(renderRow);
                        }
                        else {
                            cache.set(renderRow.rowDef, [renderRow]);
                        }
                        renderRows.push(renderRow);
                    }
                }
                return renderRows;
            };
            /**
             * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that
             * should be rendered for this data. Reuses the cached RenderRow objects if they match the same
             * `(T, CdkRowDef)` pair.
             * @param {?} data
             * @param {?} dataIndex
             * @param {?=} cache
             * @return {?}
             */
            CdkTable.prototype._getRenderRowsForData = /**
             * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that
             * should be rendered for this data. Reuses the cached RenderRow objects if they match the same
             * `(T, CdkRowDef)` pair.
             * @param {?} data
             * @param {?} dataIndex
             * @param {?=} cache
             * @return {?}
             */
            function (data, dataIndex, cache) {
                var /** @type {?} */ rowDefs = this._getRowDefs(data, dataIndex);
                return rowDefs.map(function (rowDef) {
                    var /** @type {?} */ cachedRenderRows = (cache && cache.has(rowDef)) ? /** @type {?} */ ((cache.get(rowDef))) : [];
                    if (cachedRenderRows.length) {
                        var /** @type {?} */ dataRow = /** @type {?} */ ((cachedRenderRows.shift()));
                        dataRow.dataIndex = dataIndex;
                        return dataRow;
                    }
                    else {
                        return {data: data, rowDef: rowDef, dataIndex: dataIndex};
                    }
                });
            };
            /**
             * Update the map containing the content's column definitions.
             * @return {?}
             */
            CdkTable.prototype._cacheColumnDefs = /**
             * Update the map containing the content's column definitions.
             * @return {?}
             */
            function () {
                var _this = this;
                this._columnDefsByName.clear();
                var /** @type {?} */ columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);
                columnDefs.forEach(function (columnDef) {
                    if (_this._columnDefsByName.has(columnDef.name)) {
                        throw getTableDuplicateColumnNameError(columnDef.name);
                    }
                    _this._columnDefsByName.set(columnDef.name, columnDef);
                });
            };
            /**
             * Update the list of all available row definitions that can be used.
             * @return {?}
             */
            CdkTable.prototype._cacheRowDefs = /**
             * Update the list of all available row definitions that can be used.
             * @return {?}
             */
            function () {
                this._headerRowDefs =
                    mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);
                this._footerRowDefs =
                    mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);
                this._rowDefs =
                    mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);
                // After all row definitions are determined, find the row definition to be considered default.
                var /** @type {?} */ defaultRowDefs = this._rowDefs.filter(function (def) {
                    return !def.when;
                });
                if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {
                    throw getTableMultipleDefaultRowDefsError();
                }
                this._defaultRowDef = defaultRowDefs[0];
            };
            /**
             * Check if the header, data, or footer rows have changed what columns they want to display.
             * If there is a diff, then re-render that section.
             * @return {?}
             */
            CdkTable.prototype._renderUpdatedColumns = /**
             * Check if the header, data, or footer rows have changed what columns they want to display.
             * If there is a diff, then re-render that section.
             * @return {?}
             */
            function () {
                var /** @type {?} */ defColumnsDiffReducer = function (accumulator, def) {
                    return accumulator || !!def.getColumnsDiff();
                };
                if (this._rowDefs.reduce(defColumnsDiffReducer, false)) {
                    this._forceRenderDataRows();
                }
                if (this._headerRowDefs.reduce(defColumnsDiffReducer, false)) {
                    this._forceRenderHeaderRows();
                }
                if (this._footerRowDefs.reduce(defColumnsDiffReducer, false)) {
                    this._forceRenderFooterRows();
                }
            };
            /**
             * Switch to the provided data source by resetting the data and unsubscribing from the current
             * render change subscription if one exists. If the data source is null, interpret this by
             * clearing the row outlet. Otherwise start listening for new data.
             * @param {?} dataSource
             * @return {?}
             */
            CdkTable.prototype._switchDataSource = /**
             * Switch to the provided data source by resetting the data and unsubscribing from the current
             * render change subscription if one exists. If the data source is null, interpret this by
             * clearing the row outlet. Otherwise start listening for new data.
             * @param {?} dataSource
             * @return {?}
             */
            function (dataSource) {
                this._data = [];
                if (this.dataSource instanceof _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__["DataSource"]) {
                    this.dataSource.disconnect(this);
                }
                // Stop listening for data from the previous data source.
                if (this._renderChangeSubscription) {
                    this._renderChangeSubscription.unsubscribe();
                    this._renderChangeSubscription = null;
                }
                if (!dataSource) {
                    if (this._dataDiffer) {
                        this._dataDiffer.diff([]);
                    }
                    this._rowOutlet.viewContainer.clear();
                }
                this._dataSource = dataSource;
            };
            /**
             * Set up a subscription for the data provided by the data source.
             * @return {?}
             */
            CdkTable.prototype._observeRenderChanges = /**
             * Set up a subscription for the data provided by the data source.
             * @return {?}
             */
            function () {
                var _this = this;
                // If no data source has been set, there is nothing to observe for changes.
                if (!this.dataSource) {
                    return;
                }
                var /** @type {?} */ dataStream;
                // Check if the datasource is a DataSource object by observing if it has a connect function.
                // Cannot check this.dataSource['connect'] due to potential property renaming, nor can it
                // checked as an instanceof DataSource<T> since the table should allow for data sources
                // that did not explicitly extend DataSource<T>.
                if ((/** @type {?} */ (this.dataSource)).connect instanceof Function) {
                    dataStream = (/** @type {?} */ (this.dataSource)).connect(this);
                }
                else if (this.dataSource instanceof rxjs__WEBPACK_IMPORTED_MODULE_3__["Observable"]) {
                    dataStream = this.dataSource;
                }
                else if (Array.isArray(this.dataSource)) {
                    dataStream = Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["of"])(this.dataSource);
                }
                if (dataStream === undefined) {
                    throw getTableUnknownDataSourceError();
                }
                this._renderChangeSubscription = dataStream
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(this._onDestroy))
                    .subscribe(function (data) {
                        _this._data = data || [];
                        _this.renderRows();
                    });
            };
            /**
             * Clears any existing content in the header row outlet and creates a new embedded view
             * in the outlet using the header row definition.
             * @return {?}
             */
            CdkTable.prototype._forceRenderHeaderRows = /**
             * Clears any existing content in the header row outlet and creates a new embedded view
             * in the outlet using the header row definition.
             * @return {?}
             */
            function () {
                var _this = this;
                // Clear the footer row outlet if any content exists.
                if (this._headerRowOutlet.viewContainer.length > 0) {
                    this._headerRowOutlet.viewContainer.clear();
                }
                this._headerRowDefs.forEach(function (def, i) {
                    return _this._renderRow(_this._headerRowOutlet, def, i);
                });
            };
            /**
             * Clears any existing content in the footer row outlet and creates a new embedded view
             * in the outlet using the footer row definition.
             * @return {?}
             */
            CdkTable.prototype._forceRenderFooterRows = /**
             * Clears any existing content in the footer row outlet and creates a new embedded view
             * in the outlet using the footer row definition.
             * @return {?}
             */
            function () {
                var _this = this;
                // Clear the footer row outlet if any content exists.
                if (this._footerRowOutlet.viewContainer.length > 0) {
                    this._footerRowOutlet.viewContainer.clear();
                }
                this._footerRowDefs.forEach(function (def, i) {
                    return _this._renderRow(_this._footerRowOutlet, def, i);
                });
            };
            /**
             * Get the matching row definitions that should be used for this row data. If there is only
             * one row definition, it is returned. Otherwise, find the row definitions that has a when
             * predicate that returns true with the data. If none return true, return the default row
             * definition.
             */
            /**
             * Get the matching row definitions that should be used for this row data. If there is only
             * one row definition, it is returned. Otherwise, find the row definitions that has a when
             * predicate that returns true with the data. If none return true, return the default row
             * definition.
             * @param {?} data
             * @param {?} dataIndex
             * @return {?}
             */
            CdkTable.prototype._getRowDefs = /**
             * Get the matching row definitions that should be used for this row data. If there is only
             * one row definition, it is returned. Otherwise, find the row definitions that has a when
             * predicate that returns true with the data. If none return true, return the default row
             * definition.
             * @param {?} data
             * @param {?} dataIndex
             * @return {?}
             */
            function (data, dataIndex) {
                if (this._rowDefs.length == 1) {
                    return [this._rowDefs[0]];
                }
                var /** @type {?} */ rowDefs = [];
                if (this.multiTemplateDataRows) {
                    rowDefs = this._rowDefs.filter(function (def) {
                        return !def.when || def.when(dataIndex, data);
                    });
                }
                else {
                    var /** @type {?} */ rowDef = this._rowDefs.find(function (def) {
                        return def.when && def.when(dataIndex, data);
                    }) || this._defaultRowDef;
                    if (rowDef) {
                        rowDefs.push(rowDef);
                    }
                }
                if (!rowDefs.length) {
                    throw getTableMissingMatchingRowDefError(data);
                }
                return rowDefs;
            };
            /**
             * Create the embedded view for the data row template and place it in the correct index location
             * within the data row view container.
             * @param {?} renderRow
             * @param {?} renderIndex
             * @return {?}
             */
            CdkTable.prototype._insertRow = /**
             * Create the embedded view for the data row template and place it in the correct index location
             * within the data row view container.
             * @param {?} renderRow
             * @param {?} renderIndex
             * @return {?}
             */
            function (renderRow, renderIndex) {
                var /** @type {?} */ rowDef = renderRow.rowDef;
                var /** @type {?} */ context = {$implicit: renderRow.data};
                this._renderRow(this._rowOutlet, rowDef, renderIndex, context);
            };
            /**
             * Creates a new row template in the outlet and fills it with the set of cell templates.
             * Optionally takes a context to provide to the row and cells, as well as an optional index
             * of where to place the new row template in the outlet.
             * @param {?} outlet
             * @param {?} rowDef
             * @param {?} index
             * @param {?=} context
             * @return {?}
             */
            CdkTable.prototype._renderRow = /**
             * Creates a new row template in the outlet and fills it with the set of cell templates.
             * Optionally takes a context to provide to the row and cells, as well as an optional index
             * of where to place the new row template in the outlet.
             * @param {?} outlet
             * @param {?} rowDef
             * @param {?} index
             * @param {?=} context
             * @return {?}
             */
            function (outlet, rowDef, index, context) {
                if (context === void 0) {
                    context = {};
                }
                // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView
                outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);
                for (var _a = 0, _b = this._getCellTemplates(rowDef); _a < _b.length; _a++) {
                    var cellTemplate = _b[_a];
                    if (CdkCellOutlet.mostRecentCellOutlet) {
                        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);
                    }
                }
                this._changeDetectorRef.markForCheck();
            };
            /**
             * Updates the index-related context for each row to reflect any changes in the index of the rows,
             * e.g. first/last/even/odd.
             * @return {?}
             */
            CdkTable.prototype._updateRowIndexContext = /**
             * Updates the index-related context for each row to reflect any changes in the index of the rows,
             * e.g. first/last/even/odd.
             * @return {?}
             */
            function () {
                var /** @type {?} */ viewContainer = this._rowOutlet.viewContainer;
                for (var /** @type {?} */ renderIndex = 0, /** @type {?} */ count = viewContainer.length; renderIndex < count; renderIndex++) {
                    var /** @type {?} */ viewRef = /** @type {?} */ (viewContainer.get(renderIndex));
                    var /** @type {?} */ context = /** @type {?} */ (viewRef.context);
                    context.count = count;
                    context.first = renderIndex === 0;
                    context.last = renderIndex === count - 1;
                    context.even = renderIndex % 2 === 0;
                    context.odd = !context.even;
                    if (this.multiTemplateDataRows) {
                        context.dataIndex = this._renderRows[renderIndex].dataIndex;
                        context.renderIndex = renderIndex;
                    }
                    else {
                        context.index = this._renderRows[renderIndex].dataIndex;
                    }
                }
            };
            /**
             * Gets the column definitions for the provided row def.
             * @param {?} rowDef
             * @return {?}
             */
            CdkTable.prototype._getCellTemplates = /**
             * Gets the column definitions for the provided row def.
             * @param {?} rowDef
             * @return {?}
             */
            function (rowDef) {
                var _this = this;
                if (!rowDef || !rowDef.columns) {
                    return [];
                }
                return Array.from(rowDef.columns, function (columnId) {
                    var /** @type {?} */ column = _this._columnDefsByName.get(columnId);
                    if (!column) {
                        throw getTableUnknownColumnError(columnId);
                    }
                    return rowDef.extractCellTemplate(column);
                });
            };
            /**
             * Adds native table sections (e.g. tbody) and moves the row outlets into them.
             * @return {?}
             */
            CdkTable.prototype._applyNativeTableSections = /**
             * Adds native table sections (e.g. tbody) and moves the row outlets into them.
             * @return {?}
             */
            function () {
                var /** @type {?} */ sections = [
                    {tag: 'thead', outlet: this._headerRowOutlet},
                    {tag: 'tbody', outlet: this._rowOutlet},
                    {tag: 'tfoot', outlet: this._footerRowOutlet},
                ];
                for (var _a = 0, sections_1 = sections; _a < sections_1.length; _a++) {
                    var section = sections_1[_a];
                    var /** @type {?} */ element = document.createElement(section.tag);
                    element.appendChild(section.outlet.elementRef.nativeElement);
                    this._elementRef.nativeElement.appendChild(element);
                }
            };
            /**
             * Forces a re-render of the data rows. Should be called in cases where there has been an input
             * change that affects the evaluation of which rows should be rendered, e.g. toggling
             * `multiTemplateDataRows` or adding/removing row definitions.
             * @return {?}
             */
            CdkTable.prototype._forceRenderDataRows = /**
             * Forces a re-render of the data rows. Should be called in cases where there has been an input
             * change that affects the evaluation of which rows should be rendered, e.g. toggling
             * `multiTemplateDataRows` or adding/removing row definitions.
             * @return {?}
             */
            function () {
                this._dataDiffer.diff([]);
                this._rowOutlet.viewContainer.clear();
                this.renderRows();
            };
            CdkTable.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'cdk-table, table[cdk-table]',
                        exportAs: 'cdkTable',
                        template: CDK_TABLE_TEMPLATE,
                        host: {
                            'class': 'cdk-table',
                        },
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                    },]
                },
            ];
            /** @nocollapse */
            CdkTable.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"], args: ['role',]},]
                    },
                ];
            };
            CdkTable.propDecorators = {
                "trackBy": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "dataSource": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "multiTemplateDataRows": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "_rowOutlet": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"],
                    args: [DataRowOutlet,]
                },],
                "_headerRowOutlet": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"],
                    args: [HeaderRowOutlet,]
                },],
                "_footerRowOutlet": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"],
                    args: [FooterRowOutlet,]
                },],
                "_contentColumnDefs": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
                    args: [CdkColumnDef,]
                },],
                "_contentRowDefs": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
                    args: [CdkRowDef,]
                },],
                "_contentHeaderRowDefs": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
                    args: [CdkHeaderRowDef,]
                },],
                "_contentFooterRowDefs": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
                    args: [CdkFooterRowDef,]
                },],
            };
            return CdkTable;
        }());

        /**
         * Utility function that gets a merged list of the entries in a QueryList and values of a Set.
         * @template T
         * @param {?} queryList
         * @param {?} set
         * @return {?}
         */
        function mergeQueryListAndSet(queryList, set) {
            return queryList.toArray().concat(Array.from(set));
        }

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var /** @type {?} */ EXPORTED_DECLARATIONS = [
            CdkTable,
            CdkRowDef,
            CdkCellDef,
            CdkCellOutlet,
            CdkHeaderCellDef,
            CdkFooterCellDef,
            CdkColumnDef,
            CdkCell,
            CdkRow,
            CdkHeaderCell,
            CdkFooterCell,
            CdkHeaderRow,
            CdkHeaderRowDef,
            CdkFooterRow,
            CdkFooterRowDef,
            DataRowOutlet,
            HeaderRowOutlet,
            FooterRowOutlet,
        ];
        var CdkTableModule = /** @class */ (function () {
            function CdkTableModule() {
            }

            CdkTableModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["CommonModule"]],
                        exports: EXPORTED_DECLARATIONS,
                        declarations: EXPORTED_DECLARATIONS
                    },]
                },
            ];
            return CdkTableModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=table.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/cdk/esm5/tree.es5.js":
    /*!****************************************************!*\
  !*** ./node_modules/@angular/cdk/esm5/tree.es5.js ***!
  \****************************************************/
    /*! exports provided: BaseTreeControl, FlatTreeControl, NestedTreeControl, CdkNestedTreeNode, CdkTreeNodeOutletContext, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNode, CdkTree, getTreeNoValidDataSourceError, getTreeMultipleDefaultNodeDefsError, getTreeMissingMatchingNodeDefError, getTreeControlMissingError, getTreeControlFunctionsMissingError, CdkTreeModule, CdkTreeNodeToggle */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "BaseTreeControl", function () {
            return BaseTreeControl;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "FlatTreeControl", function () {
            return FlatTreeControl;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "NestedTreeControl", function () {
            return NestedTreeControl;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkNestedTreeNode", function () {
            return CdkNestedTreeNode;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkTreeNodeOutletContext", function () {
            return CdkTreeNodeOutletContext;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkTreeNodeDef", function () {
            return CdkTreeNodeDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkTreeNodePadding", function () {
            return CdkTreeNodePadding;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkTreeNodeOutlet", function () {
            return CdkTreeNodeOutlet;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkTreeNode", function () {
            return CdkTreeNode;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkTree", function () {
            return CdkTree;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "getTreeNoValidDataSourceError", function () {
            return getTreeNoValidDataSourceError;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "getTreeMultipleDefaultNodeDefsError", function () {
            return getTreeMultipleDefaultNodeDefsError;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "getTreeMissingMatchingNodeDefError", function () {
            return getTreeMissingMatchingNodeDefError;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "getTreeControlMissingError", function () {
            return getTreeControlMissingError;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "getTreeControlFunctionsMissingError", function () {
            return getTreeControlFunctionsMissingError;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkTreeModule", function () {
            return CdkTreeModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "CdkTreeNodeToggle", function () {
            return CdkTreeNodeToggle;
        });
        /* harmony import */
        var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm5/collections.es5.js");
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Base tree control. It has basic toggle/expand/collapse operations on a single data node.
         * @abstract
         * @template T
         */
        var /**
         * Base tree control. It has basic toggle/expand/collapse operations on a single data node.
         * @abstract
         * @template T
         */
        BaseTreeControl = /** @class */ (function () {
            function BaseTreeControl() {
                /**
                 * A selection model with multi-selection to track expansion status.
                 */
                this.expansionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__["SelectionModel"](true);
            }

            /** Toggles one single data node's expanded/collapsed state. */
            /**
             * Toggles one single data node's expanded/collapsed state.
             * @param {?} dataNode
             * @return {?}
             */
            BaseTreeControl.prototype.toggle = /**
             * Toggles one single data node's expanded/collapsed state.
             * @param {?} dataNode
             * @return {?}
             */
            function (dataNode) {
                this.expansionModel.toggle(dataNode);
            };
            /** Expands one single data node. */
            /**
             * Expands one single data node.
             * @param {?} dataNode
             * @return {?}
             */
            BaseTreeControl.prototype.expand = /**
             * Expands one single data node.
             * @param {?} dataNode
             * @return {?}
             */
            function (dataNode) {
                this.expansionModel.select(dataNode);
            };
            /** Collapses one single data node. */
            /**
             * Collapses one single data node.
             * @param {?} dataNode
             * @return {?}
             */
            BaseTreeControl.prototype.collapse = /**
             * Collapses one single data node.
             * @param {?} dataNode
             * @return {?}
             */
            function (dataNode) {
                this.expansionModel.deselect(dataNode);
            };
            /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */
            /**
             * Whether a given data node is expanded or not. Returns true if the data node is expanded.
             * @param {?} dataNode
             * @return {?}
             */
            BaseTreeControl.prototype.isExpanded = /**
             * Whether a given data node is expanded or not. Returns true if the data node is expanded.
             * @param {?} dataNode
             * @return {?}
             */
            function (dataNode) {
                return this.expansionModel.isSelected(dataNode);
            };
            /** Toggles a subtree rooted at `node` recursively. */
            /**
             * Toggles a subtree rooted at `node` recursively.
             * @param {?} dataNode
             * @return {?}
             */
            BaseTreeControl.prototype.toggleDescendants = /**
             * Toggles a subtree rooted at `node` recursively.
             * @param {?} dataNode
             * @return {?}
             */
            function (dataNode) {
                this.expansionModel.isSelected(dataNode)
                    ? this.collapseDescendants(dataNode)
                    : this.expandDescendants(dataNode);
            };
            /** Collapse all dataNodes in the tree. */
            /**
             * Collapse all dataNodes in the tree.
             * @return {?}
             */
            BaseTreeControl.prototype.collapseAll = /**
             * Collapse all dataNodes in the tree.
             * @return {?}
             */
            function () {
                this.expansionModel.clear();
            };
            /** Expands a subtree rooted at given data node recursively. */
            /**
             * Expands a subtree rooted at given data node recursively.
             * @param {?} dataNode
             * @return {?}
             */
            BaseTreeControl.prototype.expandDescendants = /**
             * Expands a subtree rooted at given data node recursively.
             * @param {?} dataNode
             * @return {?}
             */
            function (dataNode) {
                var /** @type {?} */ toBeProcessed = [dataNode];
                toBeProcessed.push.apply(toBeProcessed, this.getDescendants(dataNode));
                (_a = this.expansionModel).select.apply(_a, toBeProcessed);
                var _a;
            };
            /** Collapses a subtree rooted at given data node recursively. */
            /**
             * Collapses a subtree rooted at given data node recursively.
             * @param {?} dataNode
             * @return {?}
             */
            BaseTreeControl.prototype.collapseDescendants = /**
             * Collapses a subtree rooted at given data node recursively.
             * @param {?} dataNode
             * @return {?}
             */
            function (dataNode) {
                var /** @type {?} */ toBeProcessed = [dataNode];
                toBeProcessed.push.apply(toBeProcessed, this.getDescendants(dataNode));
                (_a = this.expansionModel).deselect.apply(_a, toBeProcessed);
                var _a;
            };
            return BaseTreeControl;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.
         * @template T
         */
        var /**
         * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.
         * @template T
         */
        FlatTreeControl = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(FlatTreeControl, _super);

            /** Construct with flat tree data node functions getLevel and isExpandable. */
            function FlatTreeControl(getLevel, isExpandable) {
                var _this = _super.call(this) || this;
                _this.getLevel = getLevel;
                _this.isExpandable = isExpandable;
                return _this;
            }

            /**
             * Gets a list of the data node's subtree of descendent data nodes.
             *
             * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes
             * with correct levels.
             */
            /**
             * Gets a list of the data node's subtree of descendent data nodes.
             *
             * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes
             * with correct levels.
             * @param {?} dataNode
             * @return {?}
             */
            FlatTreeControl.prototype.getDescendants = /**
             * Gets a list of the data node's subtree of descendent data nodes.
             *
             * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes
             * with correct levels.
             * @param {?} dataNode
             * @return {?}
             */
            function (dataNode) {
                var /** @type {?} */ startIndex = this.dataNodes.indexOf(dataNode);
                var /** @type {?} */ results = [];
                // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.
                // The level of descendants of a tree node must be greater than the level of the given
                // tree node.
                // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.
                // If we reach a node whose level is greater than the level of the tree node, we hit a
                // sibling of an ancestor.
                for (var /** @type {?} */ i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {
                    results.push(this.dataNodes[i]);
                }
                return results;
            };
            /**
             * Expands all data nodes in the tree.
             *
             * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened
             * data nodes of the tree.
             */
            /**
             * Expands all data nodes in the tree.
             *
             * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened
             * data nodes of the tree.
             * @return {?}
             */
            FlatTreeControl.prototype.expandAll = /**
             * Expands all data nodes in the tree.
             *
             * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened
             * data nodes of the tree.
             * @return {?}
             */
            function () {
                (_a = this.expansionModel).select.apply(_a, this.dataNodes);
                var _a;
            };
            return FlatTreeControl;
        }(BaseTreeControl));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.
         * @template T
         */
        var /**
         * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.
         * @template T
         */
        NestedTreeControl = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(NestedTreeControl, _super);

            /** Construct with nested tree function getChildren. */
            function NestedTreeControl(getChildren) {
                var _this = _super.call(this) || this;
                _this.getChildren = getChildren;
                return _this;
            }

            /**
             * Expands all dataNodes in the tree.
             *
             * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level
             * data nodes of the tree.
             */
            /**
             * Expands all dataNodes in the tree.
             *
             * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level
             * data nodes of the tree.
             * @return {?}
             */
            NestedTreeControl.prototype.expandAll = /**
             * Expands all dataNodes in the tree.
             *
             * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level
             * data nodes of the tree.
             * @return {?}
             */
            function () {
                var _this = this;
                this.expansionModel.clear();
                var /** @type {?} */ allNodes = this.dataNodes.reduce(function (accumulator, dataNode) {
                    return accumulator.concat(_this.getDescendants(dataNode), [dataNode]);
                }, []);
                (_a = this.expansionModel).select.apply(_a, allNodes);
                var _a;
            };
            /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */
            /**
             * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.
             * @param {?} dataNode
             * @return {?}
             */
            NestedTreeControl.prototype.getDescendants = /**
             * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.
             * @param {?} dataNode
             * @return {?}
             */
            function (dataNode) {
                var /** @type {?} */ descendants = [];
                this._getDescendants(descendants, dataNode);
                // Remove the node itself
                return descendants.splice(1);
            };
            /** A helper function to get descendants recursively. */
            /**
             * A helper function to get descendants recursively.
             * @param {?} descendants
             * @param {?} dataNode
             * @return {?}
             */
            NestedTreeControl.prototype._getDescendants = /**
             * A helper function to get descendants recursively.
             * @param {?} descendants
             * @param {?} dataNode
             * @return {?}
             */
            function (descendants, dataNode) {
                var _this = this;
                descendants.push(dataNode);
                this.getChildren(dataNode).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["take"])(1)).subscribe(function (children) {
                    if (children && children.length > 0) {
                        children.forEach(function (child) {
                            return _this._getDescendants(descendants, child);
                        });
                    }
                });
            };
            return NestedTreeControl;
        }(BaseTreeControl));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Context provided to the tree node component.
         * @template T
         */
        var /**
         * Context provided to the tree node component.
         * @template T
         */
        CdkTreeNodeOutletContext = /** @class */ (function () {
            function CdkTreeNodeOutletContext(data) {
                this.$implicit = data;
            }

            return CdkTreeNodeOutletContext;
        }());
        /**
         * Data node definition for the CdkTree.
         * Captures the node's template and a when predicate that describes when this node should be used.
         * @template T
         */
        var CdkTreeNodeDef = /** @class */ (function () {
            /** @docs-private */
            function CdkTreeNodeDef(template) {
                this.template = template;
            }

            CdkTreeNodeDef.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                        selector: '[cdkTreeNodeDef]',
                        inputs: [
                            'when: cdkTreeNodeDefWhen'
                        ],
                    },]
                },
            ];
            /** @nocollapse */
            CdkTreeNodeDef.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["TemplateRef"],},
                ];
            };
            return CdkTreeNodeDef;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes
         * inside the outlet.
         */
        var CdkTreeNodeOutlet = /** @class */ (function () {
            function CdkTreeNodeOutlet(viewContainer) {
                this.viewContainer = viewContainer;
            }

            CdkTreeNodeOutlet.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                        selector: '[cdkTreeNodeOutlet]'
                    },]
                },
            ];
            /** @nocollapse */
            CdkTreeNodeOutlet.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewContainerRef"],},
                ];
            };
            return CdkTreeNodeOutlet;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * Returns an error to be thrown when there is no usable data.
         * \@docs-private
         * @return {?}
         */
        function getTreeNoValidDataSourceError() {
            return Error("A valid data source must be provided.");
        }

        /**
         * Returns an error to be thrown when there are multiple nodes that are missing a when function.
         * \@docs-private
         * @return {?}
         */
        function getTreeMultipleDefaultNodeDefsError() {
            return Error("There can only be one default row without a when predicate function.");
        }

        /**
         * Returns an error to be thrown when there are no matching node defs for a particular set of data.
         * \@docs-private
         * @return {?}
         */
        function getTreeMissingMatchingNodeDefError() {
            return Error("Could not find a matching node definition for the provided node data.");
        }

        /**
         * Returns an error to be thrown when there are tree control.
         * \@docs-private
         * @return {?}
         */
        function getTreeControlMissingError() {
            return Error("Could not find a tree control for the tree.");
        }

        /**
         * Returns an error to be thrown when tree control did not implement functions for flat/nested node.
         * \@docs-private
         * @return {?}
         */
        function getTreeControlFunctionsMissingError() {
            return Error("Could not find functions for nested/flat tree in tree control.");
        }

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Tree node for CdkTree. It contains the data in the tree node.
         * @template T
         */
        var CdkTreeNode = /** @class */ (function () {
            function CdkTreeNode(_elementRef, _tree) {
                this._elementRef = _elementRef;
                this._tree = _tree;
                /**
                 * Subject that emits when the component has been destroyed.
                 */
                this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                /**
                 * The role of the node should be 'group' if it's an internal node,
                 * and 'treeitem' if it's a leaf node.
                 */
                this.role = 'treeitem';
                CdkTreeNode.mostRecentTreeNode = /** @type {?} */ (this);
            }

            Object.defineProperty(CdkTreeNode.prototype, "data", {
                /** The tree node's data. */
                get: /**
                 * The tree node's data.
                 * @return {?}
                 */
                function () {
                    return this._data;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._data = value;
                    this._setRoleFromData();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CdkTreeNode.prototype, "isExpanded", {
                get: /**
                 * @return {?}
                 */
                function () {
                    return this._tree.treeControl.isExpanded(this._data);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CdkTreeNode.prototype, "level", {
                get: /**
                 * @return {?}
                 */
                function () {
                    return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            CdkTreeNode.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._destroyed.next();
                this._destroyed.complete();
            };
            /** Focuses the menu item. Implements for FocusableOption. */
            /**
             * Focuses the menu item. Implements for FocusableOption.
             * @return {?}
             */
            CdkTreeNode.prototype.focus = /**
             * Focuses the menu item. Implements for FocusableOption.
             * @return {?}
             */
            function () {
                this._elementRef.nativeElement.focus();
            };
            /**
             * @return {?}
             */
            CdkTreeNode.prototype._setRoleFromData = /**
             * @return {?}
             */
            function () {
                var _this = this;
                if (this._tree.treeControl.isExpandable) {
                    this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';
                }
                else {
                    if (!this._tree.treeControl.getChildren) {
                        throw getTreeControlFunctionsMissingError();
                    }
                    this._tree.treeControl.getChildren(this._data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this._destroyed))
                        .subscribe(function (children) {
                            _this.role = children && children.length ? 'group' : 'treeitem';
                        });
                }
            };
            /**
             * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it
             * in `CdkTree` and set the data to it.
             */
            CdkTreeNode.mostRecentTreeNode = null;
            CdkTreeNode.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                        selector: 'cdk-tree-node',
                        exportAs: 'cdkTreeNode',
                        host: {
                            '[attr.aria-expanded]': 'isExpanded',
                            '[attr.aria-level]': 'role === "treeitem" ? level : null',
                            '[attr.role]': 'role',
                            'class': 'cdk-tree-node',
                        },
                    },]
                },
            ];
            /** @nocollapse */
            CdkTreeNode.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"],},
                    {type: CdkTree,},
                ];
            };
            CdkTreeNode.propDecorators = {
                "role": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]},],
            };
            return CdkTreeNode;
        }());
        /**
         * CDK tree component that connects with a data source to retrieve data of type `T` and renders
         * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.
         * @template T
         */
        var CdkTree = /** @class */ (function () {
            function CdkTree(_differs, _changeDetectorRef) {
                this._differs = _differs;
                this._changeDetectorRef = _changeDetectorRef;
                /**
                 * Subject that emits when the component has been destroyed.
                 */
                this._onDestroy = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                /**
                 * Level of nodes
                 */
                this._levels = new Map();
                /**
                 * Stream containing the latest information on what rows are being displayed on screen.
                 * Can be used by the data source to as a heuristic of what data should be provided.
                 */
                this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_4__["BehaviorSubject"]({
                    start: 0,
                    end: Number.MAX_VALUE
                });
            }

            Object.defineProperty(CdkTree.prototype, "dataSource", {
                get: /**
                 * Provides a stream containing the latest data array to render. Influenced by the tree's
                 * stream of view window (what dataNodes are currently on screen).
                 * Data source can be an observable of data array, or a dara array to render.
                 * @return {?}
                 */
                function () {
                    return this._dataSource;
                },
                set: /**
                 * @param {?} dataSource
                 * @return {?}
                 */
                function (dataSource) {
                    if (this._dataSource !== dataSource) {
                        this._switchDataSource(dataSource);
                    }
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            CdkTree.prototype.ngOnInit = /**
             * @return {?}
             */
            function () {
                this._dataDiffer = this._differs.find([]).create(this.trackBy);
                if (!this.treeControl) {
                    throw getTreeControlMissingError();
                }
            };
            /**
             * @return {?}
             */
            CdkTree.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._nodeOutlet.viewContainer.clear();
                this._onDestroy.next();
                this._onDestroy.complete();
                if (this._dataSource && typeof (/** @type {?} */ (this._dataSource)).disconnect === 'function') {
                    (/** @type {?} */ (this.dataSource)).disconnect(this);
                }
                if (this._dataSubscription) {
                    this._dataSubscription.unsubscribe();
                    this._dataSubscription = null;
                }
            };
            /**
             * @return {?}
             */
            CdkTree.prototype.ngAfterContentChecked = /**
             * @return {?}
             */
            function () {
                var /** @type {?} */ defaultNodeDefs = this._nodeDefs.filter(function (def) {
                    return !def.when;
                });
                if (defaultNodeDefs.length > 1) {
                    throw getTreeMultipleDefaultNodeDefsError();
                }
                this._defaultNodeDef = defaultNodeDefs[0];
                if (this.dataSource && this._nodeDefs && !this._dataSubscription) {
                    this._observeRenderChanges();
                }
            };
            /**
             * Switch to the provided data source by resetting the data and unsubscribing from the current
             * render change subscription if one exists. If the data source is null, interpret this by
             * clearing the node outlet. Otherwise start listening for new data.
             * @param {?} dataSource
             * @return {?}
             */
            CdkTree.prototype._switchDataSource = /**
             * Switch to the provided data source by resetting the data and unsubscribing from the current
             * render change subscription if one exists. If the data source is null, interpret this by
             * clearing the node outlet. Otherwise start listening for new data.
             * @param {?} dataSource
             * @return {?}
             */
            function (dataSource) {
                if (this._dataSource && typeof (/** @type {?} */ (this._dataSource)).disconnect === 'function') {
                    (/** @type {?} */ (this.dataSource)).disconnect(this);
                }
                if (this._dataSubscription) {
                    this._dataSubscription.unsubscribe();
                    this._dataSubscription = null;
                }
                // Remove the all dataNodes if there is now no data source
                if (!dataSource) {
                    this._nodeOutlet.viewContainer.clear();
                }
                this._dataSource = dataSource;
                if (this._nodeDefs) {
                    this._observeRenderChanges();
                }
            };
            /**
             * Set up a subscription for the data provided by the data source.
             * @return {?}
             */
            CdkTree.prototype._observeRenderChanges = /**
             * Set up a subscription for the data provided by the data source.
             * @return {?}
             */
            function () {
                var _this = this;
                var /** @type {?} */ dataStream;
                // Cannot use `instanceof DataSource` since the data source could be a literal with
                // `connect` function and may not extends DataSource.
                if (typeof (/** @type {?} */ (this._dataSource)).connect === 'function') {
                    dataStream = (/** @type {?} */ (this._dataSource)).connect(this);
                }
                else if (this._dataSource instanceof rxjs__WEBPACK_IMPORTED_MODULE_4__["Observable"]) {
                    dataStream = this._dataSource;
                }
                else if (Array.isArray(this._dataSource)) {
                    dataStream = Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])(this._dataSource);
                }
                if (dataStream) {
                    this._dataSubscription = dataStream.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this._onDestroy))
                        .subscribe(function (data) {
                            return _this.renderNodeChanges(data);
                        });
                }
                else {
                    throw getTreeNoValidDataSourceError();
                }
            };
            /** Check for changes made in the data and render each change (node added/removed/moved). */
            /**
             * Check for changes made in the data and render each change (node added/removed/moved).
             * @param {?} data
             * @param {?=} dataDiffer
             * @param {?=} viewContainer
             * @param {?=} parentData
             * @return {?}
             */
            CdkTree.prototype.renderNodeChanges = /**
             * Check for changes made in the data and render each change (node added/removed/moved).
             * @param {?} data
             * @param {?=} dataDiffer
             * @param {?=} viewContainer
             * @param {?=} parentData
             * @return {?}
             */
            function (data, dataDiffer, viewContainer, parentData) {
                var _this = this;
                if (dataDiffer === void 0) {
                    dataDiffer = this._dataDiffer;
                }
                if (viewContainer === void 0) {
                    viewContainer = this._nodeOutlet.viewContainer;
                }
                var /** @type {?} */ changes = dataDiffer.diff(data);
                if (!changes) {
                    return;
                }
                changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
                    if (item.previousIndex == null) {
                        _this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);
                    }
                    else if (currentIndex == null) {
                        viewContainer.remove(adjustedPreviousIndex);
                        _this._levels.delete(item.item);
                    }
                    else {
                        var /** @type {?} */ view = viewContainer.get(adjustedPreviousIndex);
                        viewContainer.move(/** @type {?} */ ((view)), currentIndex);
                    }
                });
                this._changeDetectorRef.detectChanges();
            };
            /**
             * Finds the matching node definition that should be used for this node data. If there is only
             * one node definition, it is returned. Otherwise, find the node definition that has a when
             * predicate that returns true with the data. If none return true, return the default node
             * definition.
             */
            /**
             * Finds the matching node definition that should be used for this node data. If there is only
             * one node definition, it is returned. Otherwise, find the node definition that has a when
             * predicate that returns true with the data. If none return true, return the default node
             * definition.
             * @param {?} data
             * @param {?} i
             * @return {?}
             */
            CdkTree.prototype._getNodeDef = /**
             * Finds the matching node definition that should be used for this node data. If there is only
             * one node definition, it is returned. Otherwise, find the node definition that has a when
             * predicate that returns true with the data. If none return true, return the default node
             * definition.
             * @param {?} data
             * @param {?} i
             * @return {?}
             */
            function (data, i) {
                if (this._nodeDefs.length === 1) {
                    return this._nodeDefs.first;
                }
                var /** @type {?} */ nodeDef = this._nodeDefs.find(function (def) {
                    return def.when && def.when(i, data);
                }) || this._defaultNodeDef;
                if (!nodeDef) {
                    throw getTreeMissingMatchingNodeDefError();
                }
                return nodeDef;
            };
            /**
             * Create the embedded view for the data node template and place it in the correct index location
             * within the data node view container.
             */
            /**
             * Create the embedded view for the data node template and place it in the correct index location
             * within the data node view container.
             * @param {?} nodeData
             * @param {?} index
             * @param {?=} viewContainer
             * @param {?=} parentData
             * @return {?}
             */
            CdkTree.prototype.insertNode = /**
             * Create the embedded view for the data node template and place it in the correct index location
             * within the data node view container.
             * @param {?} nodeData
             * @param {?} index
             * @param {?=} viewContainer
             * @param {?=} parentData
             * @return {?}
             */
            function (nodeData, index, viewContainer, parentData) {
                var /** @type {?} */ node = this._getNodeDef(nodeData, index);
                // Node context that will be provided to created embedded view
                var /** @type {?} */ context = new CdkTreeNodeOutletContext(nodeData);
                // If the tree is flat tree, then use the `getLevel` function in flat tree control
                // Otherwise, use the level of parent node.
                if (this.treeControl.getLevel) {
                    context.level = this.treeControl.getLevel(nodeData);
                }
                else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {
                    context.level = /** @type {?} */ ((this._levels.get(parentData))) + 1;
                }
                else {
                    context.level = 0;
                }
                this._levels.set(nodeData, context.level);
                // Use default tree nodeOutlet, or nested node's nodeOutlet
                var /** @type {?} */ container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;
                container.createEmbeddedView(node.template, context, index);
                // Set the data to just created `CdkTreeNode`.
                // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable
                //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.
                if (CdkTreeNode.mostRecentTreeNode) {
                    CdkTreeNode.mostRecentTreeNode.data = nodeData;
                }
            };
            CdkTree.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                        selector: 'cdk-tree',
                        exportAs: 'cdkTree',
                        template: "<ng-container cdkTreeNodeOutlet></ng-container>",
                        host: {
                            'class': 'cdk-tree',
                            'role': 'tree',
                        },
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush
                    },]
                },
            ];
            /** @nocollapse */
            CdkTree.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"],},
                ];
            };
            CdkTree.propDecorators = {
                "dataSource": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]},],
                "treeControl": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]},],
                "trackBy": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]},],
                "_nodeOutlet": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"],
                    args: [CdkTreeNodeOutlet,]
                },],
                "_nodeDefs": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"],
                    args: [CdkTreeNodeDef,]
                },],
            };
            return CdkTree;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Nested node is a child of `<cdk-tree>`. It works with nested tree.
         * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will
         * be added in the `cdkTreeNodeOutlet` in tree node template.
         * For example:
         *   ```html
         *   <cdk-mested-tree-node>
         *     {{node.name}}
         *     <ng-template cdkTreeNodeOutlet></ng-template>
         *   </cdk-tree-node>
         *   ```
         * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be
         * like this:
         *   ```html
         *   <cdk-nested-tree-node>
         *     {{node.name}}
         *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>
         *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>
         *   </cdk-tree-node>
         *   ```
         * @template T
         */
        var CdkNestedTreeNode = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(CdkNestedTreeNode, _super);

            function CdkNestedTreeNode(_elementRef, _tree, _differs) {
                var _this = _super.call(this, _elementRef, _tree) || this;
                _this._elementRef = _elementRef;
                _this._tree = _tree;
                _this._differs = _differs;
                return _this;
            }

            /**
             * @return {?}
             */
            CdkNestedTreeNode.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                var _this = this;
                this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);
                if (!this._tree.treeControl.getChildren) {
                    throw getTreeControlFunctionsMissingError();
                }
                this._tree.treeControl.getChildren(this.data).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this._destroyed))
                    .subscribe(function (result) {
                        _this._children = result;
                        _this.updateChildrenNodes();
                    });
                this.nodeOutlet.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this._destroyed))
                    .subscribe(function () {
                        return _this.updateChildrenNodes();
                    });
            };
            /**
             * @return {?}
             */
            CdkNestedTreeNode.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._clear();
                _super.prototype.ngOnDestroy.call(this);
            };
            /** Add children dataNodes to the NodeOutlet */
            /**
             * Add children dataNodes to the NodeOutlet
             * @return {?}
             */
            CdkNestedTreeNode.prototype.updateChildrenNodes = /**
             * Add children dataNodes to the NodeOutlet
             * @return {?}
             */
            function () {
                if (this.nodeOutlet.length && this._children) {
                    var /** @type {?} */ viewContainer = this.nodeOutlet.first.viewContainer;
                    this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);
                }
                else {
                    // Reset the data differ if there's no children nodes displayed
                    this._dataDiffer.diff([]);
                }
            };
            /** Clear the children dataNodes. */
            /**
             * Clear the children dataNodes.
             * @return {?}
             */
            CdkNestedTreeNode.prototype._clear = /**
             * Clear the children dataNodes.
             * @return {?}
             */
            function () {
                if (this.nodeOutlet && this.nodeOutlet.first) {
                    this.nodeOutlet.first.viewContainer.clear();
                    this._dataDiffer.diff([]);
                }
            };
            CdkNestedTreeNode.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                        selector: 'cdk-nested-tree-node',
                        exportAs: 'cdkNestedTreeNode',
                        host: {
                            '[attr.aria-expanded]': 'isExpanded',
                            '[attr.role]': 'role',
                            'class': 'cdk-tree-node cdk-nested-tree-node',
                        },
                        providers: [{provide: CdkTreeNode, useExisting: CdkNestedTreeNode}]
                    },]
                },
            ];
            /** @nocollapse */
            CdkNestedTreeNode.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"],},
                    {type: CdkTree,},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["IterableDiffers"],},
                ];
            };
            CdkNestedTreeNode.propDecorators = {
                "nodeOutlet": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"],
                    args: [CdkTreeNodeOutlet,]
                },],
            };
            return CdkNestedTreeNode;
        }(CdkTreeNode));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Indent for the children tree dataNodes.
         * This directive will add left-padding to the node to show hierarchy.
         * @template T
         */
        var CdkTreeNodePadding = /** @class */ (function () {
            function CdkTreeNodePadding(_treeNode, _tree, _renderer, _element, _dir) {
                var _this = this;
                this._treeNode = _treeNode;
                this._tree = _tree;
                this._renderer = _renderer;
                this._element = _element;
                this._dir = _dir;
                /**
                 * Subject that emits when the component has been destroyed.
                 */
                this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                this._indent = 40;
                this._setPadding();
                if (this._dir) {
                    this._dir.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["takeUntil"])(this._destroyed)).subscribe(function () {
                        return _this._setPadding();
                    });
                }
            }

            Object.defineProperty(CdkTreeNodePadding.prototype, "level", {
                get: /**
                 * The level of depth of the tree node. The padding will be `level * indent` pixels.
                 * @return {?}
                 */
                function () {
                    return this._level;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._level = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceNumberProperty"])(value);
                    this._setPadding();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CdkTreeNodePadding.prototype, "indent", {
                get: /**
                 * The indent for each level. Default number 40px from material design menu sub-menu spec.
                 * @return {?}
                 */
                function () {
                    return this._indent;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._indent = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceNumberProperty"])(value);
                    this._setPadding();
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            CdkTreeNodePadding.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._destroyed.next();
                this._destroyed.complete();
            };
            /** The padding indent value for the tree node. Returns a string with px numbers if not null. */
            /**
             * The padding indent value for the tree node. Returns a string with px numbers if not null.
             * @return {?}
             */
            CdkTreeNodePadding.prototype._paddingIndent = /**
             * The padding indent value for the tree node. Returns a string with px numbers if not null.
             * @return {?}
             */
            function () {
                var /** @type {?} */ nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)
                    ? this._tree.treeControl.getLevel(this._treeNode.data)
                    : null;
                var /** @type {?} */ level = this._level || nodeLevel;
                return level ? level * this._indent + "px" : null;
            };
            /**
             * @return {?}
             */
            CdkTreeNodePadding.prototype._setPadding = /**
             * @return {?}
             */
            function () {
                var /** @type {?} */ padding = this._paddingIndent();
                var /** @type {?} */ paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';
                this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);
            };
            CdkTreeNodePadding.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                        selector: '[cdkTreeNodePadding]',
                    },]
                },
            ];
            /** @nocollapse */
            CdkTreeNodePadding.ctorParameters = function () {
                return [
                    {type: CdkTreeNode,},
                    {type: CdkTree,},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Renderer2"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"],},
                    {
                        type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]},]
                    },
                ];
            };
            CdkTreeNodePadding.propDecorators = {
                "level": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['cdkTreeNodePadding',]},],
                "indent": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
                    args: ['cdkTreeNodePaddingIndent',]
                },],
            };
            return CdkTreeNodePadding;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Node toggle to expand/collapse the node.
         * @template T
         */
        var CdkTreeNodeToggle = /** @class */ (function () {
            function CdkTreeNodeToggle(_tree, _treeNode) {
                this._tree = _tree;
                this._treeNode = _treeNode;
                this._recursive = false;
            }

            Object.defineProperty(CdkTreeNodeToggle.prototype, "recursive", {
                get: /**
                 * Whether expand/collapse the node recursively.
                 * @return {?}
                 */
                function () {
                    return this._recursive;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._recursive = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @param {?} event
             * @return {?}
             */
            CdkTreeNodeToggle.prototype._toggle = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this.recursive
                    ? this._tree.treeControl.toggleDescendants(this._treeNode.data)
                    : this._tree.treeControl.toggle(this._treeNode.data);
                event.stopPropagation();
            };
            CdkTreeNodeToggle.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                        selector: '[cdkTreeNodeToggle]',
                        host: {
                            '(click)': '_toggle($event)',
                        }
                    },]
                },
            ];
            /** @nocollapse */
            CdkTreeNodeToggle.ctorParameters = function () {
                return [
                    {type: CdkTree,},
                    {type: CdkTreeNode,},
                ];
            };
            CdkTreeNodeToggle.propDecorators = {
                "recursive": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
                    args: ['cdkTreeNodeToggleRecursive',]
                },],
            };
            return CdkTreeNodeToggle;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var /** @type {?} */ EXPORTED_DECLARATIONS = [
            CdkNestedTreeNode,
            CdkTreeNodeDef,
            CdkTreeNodePadding,
            CdkTreeNodeToggle,
            CdkTree,
            CdkTreeNode,
            CdkTreeNodeOutlet,
        ];
        var CdkTreeModule = /** @class */ (function () {
            function CdkTreeModule() {
            }

            CdkTreeModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_8__["CommonModule"]],
                        exports: EXPORTED_DECLARATIONS,
                        declarations: EXPORTED_DECLARATIONS,
                        providers: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_7__["FocusMonitor"], CdkTreeNodeDef]
                    },]
                },
            ];
            return CdkTreeModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=tree.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/card/typings/index.ngfactory.js":
    /*!************************************************************************!*\
  !*** ./node_modules/@angular/material/card/typings/index.ngfactory.js ***!
  \************************************************************************/
    /*! exports provided: MatCardModuleNgFactory, RenderType_MatCard, View_MatCard_0, View_MatCard_Host_0, MatCardNgFactory, RenderType_MatCardHeader, View_MatCardHeader_0, View_MatCardHeader_Host_0, MatCardHeaderNgFactory, RenderType_MatCardTitleGroup, View_MatCardTitleGroup_0, View_MatCardTitleGroup_Host_0, MatCardTitleGroupNgFactory */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardModuleNgFactory", function () {
            return MatCardModuleNgFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_MatCard", function () {
            return RenderType_MatCard;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatCard_0", function () {
            return View_MatCard_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatCard_Host_0", function () {
            return View_MatCard_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardNgFactory", function () {
            return MatCardNgFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_MatCardHeader", function () {
            return RenderType_MatCardHeader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatCardHeader_0", function () {
            return View_MatCardHeader_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatCardHeader_Host_0", function () {
            return View_MatCardHeader_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardHeaderNgFactory", function () {
            return MatCardHeaderNgFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_MatCardTitleGroup", function () {
            return RenderType_MatCardTitleGroup;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatCardTitleGroup_0", function () {
            return View_MatCardTitleGroup_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatCardTitleGroup_Host_0", function () {
            return View_MatCardTitleGroup_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardTitleGroupNgFactory", function () {
            return MatCardTitleGroupNgFactory;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_material_card__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material/card */ "./node_modules/@angular/material/esm5/card.es5.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */




        var MatCardModuleNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcmf"](_angular_material_card__WEBPACK_IMPORTED_MODULE_1__["MatCardModule"], [], function (_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmod"]([_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](512, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵCodegenComponentFactoryResolver"], [[8, []], [3, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleRef"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"], [[2, _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MATERIAL_SANITY_CHECKS"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_card__WEBPACK_IMPORTED_MODULE_1__["MatCardModule"], _angular_material_card__WEBPACK_IMPORTED_MODULE_1__["MatCardModule"], [])]);
        });

        var styles_MatCard = [".mat-card{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:block;position:relative;padding:24px;border-radius:2px}.mat-card:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-card .mat-divider{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider{left:auto;right:0}.mat-card .mat-divider.mat-divider-inset{position:static;margin:0}.mat-card.mat-card-flat{box-shadow:none}@media screen and (-ms-high-contrast:active){.mat-card{outline:solid 1px}}.mat-card-actions,.mat-card-content,.mat-card-subtitle,.mat-card-title{display:block;margin-bottom:16px}.mat-card-actions{margin-left:-16px;margin-right:-16px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 48px);margin:0 -24px 16px -24px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-footer{display:block;margin:0 -24px -24px -24px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button{margin:0 4px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header-text{margin:0 8px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0}.mat-card-lg-image,.mat-card-md-image,.mat-card-sm-image{margin:-8px 0}.mat-card-title-group{display:flex;justify-content:space-between;margin:0 -8px}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}@media (max-width:599px){.mat-card{padding:24px 16px}.mat-card-actions{margin-left:-8px;margin-right:-8px}.mat-card-image{width:calc(100% + 32px);margin:16px -16px}.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}.mat-card-header{margin:-8px 0 0 0}.mat-card-footer{margin-left:-16px;margin-right:-16px}}.mat-card-content>:first-child,.mat-card>:first-child{margin-top:0}.mat-card-content>:last-child:not(.mat-card-footer),.mat-card>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-24px}.mat-card>.mat-card-actions:last-child{margin-bottom:-16px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child{margin-left:0;margin-right:0}.mat-card-subtitle:not(:first-child),.mat-card-title:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}"];
        var RenderType_MatCard = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcrt"]({
            encapsulation: 2,
            styles: styles_MatCard,
            data: {}
        });

        function View_MatCard_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](2, [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 0), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 1)], null, null);
        }

        function View_MatCard_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 1, "mat-card", [["class", "mat-card"]], null, null, null, View_MatCard_0, RenderType_MatCard)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 49152, null, 0, _angular_material_card__WEBPACK_IMPORTED_MODULE_1__["MatCard"], [], null, null)], null, null);
        }

        var MatCardNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵccf"]("mat-card", _angular_material_card__WEBPACK_IMPORTED_MODULE_1__["MatCard"], View_MatCard_Host_0, {}, {}, ["*", "mat-card-footer"]);

        var styles_MatCardHeader = [];
        var RenderType_MatCardHeader = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcrt"]({
            encapsulation: 2,
            styles: styles_MatCardHeader,
            data: {}
        });

        function View_MatCardHeader_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](2, [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 0), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](1, 0, null, null, 1, "div", [["class", "mat-card-header-text"]], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 1), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 2)], null, null);
        }

        function View_MatCardHeader_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 1, "mat-card-header", [["class", "mat-card-header"]], null, null, null, View_MatCardHeader_0, RenderType_MatCardHeader)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 49152, null, 0, _angular_material_card__WEBPACK_IMPORTED_MODULE_1__["MatCardHeader"], [], null, null)], null, null);
        }

        var MatCardHeaderNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵccf"]("mat-card-header", _angular_material_card__WEBPACK_IMPORTED_MODULE_1__["MatCardHeader"], View_MatCardHeader_Host_0, {}, {}, ["[mat-card-avatar], [matCardAvatar]", "mat-card-title, mat-card-subtitle,\n      [mat-card-title], [mat-card-subtitle],\n      [matCardTitle], [matCardSubtitle]", "*"]);

        var styles_MatCardTitleGroup = [];
        var RenderType_MatCardTitleGroup = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcrt"]({
            encapsulation: 2,
            styles: styles_MatCardTitleGroup,
            data: {}
        });

        function View_MatCardTitleGroup_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](2, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 1, "div", [], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 0), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 1), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 2)], null, null);
        }

        function View_MatCardTitleGroup_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 1, "mat-card-title-group", [["class", "mat-card-title-group"]], null, null, null, View_MatCardTitleGroup_0, RenderType_MatCardTitleGroup)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 49152, null, 0, _angular_material_card__WEBPACK_IMPORTED_MODULE_1__["MatCardTitleGroup"], [], null, null)], null, null);
        }

        var MatCardTitleGroupNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵccf"]("mat-card-title-group", _angular_material_card__WEBPACK_IMPORTED_MODULE_1__["MatCardTitleGroup"], View_MatCardTitleGroup_Host_0, {}, {}, ["mat-card-title, mat-card-subtitle,\n      [mat-card-title], [mat-card-subtitle],\n      [matCardTitle], [matCardSubtitle]", "img", "*"]);


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/autocomplete.es5.js":
    /*!*****************************************************************!*\
  !*** ./node_modules/@angular/material/esm5/autocomplete.es5.js ***!
  \*****************************************************************/
    /*! exports provided: MatAutocompleteSelectedEvent, MatAutocompleteBase, _MatAutocompleteMixinBase, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocomplete, MatAutocompleteModule, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, getMatAutocompleteMissingPanelError, MatAutocompleteTrigger, ɵa28 */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatAutocompleteSelectedEvent", function () {
            return MatAutocompleteSelectedEvent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatAutocompleteBase", function () {
            return MatAutocompleteBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MatAutocompleteMixinBase", function () {
            return _MatAutocompleteMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_DEFAULT_OPTIONS", function () {
            return MAT_AUTOCOMPLETE_DEFAULT_OPTIONS;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY", function () {
            return MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatAutocomplete", function () {
            return MatAutocomplete;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatAutocompleteModule", function () {
            return MatAutocompleteModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AUTOCOMPLETE_OPTION_HEIGHT", function () {
            return AUTOCOMPLETE_OPTION_HEIGHT;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AUTOCOMPLETE_PANEL_HEIGHT", function () {
            return AUTOCOMPLETE_PANEL_HEIGHT;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_SCROLL_STRATEGY", function () {
            return MAT_AUTOCOMPLETE_SCROLL_STRATEGY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY", function () {
            return MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER", function () {
            return MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_VALUE_ACCESSOR", function () {
            return MAT_AUTOCOMPLETE_VALUE_ACCESSOR;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "getMatAutocompleteMissingPanelError", function () {
            return getMatAutocompleteMissingPanelError;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatAutocompleteTrigger", function () {
            return MatAutocompleteTrigger;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵa28", function () {
            return MatAutocompleteOrigin;
        });
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm5/keycodes.es5.js");
        /* harmony import */
        var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
        /* harmony import */
        var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm5/portal.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /* harmony import */
        var _angular_forms__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
        /* harmony import */
        var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/form-field */ "./node_modules/@angular/material/esm5/form-field.es5.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Autocomplete IDs need to be unique across components, so this counter exists outside of
         * the component definition.
         */
        var /** @type {?} */ _uniqueAutocompleteIdCounter = 0;
        /**
         * Event object that is emitted when an autocomplete option is selected.
         */
        var /**
         * Event object that is emitted when an autocomplete option is selected.
         */
        MatAutocompleteSelectedEvent = /** @class */ (function () {
            function MatAutocompleteSelectedEvent(source, option) {
                this.source = source;
                this.option = option;
            }

            return MatAutocompleteSelectedEvent;
        }());
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatAutocompleteBase = /** @class */ (function () {
            function MatAutocompleteBase() {
            }

            return MatAutocompleteBase;
        }());
        var /** @type {?} */ _MatAutocompleteMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["mixinDisableRipple"])(MatAutocompleteBase);
        /**
         * Injection token to be used to override the default options for `mat-autocomplete`.
         */
        var /** @type {?} */ MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mat-autocomplete-default-options', {
            providedIn: 'root',
            factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,
        });

        /**
         * \@docs-private
         * @return {?}
         */
        function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {
            return {autoActiveFirstOption: false};
        }

        var MatAutocomplete = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatAutocomplete, _super);

            function MatAutocomplete(_changeDetectorRef, _elementRef, defaults) {
                var _this = _super.call(this) || this;
                _this._changeDetectorRef = _changeDetectorRef;
                _this._elementRef = _elementRef;
                /**
                 * Whether the autocomplete panel should be visible, depending on option length.
                 */
                _this.showPanel = false;
                _this._isOpen = false;
                /**
                 * Function that maps an option's control value to its display value in the trigger.
                 */
                _this.displayWith = null;
                /**
                 * Event that is emitted whenever an option from the list is selected.
                 */
                _this.optionSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                /**
                 * Event that is emitted when the autocomplete panel is opened.
                 */
                _this.opened = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                /**
                 * Event that is emitted when the autocomplete panel is closed.
                 */
                _this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                _this._classList = {};
                /**
                 * Unique ID to be used by autocomplete trigger's "aria-owns" property.
                 */
                _this.id = "mat-autocomplete-" + _uniqueAutocompleteIdCounter++;
                _this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;
                return _this;
            }

            Object.defineProperty(MatAutocomplete.prototype, "isOpen", {
                /** Whether the autocomplete panel is open. */
                get: /**
                 * Whether the autocomplete panel is open.
                 * @return {?}
                 */
                function () {
                    return this._isOpen && this.showPanel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatAutocomplete.prototype, "autoActiveFirstOption", {
                get: /**
                 * Whether the first option should be highlighted when the autocomplete panel is opened.
                 * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.
                 * @return {?}
                 */
                function () {
                    return this._autoActiveFirstOption;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._autoActiveFirstOption = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatAutocomplete.prototype, "classList", {
                set: /**
                 * Takes classes set on the host mat-autocomplete element and applies them to the panel
                 * inside the overlay container to allow for easy styling.
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    var _this = this;
                    if (value && value.length) {
                        value.split(' ').forEach(function (className) {
                            return _this._classList[className.trim()] = true;
                        });
                        this._elementRef.nativeElement.className = '';
                    }
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatAutocomplete.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__["ActiveDescendantKeyManager"](this.options).withWrap();
                // Set the initial visibility state.
                this._setVisibility();
            };
            /**
             * Sets the panel scrollTop. This allows us to manually scroll to display options
             * above or below the fold, as they are not actually being focused when active.
             */
            /**
             * Sets the panel scrollTop. This allows us to manually scroll to display options
             * above or below the fold, as they are not actually being focused when active.
             * @param {?} scrollTop
             * @return {?}
             */
            MatAutocomplete.prototype._setScrollTop = /**
             * Sets the panel scrollTop. This allows us to manually scroll to display options
             * above or below the fold, as they are not actually being focused when active.
             * @param {?} scrollTop
             * @return {?}
             */
            function (scrollTop) {
                if (this.panel) {
                    this.panel.nativeElement.scrollTop = scrollTop;
                }
            };
            /** Returns the panel's scrollTop. */
            /**
             * Returns the panel's scrollTop.
             * @return {?}
             */
            MatAutocomplete.prototype._getScrollTop = /**
             * Returns the panel's scrollTop.
             * @return {?}
             */
            function () {
                return this.panel ? this.panel.nativeElement.scrollTop : 0;
            };
            /** Panel should hide itself when the option list is empty. */
            /**
             * Panel should hide itself when the option list is empty.
             * @return {?}
             */
            MatAutocomplete.prototype._setVisibility = /**
             * Panel should hide itself when the option list is empty.
             * @return {?}
             */
            function () {
                this.showPanel = !!this.options.length;
                this._classList['mat-autocomplete-visible'] = this.showPanel;
                this._classList['mat-autocomplete-hidden'] = !this.showPanel;
                this._changeDetectorRef.markForCheck();
            };
            /** Emits the `select` event. */
            /**
             * Emits the `select` event.
             * @param {?} option
             * @return {?}
             */
            MatAutocomplete.prototype._emitSelectEvent = /**
             * Emits the `select` event.
             * @param {?} option
             * @return {?}
             */
            function (option) {
                var /** @type {?} */ event = new MatAutocompleteSelectedEvent(this, option);
                this.optionSelected.emit(event);
            };
            MatAutocomplete.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'mat-autocomplete',
                        template: "<ng-template><div class=\"mat-autocomplete-panel\" role=\"listbox\" [id]=\"id\" [ngClass]=\"_classList\" #panel><ng-content></ng-content></div></ng-template>",
                        styles: [".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%}.mat-autocomplete-panel:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}@media screen and (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}"],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        exportAs: 'matAutocomplete',
                        inputs: ['disableRipple'],
                        host: {
                            'class': 'mat-autocomplete'
                        },
                        providers: [
                            {
                                provide: _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MAT_OPTION_PARENT_COMPONENT"],
                                useExisting: MatAutocomplete
                            }
                        ]
                    },]
                },
            ];
            /** @nocollapse */
            MatAutocomplete.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                            args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,]
                        },]
                    },
                ];
            };
            MatAutocomplete.propDecorators = {
                "template": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"],
                    args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],]
                },],
                "panel": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: ['panel',]},],
                "options": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
                    args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatOption"], {descendants: true},]
                },],
                "optionGroups": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
                    args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatOptgroup"],]
                },],
                "displayWith": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "autoActiveFirstOption": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "optionSelected": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]},],
                "opened": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]},],
                "closed": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]},],
                "classList": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['class',]},],
            };
            return MatAutocomplete;
        }(_MatAutocompleteMixinBase));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Directive applied to an element to make it usable
         * as a connection point for an autocomplete panel.
         */
        var MatAutocompleteOrigin = /** @class */ (function () {
            function MatAutocompleteOrigin(elementRef) {
                this.elementRef = elementRef;
            }

            MatAutocompleteOrigin.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: '[matAutocompleteOrigin]',
                        exportAs: 'matAutocompleteOrigin',
                    },]
                },
            ];
            /** @nocollapse */
            MatAutocompleteOrigin.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                ];
            };
            return MatAutocompleteOrigin;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * The height of each autocomplete option.
         */
        var /** @type {?} */ AUTOCOMPLETE_OPTION_HEIGHT = 48;
        /**
         * The total height of the autocomplete panel.
         */
        var /** @type {?} */ AUTOCOMPLETE_PANEL_HEIGHT = 256;
        /**
         * Injection token that determines the scroll handling while the autocomplete panel is open.
         */
        var /** @type {?} */ MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mat-autocomplete-scroll-strategy');

        /**
         * \@docs-private
         * @param {?} overlay
         * @return {?}
         */
        function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {
            return function () {
                return overlay.scrollStrategies.reposition();
            };
        }

        /**
         * \@docs-private
         */
        var /** @type {?} */ MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {
            provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,
            deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["Overlay"]],
            useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,
        };
        /**
         * Provider that allows the autocomplete to register as a ControlValueAccessor.
         * \@docs-private
         */
        var /** @type {?} */ MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {
            provide: _angular_forms__WEBPACK_IMPORTED_MODULE_11__["NG_VALUE_ACCESSOR"],
            useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
                return MatAutocompleteTrigger;
            }),
            multi: true
        };

        /**
         * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.
         * @return {?}
         */
        function getMatAutocompleteMissingPanelError() {
            return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +
                'Make sure that the id passed to the `matAutocomplete` is correct and that ' +
                'you\'re attempting to open it after the ngAfterContentInit hook.');
        }

        var MatAutocompleteTrigger = /** @class */ (function () {
            function MatAutocompleteTrigger(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, _scrollStrategy, _dir, _formField, _document, _viewportRuler) {
                var _this = this;
                this._element = _element;
                this._overlay = _overlay;
                this._viewContainerRef = _viewContainerRef;
                this._zone = _zone;
                this._changeDetectorRef = _changeDetectorRef;
                this._scrollStrategy = _scrollStrategy;
                this._dir = _dir;
                this._formField = _formField;
                this._document = _document;
                this._viewportRuler = _viewportRuler;
                this._componentDestroyed = false;
                this._autocompleteDisabled = false;
                /**
                 * Whether or not the label state is being overridden.
                 */
                this._manuallyFloatingLabel = false;
                /**
                 * Subscription to viewport size changes.
                 */
                this._viewportSubscription = rxjs__WEBPACK_IMPORTED_MODULE_13__["Subscription"].EMPTY;
                /**
                 * Stream of keyboard events that can close the panel.
                 */
                this._closeKeyEventStream = new rxjs__WEBPACK_IMPORTED_MODULE_13__["Subject"]();
                /**
                 * `View -> model callback called when value changes`
                 */
                this._onChange = function () {
                };
                /**
                 * `View -> model callback called when autocomplete has been touched`
                 */
                this._onTouched = function () {
                };
                this._overlayAttached = false;
                /**
                 * Stream of autocomplete option selections.
                 */
                this.optionSelections = Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["defer"])(function () {
                    if (_this.autocomplete && _this.autocomplete.options) {
                        return rxjs__WEBPACK_IMPORTED_MODULE_13__["merge"].apply(void 0, _this.autocomplete.options.map(function (option) {
                            return option.onSelectionChange;
                        }));
                    }
                    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.
                    // Return a stream that we'll replace with the real one once everything is in place.
                    return _this._zone.onStable
                        .asObservable()
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["switchMap"])(function () {
                            return _this.optionSelections;
                        }));
                });
            }

            Object.defineProperty(MatAutocompleteTrigger.prototype, "autocompleteDisabled", {
                get: /**
                 * Whether the autocomplete is disabled. When disabled, the element will
                 * act as a regular input and the user won't be able to open the panel.
                 * @return {?}
                 */
                function () {
                    return this._autocompleteDisabled;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._autocompleteDisabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatAutocompleteTrigger.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._viewportSubscription.unsubscribe();
                this._componentDestroyed = true;
                this._destroyPanel();
                this._closeKeyEventStream.complete();
            };
            Object.defineProperty(MatAutocompleteTrigger.prototype, "panelOpen", {
                /** Whether or not the autocomplete panel is open. */
                get: /**
                 * Whether or not the autocomplete panel is open.
                 * @return {?}
                 */
                function () {
                    return this._overlayAttached && this.autocomplete.showPanel;
                },
                enumerable: true,
                configurable: true
            });
            /** Opens the autocomplete suggestion panel. */
            /**
             * Opens the autocomplete suggestion panel.
             * @return {?}
             */
            MatAutocompleteTrigger.prototype.openPanel = /**
             * Opens the autocomplete suggestion panel.
             * @return {?}
             */
            function () {
                this._attachOverlay();
                this._floatLabel();
            };
            /** Closes the autocomplete suggestion panel. */
            /**
             * Closes the autocomplete suggestion panel.
             * @return {?}
             */
            MatAutocompleteTrigger.prototype.closePanel = /**
             * Closes the autocomplete suggestion panel.
             * @return {?}
             */
            function () {
                this._resetLabel();
                if (!this._overlayAttached) {
                    return;
                }
                if (this.panelOpen) {
                    // Only emit if the panel was visible.
                    this.autocomplete.closed.emit();
                }
                this.autocomplete._isOpen = this._overlayAttached = false;
                if (this._overlayRef && this._overlayRef.hasAttached()) {
                    this._overlayRef.detach();
                    this._closingActionsSubscription.unsubscribe();
                }
                // Note that in some cases this can end up being called after the component is destroyed.
                // Add a check to ensure that we don't try to run change detection on a destroyed view.
                if (!this._componentDestroyed) {
                    // We need to trigger change detection manually, because
                    // `fromEvent` doesn't seem to do it at the proper time.
                    // This ensures that the label is reset when the
                    // user clicks outside.
                    this._changeDetectorRef.detectChanges();
                }
            };
            Object.defineProperty(MatAutocompleteTrigger.prototype, "panelClosingActions", {
                /**
                 * A stream of actions that should close the autocomplete panel, including
                 * when an option is selected, on blur, and when TAB is pressed.
                 */
                get: /**
                 * A stream of actions that should close the autocomplete panel, including
                 * when an option is selected, on blur, and when TAB is pressed.
                 * @return {?}
                 */
                function () {
                    var _this = this;
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["merge"])(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(function () {
                        return _this._overlayAttached;
                    })), this._closeKeyEventStream, this._outsideClickStream, this._overlayRef ?
                        this._overlayRef.detachments().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(function () {
                            return _this._overlayAttached;
                        })) :
                        Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["of"])()).pipe(
                        // Normalize the output so we return a consistent type.
                        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["map"])(function (event) {
                            return event instanceof _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatOptionSelectionChange"] ? event : null;
                        }));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatAutocompleteTrigger.prototype, "activeOption", {
                /** The currently active option, coerced to MatOption type. */
                get: /**
                 * The currently active option, coerced to MatOption type.
                 * @return {?}
                 */
                function () {
                    if (this.autocomplete && this.autocomplete._keyManager) {
                        return this.autocomplete._keyManager.activeItem;
                    }
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatAutocompleteTrigger.prototype, "_outsideClickStream", {
                get: /**
                 * Stream of clicks outside of the autocomplete panel.
                 * @return {?}
                 */
                function () {
                    var _this = this;
                    if (!this._document) {
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["of"])(null);
                    }
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["merge"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["fromEvent"])(this._document, 'click'), Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["fromEvent"])(this._document, 'touchend'))
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(function (event) {
                            var /** @type {?} */ clickTarget = /** @type {?} */ (event.target);
                            var /** @type {?} */ formField = _this._formField ?
                                _this._formField._elementRef.nativeElement : null;
                            return _this._overlayAttached &&
                                clickTarget !== _this._element.nativeElement &&
                                (!formField || !formField.contains(clickTarget)) &&
                                (!!_this._overlayRef && !_this._overlayRef.overlayElement.contains(clickTarget));
                        }));
                },
                enumerable: true,
                configurable: true
            });
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} value
             * @return {?}
             */
            MatAutocompleteTrigger.prototype.writeValue = /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                var _this = this;
                Promise.resolve(null).then(function () {
                    return _this._setTriggerValue(value);
                });
            };
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} fn
             * @return {?}
             */
            MatAutocompleteTrigger.prototype.registerOnChange = /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this._onChange = fn;
            };
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} fn
             * @return {?}
             */
            MatAutocompleteTrigger.prototype.registerOnTouched = /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this._onTouched = fn;
            };
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} isDisabled
             * @return {?}
             */
            MatAutocompleteTrigger.prototype.setDisabledState = /**
             * @param {?} isDisabled
             * @return {?}
             */
            function (isDisabled) {
                this._element.nativeElement.disabled = isDisabled;
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._handleKeydown = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                var /** @type {?} */ keyCode = event.keyCode;
                // Prevent the default action on all escape key presses. This is here primarily to bring IE
                // in line with other browsers. By default, pressing escape on IE will cause it to revert
                // the input value to the one that it had on focus, however it won't dispatch any events
                // which means that the model value will be out of sync with the view.
                if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["ESCAPE"]) {
                    event.preventDefault();
                }
                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.
                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction
                if (this.panelOpen && (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["ESCAPE"] || (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["UP_ARROW"] && event.altKey))) {
                    this._resetActiveItem();
                    this._closeKeyEventStream.next();
                    event.stopPropagation();
                }
                else if (this.activeOption && keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["ENTER"] && this.panelOpen) {
                    this.activeOption._selectViaInteraction();
                    this._resetActiveItem();
                    event.preventDefault();
                }
                else {
                    var /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;
                    var /** @type {?} */ isArrowKey = keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["UP_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["DOWN_ARROW"];
                    if (this.panelOpen || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["TAB"]) {
                        this.autocomplete._keyManager.onKeydown(event);
                    }
                    else if (isArrowKey && this._canOpen()) {
                        this.openPanel();
                    }
                    if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {
                        this._scrollToOption();
                    }
                }
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._handleInput = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                var /** @type {?} */ target = /** @type {?} */ (event.target);
                var /** @type {?} */ value = target.value;
                // Based on `NumberValueAccessor` from forms.
                if (target.type === 'number') {
                    value = value == '' ? null : parseFloat(value);
                }
                // If the input has a placeholder, IE will fire the `input` event on page load,
                // focus and blur, in addition to when the user actually changed the value. To
                // filter out all of the extra events, we save the value on focus and between
                // `input` events, and we check whether it changed.
                // See: https://connect.microsoft.com/IE/feedback/details/885747/
                if (this._canOpen() && this._previousValue !== value &&
                    document.activeElement === event.target) {
                    this._previousValue = value;
                    this._onChange(value);
                    this.openPanel();
                }
            };
            /**
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._handleFocus = /**
             * @return {?}
             */
            function () {
                if (this._canOpen()) {
                    this._previousValue = this._element.nativeElement.value;
                    this._attachOverlay();
                    this._floatLabel(true);
                }
            };
            /**
             * In "auto" mode, the label will animate down as soon as focus is lost.
             * This causes the value to jump when selecting an option with the mouse.
             * This method manually floats the label until the panel can be closed.
             * @param {?=} shouldAnimate Whether the label should be animated when it is floated.
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._floatLabel = /**
             * In "auto" mode, the label will animate down as soon as focus is lost.
             * This causes the value to jump when selecting an option with the mouse.
             * This method manually floats the label until the panel can be closed.
             * @param {?=} shouldAnimate Whether the label should be animated when it is floated.
             * @return {?}
             */
            function (shouldAnimate) {
                if (shouldAnimate === void 0) {
                    shouldAnimate = false;
                }
                if (this._formField && this._formField.floatLabel === 'auto') {
                    if (shouldAnimate) {
                        this._formField._animateAndLockLabel();
                    }
                    else {
                        this._formField.floatLabel = 'always';
                    }
                    this._manuallyFloatingLabel = true;
                }
            };
            /**
             * If the label has been manually elevated, return it to its normal state.
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._resetLabel = /**
             * If the label has been manually elevated, return it to its normal state.
             * @return {?}
             */
            function () {
                if (this._manuallyFloatingLabel) {
                    this._formField.floatLabel = 'auto';
                    this._manuallyFloatingLabel = false;
                }
            };
            /**
             * Given that we are not actually focusing active options, we must manually adjust scroll
             * to reveal options below the fold. First, we find the offset of the option from the top
             * of the panel. If that offset is below the fold, the new scrollTop will be the offset -
             * the panel height + the option height, so the active option will be just visible at the
             * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop
             * will become the offset. If that offset is visible within the panel already, the scrollTop is
             * not adjusted.
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._scrollToOption = /**
             * Given that we are not actually focusing active options, we must manually adjust scroll
             * to reveal options below the fold. First, we find the offset of the option from the top
             * of the panel. If that offset is below the fold, the new scrollTop will be the offset -
             * the panel height + the option height, so the active option will be just visible at the
             * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop
             * will become the offset. If that offset is visible within the panel already, the scrollTop is
             * not adjusted.
             * @return {?}
             */
            function () {
                var /** @type {?} */ index = this.autocomplete._keyManager.activeItemIndex || 0;
                var /** @type {?} */ labelCount = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["_countGroupLabelsBeforeOption"])(index, this.autocomplete.options, this.autocomplete.optionGroups);
                var /** @type {?} */ newScrollPosition = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["_getOptionScrollPosition"])(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);
                this.autocomplete._setScrollTop(newScrollPosition);
            };
            /**
             * This method listens to a stream of panel closing actions and resets the
             * stream every time the option list changes.
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._subscribeToClosingActions = /**
             * This method listens to a stream of panel closing actions and resets the
             * stream every time the option list changes.
             * @return {?}
             */
            function () {
                var _this = this;
                var /** @type {?} */ firstStable = this._zone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1));
                var /** @type {?} */ optionChanges = this.autocomplete.options.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["tap"])(function () {
                        return _this._positionStrategy.reapplyLastPosition();
                    }),
                    // Defer emitting to the stream until the next tick, because changing
                    // bindings in here will cause "changed after checked" errors.
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["delay"])(0));
                // When the zone is stable initially, and when the option list changes...
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_13__["merge"])(firstStable, optionChanges)
                    .pipe(
                        // create a new stream of panelClosingActions, replacing any previous streams
                        // that were created, and flatten it so our stream only emits closing events...
                        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["switchMap"])(function () {
                            _this._resetActiveItem();
                            _this.autocomplete._setVisibility();
                            return _this.panelClosingActions;
                        }),
                        // when the first closing event occurs...
                        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1))
                    .subscribe(function (event) {
                        return _this._setValueAndClose(event);
                    });
            };
            /**
             * Destroys the autocomplete suggestion panel.
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._destroyPanel = /**
             * Destroys the autocomplete suggestion panel.
             * @return {?}
             */
            function () {
                if (this._overlayRef) {
                    this.closePanel();
                    this._overlayRef.dispose();
                    this._overlayRef = null;
                }
            };
            /**
             * @param {?} value
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._setTriggerValue = /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                var /** @type {?} */ toDisplay = this.autocomplete && this.autocomplete.displayWith ?
                    this.autocomplete.displayWith(value) :
                    value;
                // Simply falling back to an empty string if the display value is falsy does not work properly.
                // The display value can also be the number zero and shouldn't fall back to an empty string.
                var /** @type {?} */ inputValue = toDisplay != null ? toDisplay : '';
                // If it's used within a `MatFormField`, we should set it through the property so it can go
                // through change detection.
                if (this._formField) {
                    this._formField._control.value = inputValue;
                }
                else {
                    this._element.nativeElement.value = inputValue;
                }
            };
            /**
             * This method closes the panel, and if a value is specified, also sets the associated
             * control to that value. It will also mark the control as dirty if this interaction
             * stemmed from the user.
             * @param {?} event
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._setValueAndClose = /**
             * This method closes the panel, and if a value is specified, also sets the associated
             * control to that value. It will also mark the control as dirty if this interaction
             * stemmed from the user.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event && event.source) {
                    this._clearPreviousSelectedOption(event.source);
                    this._setTriggerValue(event.source.value);
                    this._onChange(event.source.value);
                    this._element.nativeElement.focus();
                    this.autocomplete._emitSelectEvent(event.source);
                }
                this.closePanel();
            };
            /**
             * Clear any previous selected option and emit a selection change event for this option
             * @param {?} skip
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._clearPreviousSelectedOption = /**
             * Clear any previous selected option and emit a selection change event for this option
             * @param {?} skip
             * @return {?}
             */
            function (skip) {
                this.autocomplete.options.forEach(function (option) {
                    if (option != skip && option.selected) {
                        option.deselect();
                    }
                });
            };
            /**
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._attachOverlay = /**
             * @return {?}
             */
            function () {
                var _this = this;
                if (!this.autocomplete) {
                    throw getMatAutocompleteMissingPanelError();
                }
                if (!this._overlayRef) {
                    this._portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_8__["TemplatePortal"](this.autocomplete.template, this._viewContainerRef);
                    this._overlayRef = this._overlay.create(this._getOverlayConfig());
                    if (this._viewportRuler) {
                        this._viewportSubscription = this._viewportRuler.change().subscribe(function () {
                            if (_this.panelOpen && _this._overlayRef) {
                                _this._overlayRef.updateSize({width: _this._getHostWidth()});
                            }
                        });
                    }
                }
                else {
                    // Update the panel width and direction, in case anything has changed.
                    this._overlayRef.updateSize({width: this._getHostWidth()});
                    this._overlayRef.setDirection(this._getDirection());
                }
                if (this._overlayRef && !this._overlayRef.hasAttached()) {
                    this._overlayRef.attach(this._portal);
                    this._closingActionsSubscription = this._subscribeToClosingActions();
                }
                var /** @type {?} */ wasOpen = this.panelOpen;
                this.autocomplete._setVisibility();
                this.autocomplete._isOpen = this._overlayAttached = true;
                // We need to do an extra `panelOpen` check in here, because the
                // autocomplete won't be shown if there are no options.
                if (this.panelOpen && wasOpen !== this.panelOpen) {
                    this.autocomplete.opened.emit();
                }
            };
            /**
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._getOverlayConfig = /**
             * @return {?}
             */
            function () {
                return new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["OverlayConfig"]({
                    positionStrategy: this._getOverlayPosition(),
                    scrollStrategy: this._scrollStrategy(),
                    width: this._getHostWidth(),
                    direction: this._getDirection()
                });
            };
            /**
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._getOverlayPosition = /**
             * @return {?}
             */
            function () {
                this._positionStrategy = this._overlay.position()
                    .flexibleConnectedTo(this._getConnectedElement())
                    .withFlexibleDimensions(false)
                    .withPush(false)
                    .withPositions([
                        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},
                        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}
                    ]);
                return this._positionStrategy;
            };
            /**
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._getDirection = /**
             * @return {?}
             */
            function () {
                return this._dir ? this._dir.value : 'ltr';
            };
            /**
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._getConnectedElement = /**
             * @return {?}
             */
            function () {
                if (this.connectedTo) {
                    return this.connectedTo.elementRef;
                }
                return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;
            };
            /**
             * Returns the width of the input element, so the panel width can match it.
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._getHostWidth = /**
             * Returns the width of the input element, so the panel width can match it.
             * @return {?}
             */
            function () {
                return this._getConnectedElement().nativeElement.getBoundingClientRect().width;
            };
            /**
             * Resets the active item to -1 so arrow events will activate the
             * correct options, or to 0 if the consumer opted into it.
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._resetActiveItem = /**
             * Resets the active item to -1 so arrow events will activate the
             * correct options, or to 0 if the consumer opted into it.
             * @return {?}
             */
            function () {
                this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);
            };
            /**
             * Determines whether the panel can be opened.
             * @return {?}
             */
            MatAutocompleteTrigger.prototype._canOpen = /**
             * Determines whether the panel can be opened.
             * @return {?}
             */
            function () {
                var /** @type {?} */ element = this._element.nativeElement;
                return !element.readOnly && !element.disabled && !this._autocompleteDisabled;
            };
            MatAutocompleteTrigger.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: "input[matAutocomplete], textarea[matAutocomplete]",
                        host: {
                            'autocomplete': 'off',
                            '[attr.role]': 'autocompleteDisabled ? null : "combobox"',
                            '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : "list"',
                            '[attr.aria-activedescendant]': 'activeOption?.id',
                            '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',
                            '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',
                            // Note: we use `focusin`, as opposed to `focus`, in order to open the panel
                            // a little earlier. This avoids issues where IE delays the focusing of the input.
                            '(focusin)': '_handleFocus()',
                            '(blur)': '_onTouched()',
                            '(input)': '_handleInput($event)',
                            '(keydown)': '_handleKeydown($event)',
                        },
                        exportAs: 'matAutocompleteTrigger',
                        providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]
                    },]
                },
            ];
            /** @nocollapse */
            MatAutocompleteTrigger.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                    {type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["Overlay"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],},
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                            args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,]
                        },]
                    },
                    {
                        type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]},]
                    },
                    {
                        type: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_12__["MatFormField"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]}, {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Host"]},]
                    },
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                            args: [_angular_common__WEBPACK_IMPORTED_MODULE_9__["DOCUMENT"],]
                        },]
                    },
                    {type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["ViewportRuler"],},
                ];
            };
            MatAutocompleteTrigger.propDecorators = {
                "autocomplete": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
                    args: ['matAutocomplete',]
                },],
                "connectedTo": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
                    args: ['matAutocompleteConnectedTo',]
                },],
                "autocompleteDisabled": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
                    args: ['matAutocompleteDisabled',]
                },],
            };
            return MatAutocompleteTrigger;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatAutocompleteModule = /** @class */ (function () {
            function MatAutocompleteModule() {
            }

            MatAutocompleteModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                        imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatOptionModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["OverlayModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_9__["CommonModule"]],
                        exports: [
                            MatAutocomplete,
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatOptionModule"],
                            MatAutocompleteTrigger,
                            MatAutocompleteOrigin,
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_2__["MatCommonModule"]
                        ],
                        declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],
                        providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],
                    },]
                },
            ];
            return MatAutocompleteModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=autocomplete.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/badge.es5.js":
    /*!**********************************************************!*\
  !*** ./node_modules/@angular/material/esm5/badge.es5.js ***!
  \**********************************************************/
    /*! exports provided: MatBadgeModule, MatBadge */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatBadgeModule", function () {
            return MatBadgeModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatBadge", function () {
            return MatBadge;
        });
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var /** @type {?} */ nextId = 0;
        /**
         * Directive to display a text badge.
         */
        var MatBadge = /** @class */ (function () {
            function MatBadge(_document, _ngZone, _elementRef, _ariaDescriber) {
                this._document = _document;
                this._ngZone = _ngZone;
                this._elementRef = _elementRef;
                this._ariaDescriber = _ariaDescriber;
                this._color = 'primary';
                this._overlap = true;
                /**
                 * Position the badge should reside.
                 * Accepts any combination of 'above'|'below' and 'before'|'after'
                 */
                this.position = 'above after';
                /**
                 * Size of the badge. Can be 'small', 'medium', or 'large'.
                 */
                this.size = 'medium';
                /**
                 * Unique id for the badge
                 */
                this._id = nextId++;
            }

            Object.defineProperty(MatBadge.prototype, "color", {
                get: /**
                 * The color of the badge. Can be `primary`, `accent`, or `warn`.
                 * @return {?}
                 */
                function () {
                    return this._color;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._setColor(value);
                    this._color = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatBadge.prototype, "overlap", {
                get: /**
                 * Whether the badge should overlap its contents or not
                 * @return {?}
                 */
                function () {
                    return this._overlap;
                },
                set: /**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    this._overlap = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(val);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatBadge.prototype, "content", {
                get: /**
                 * The content for the badge
                 * @return {?}
                 */
                function () {
                    return this._content;
                },
                set: /**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    this._content = val;
                    this._updateTextContent();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatBadge.prototype, "description", {
                get: /**
                 * Message used to describe the decorated element via aria-describedby
                 * @return {?}
                 */
                function () {
                    return this._description;
                },
                set: /**
                 * @param {?} newDescription
                 * @return {?}
                 */
                function (newDescription) {
                    if (newDescription !== this._description) {
                        this._updateHostAriaDescription(newDescription, this._description);
                        this._description = newDescription;
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatBadge.prototype, "hidden", {
                get: /**
                 * Whether the badge is hidden.
                 * @return {?}
                 */
                function () {
                    return this._hidden;
                },
                set: /**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    this._hidden = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__["coerceBooleanProperty"])(val);
                },
                enumerable: true,
                configurable: true
            });
            /** Whether the badge is above the host or not */
            /**
             * Whether the badge is above the host or not
             * @return {?}
             */
            MatBadge.prototype.isAbove = /**
             * Whether the badge is above the host or not
             * @return {?}
             */
            function () {
                return this.position.indexOf('below') === -1;
            };
            /** Whether the badge is after the host or not */
            /**
             * Whether the badge is after the host or not
             * @return {?}
             */
            MatBadge.prototype.isAfter = /**
             * Whether the badge is after the host or not
             * @return {?}
             */
            function () {
                return this.position.indexOf('before') === -1;
            };
            /**
             * @return {?}
             */
            MatBadge.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                if (this.description && this._badgeElement) {
                    this._ariaDescriber.removeDescription(this._badgeElement, this.description);
                }
            };
            /**
             * Injects a span element into the DOM with the content.
             * @return {?}
             */
            MatBadge.prototype._updateTextContent = /**
             * Injects a span element into the DOM with the content.
             * @return {?}
             */
            function () {
                if (!this._badgeElement) {
                    this._badgeElement = this._createBadgeElement();
                }
                else {
                    this._badgeElement.textContent = this.content;
                }
                return this._badgeElement;
            };
            /**
             * Creates the badge element
             * @return {?}
             */
            MatBadge.prototype._createBadgeElement = /**
             * Creates the badge element
             * @return {?}
             */
            function () {
                var /** @type {?} */ badgeElement = this._document.createElement('span');
                var /** @type {?} */ activeClass = 'mat-badge-active';
                badgeElement.setAttribute('id', "mat-badge-content-" + this._id);
                badgeElement.classList.add('mat-badge-content');
                badgeElement.textContent = this.content;
                if (this.description) {
                    badgeElement.setAttribute('aria-label', this.description);
                }
                this._elementRef.nativeElement.appendChild(badgeElement);
                // animate in after insertion
                if (typeof requestAnimationFrame === 'function') {
                    this._ngZone.runOutsideAngular(function () {
                        requestAnimationFrame(function () {
                            badgeElement.classList.add(activeClass);
                        });
                    });
                }
                else {
                    badgeElement.classList.add(activeClass);
                }
                return badgeElement;
            };
            /**
             * Sets the aria-label property on the element
             * @param {?} newDescription
             * @param {?} oldDescription
             * @return {?}
             */
            MatBadge.prototype._updateHostAriaDescription = /**
             * Sets the aria-label property on the element
             * @param {?} newDescription
             * @param {?} oldDescription
             * @return {?}
             */
            function (newDescription, oldDescription) {
                // ensure content available before setting label
                var /** @type {?} */ content = this._updateTextContent();
                if (oldDescription) {
                    this._ariaDescriber.removeDescription(content, oldDescription);
                }
                if (newDescription) {
                    this._ariaDescriber.describe(content, newDescription);
                }
            };
            /**
             * Adds css theme class given the color to the component host
             * @param {?} colorPalette
             * @return {?}
             */
            MatBadge.prototype._setColor = /**
             * Adds css theme class given the color to the component host
             * @param {?} colorPalette
             * @return {?}
             */
            function (colorPalette) {
                if (colorPalette !== this._color) {
                    if (this._color) {
                        this._elementRef.nativeElement.classList.remove("mat-badge-" + this._color);
                    }
                    if (colorPalette) {
                        this._elementRef.nativeElement.classList.add("mat-badge-" + colorPalette);
                    }
                }
            };
            MatBadge.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                        selector: '[matBadge]',
                        host: {
                            'class': 'mat-badge',
                            '[class.mat-badge-overlap]': 'overlap',
                            '[class.mat-badge-above]': 'isAbove()',
                            '[class.mat-badge-below]': '!isAbove()',
                            '[class.mat-badge-before]': '!isAfter()',
                            '[class.mat-badge-after]': 'isAfter()',
                            '[class.mat-badge-small]': 'size === "small"',
                            '[class.mat-badge-medium]': 'size === "medium"',
                            '[class.mat-badge-large]': 'size === "large"',
                            '[class.mat-badge-hidden]': 'hidden',
                        },
                    },]
                },
            ];
            /** @nocollapse */
            MatBadge.ctorParameters = function () {
                return [
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Inject"],
                            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],]
                        },]
                    },
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgZone"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"],},
                    {type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__["AriaDescriber"],},
                ];
            };
            MatBadge.propDecorators = {
                "color": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['matBadgeColor',]},],
                "overlap": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['matBadgeOverlap',]},],
                "position": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['matBadgePosition',]},],
                "content": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['matBadge',]},],
                "description": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
                    args: ['matBadgeDescription',]
                },],
                "size": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['matBadgeSize',]},],
                "hidden": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['matBadgeHidden',]},],
            };
            return MatBadge;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatBadgeModule = /** @class */ (function () {
            function MatBadgeModule() {
            }

            MatBadgeModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                        imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatCommonModule"]],
                        exports: [MatBadge],
                        declarations: [MatBadge],
                    },]
                },
            ];
            return MatBadgeModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=badge.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/bottom-sheet.es5.js":
    /*!*****************************************************************!*\
  !*** ./node_modules/@angular/material/esm5/bottom-sheet.es5.js ***!
  \*****************************************************************/
    /*! exports provided: MatBottomSheetModule, MatBottomSheet, MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig, MatBottomSheetContainer, matBottomSheetAnimations, MatBottomSheetRef */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatBottomSheetModule", function () {
            return MatBottomSheetModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatBottomSheet", function () {
            return MatBottomSheet;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_BOTTOM_SHEET_DATA", function () {
            return MAT_BOTTOM_SHEET_DATA;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatBottomSheetConfig", function () {
            return MatBottomSheetConfig;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatBottomSheetContainer", function () {
            return MatBottomSheetContainer;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "matBottomSheetAnimations", function () {
            return matBottomSheetAnimations;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatBottomSheetRef", function () {
            return MatBottomSheetRef;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm5/keycodes.es5.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /* harmony import */
        var _angular_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm5/animations.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm5/portal.es5.js");
        /* harmony import */
        var _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/layout */ "./node_modules/@angular/cdk/esm5/layout.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Injection token that can be used to access the data that was passed in to a bottom sheet.
         */
        var /** @type {?} */ MAT_BOTTOM_SHEET_DATA = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MatBottomSheetData');
        /**
         * Configuration used when opening a bottom sheet.
         * @template D
         */
        var /**
         * Configuration used when opening a bottom sheet.
         * @template D
         */
        MatBottomSheetConfig = /** @class */ (function () {
            function MatBottomSheetConfig() {
                /**
                 * Data being injected into the child component.
                 */
                this.data = null;
                /**
                 * Whether the bottom sheet has a backdrop.
                 */
                this.hasBackdrop = true;
                /**
                 * Whether the user can use escape or clicking outside to close the bottom sheet.
                 */
                this.disableClose = false;
                /**
                 * Aria label to assign to the bottom sheet element.
                 */
                this.ariaLabel = null;
            }

            return MatBottomSheetConfig;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Reference to a bottom sheet dispatched from the bottom sheet service.
         * @template T, R
         */
        var /**
         * Reference to a bottom sheet dispatched from the bottom sheet service.
         * @template T, R
         */
        MatBottomSheetRef = /** @class */ (function () {
            function MatBottomSheetRef(containerInstance, _overlayRef) {
                var _this = this;
                this._overlayRef = _overlayRef;
                /**
                 * Subject for notifying the user that the bottom sheet has been dismissed.
                 */
                this._afterDismissed = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                /**
                 * Subject for notifying the user that the bottom sheet has opened and appeared.
                 */
                this._afterOpened = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
                this.containerInstance = containerInstance;
                // Emit when opening animation completes
                containerInstance._animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(function (event) {
                    return event.phaseName === 'done' && event.toState === 'visible';
                }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1))
                    .subscribe(function () {
                        _this._afterOpened.next();
                        _this._afterOpened.complete();
                    });
                // Dispose overlay when closing animation is complete
                containerInstance._animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(function (event) {
                    return event.phaseName === 'done' && event.toState === 'hidden';
                }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1))
                    .subscribe(function () {
                        _this._overlayRef.dispose();
                        _this._afterDismissed.next(_this._result);
                        _this._afterDismissed.complete();
                    });
                if (!containerInstance.bottomSheetConfig.disableClose) {
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["merge"])(_overlayRef.backdropClick(), _overlayRef._keydownEvents.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(function (event) {
                        return event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_1__["ESCAPE"];
                    }))).subscribe(function () {
                        return _this.dismiss();
                    });
                }
            }

            /**
             * Dismisses the bottom sheet.
             * @param result Data to be passed back to the bottom sheet opener.
             */
            /**
             * Dismisses the bottom sheet.
             * @param {?=} result Data to be passed back to the bottom sheet opener.
             * @return {?}
             */
            MatBottomSheetRef.prototype.dismiss = /**
             * Dismisses the bottom sheet.
             * @param {?=} result Data to be passed back to the bottom sheet opener.
             * @return {?}
             */
            function (result) {
                var _this = this;
                if (!this._afterDismissed.closed) {
                    // Transition the backdrop in parallel to the bottom sheet.
                    this.containerInstance._animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(function (event) {
                        return event.phaseName === 'start';
                    }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1)).subscribe(function () {
                        return _this._overlayRef.detachBackdrop();
                    });
                    this._result = result;
                    this.containerInstance.exit();
                }
            };
            /** Gets an observable that is notified when the bottom sheet is finished closing. */
            /**
             * Gets an observable that is notified when the bottom sheet is finished closing.
             * @return {?}
             */
            MatBottomSheetRef.prototype.afterDismissed = /**
             * Gets an observable that is notified when the bottom sheet is finished closing.
             * @return {?}
             */
            function () {
                return this._afterDismissed.asObservable();
            };
            /** Gets an observable that is notified when the bottom sheet has opened and appeared. */
            /**
             * Gets an observable that is notified when the bottom sheet has opened and appeared.
             * @return {?}
             */
            MatBottomSheetRef.prototype.afterOpened = /**
             * Gets an observable that is notified when the bottom sheet has opened and appeared.
             * @return {?}
             */
            function () {
                return this._afterOpened.asObservable();
            };
            /**
             * Gets an observable that emits when the overlay's backdrop has been clicked.
             */
            /**
             * Gets an observable that emits when the overlay's backdrop has been clicked.
             * @return {?}
             */
            MatBottomSheetRef.prototype.backdropClick = /**
             * Gets an observable that emits when the overlay's backdrop has been clicked.
             * @return {?}
             */
            function () {
                return this._overlayRef.backdropClick();
            };
            /**
             * Gets an observable that emits when keydown events are targeted on the overlay.
             */
            /**
             * Gets an observable that emits when keydown events are targeted on the overlay.
             * @return {?}
             */
            MatBottomSheetRef.prototype.keydownEvents = /**
             * Gets an observable that emits when keydown events are targeted on the overlay.
             * @return {?}
             */
            function () {
                return this._overlayRef.keydownEvents();
            };
            return MatBottomSheetRef;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Animations used by the Material bottom sheet.
         */
        var /** @type {?} */ matBottomSheetAnimations = {
            /** Animation that shows and hides a bottom sheet. */
            bottomSheetState: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('state', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('void, hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({transform: 'translateY(100%)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({transform: 'translateY(0%)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('visible => void, visible => hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["AnimationDurations"].COMPLEX + " " + _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["AnimationCurves"].ACCELERATION_CURVE)),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('void => visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["AnimationDurations"].EXITING + " " + _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["AnimationCurves"].DECELERATION_CURVE)),
            ])
        };

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Internal component that wraps user-provided bottom sheet content.
         * \@docs-private
         */
        var MatBottomSheetContainer = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_6__["__extends"])(MatBottomSheetContainer, _super);

            function MatBottomSheetContainer(_elementRef, _changeDetectorRef, _focusTrapFactory, breakpointObserver, document, bottomSheetConfig) {
                var _this = _super.call(this) || this;
                _this._elementRef = _elementRef;
                _this._changeDetectorRef = _changeDetectorRef;
                _this._focusTrapFactory = _focusTrapFactory;
                _this.bottomSheetConfig = bottomSheetConfig;
                /**
                 * The state of the bottom sheet animations.
                 */
                _this._animationState = 'void';
                /**
                 * Emits whenever the state of the animation changes.
                 */
                _this._animationStateChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Element that was focused before the bottom sheet was opened.
                 */
                _this._elementFocusedBeforeOpened = null;
                _this._document = document;
                _this._breakpointSubscription = breakpointObserver
                    .observe([_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_8__["Breakpoints"].Medium, _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_8__["Breakpoints"].Large, _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_8__["Breakpoints"].XLarge])
                    .subscribe(function () {
                        _this._toggleClass('mat-bottom-sheet-container-medium', breakpointObserver.isMatched(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_8__["Breakpoints"].Medium));
                        _this._toggleClass('mat-bottom-sheet-container-large', breakpointObserver.isMatched(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_8__["Breakpoints"].Large));
                        _this._toggleClass('mat-bottom-sheet-container-xlarge', breakpointObserver.isMatched(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_8__["Breakpoints"].XLarge));
                    });
                return _this;
            }

            /** Attach a component portal as content to this bottom sheet container. */
            /**
             * Attach a component portal as content to this bottom sheet container.
             * @template T
             * @param {?} portal
             * @return {?}
             */
            MatBottomSheetContainer.prototype.attachComponentPortal = /**
             * Attach a component portal as content to this bottom sheet container.
             * @template T
             * @param {?} portal
             * @return {?}
             */
            function (portal) {
                this._validatePortalAttached();
                this._setPanelClass();
                this._savePreviouslyFocusedElement();
                return this._portalOutlet.attachComponentPortal(portal);
            };
            /** Attach a template portal as content to this bottom sheet container. */
            /**
             * Attach a template portal as content to this bottom sheet container.
             * @template C
             * @param {?} portal
             * @return {?}
             */
            MatBottomSheetContainer.prototype.attachTemplatePortal = /**
             * Attach a template portal as content to this bottom sheet container.
             * @template C
             * @param {?} portal
             * @return {?}
             */
            function (portal) {
                this._validatePortalAttached();
                this._setPanelClass();
                this._savePreviouslyFocusedElement();
                return this._portalOutlet.attachTemplatePortal(portal);
            };
            /** Begin animation of bottom sheet entrance into view. */
            /**
             * Begin animation of bottom sheet entrance into view.
             * @return {?}
             */
            MatBottomSheetContainer.prototype.enter = /**
             * Begin animation of bottom sheet entrance into view.
             * @return {?}
             */
            function () {
                if (!this._destroyed) {
                    this._animationState = 'visible';
                    this._changeDetectorRef.detectChanges();
                }
            };
            /** Begin animation of the bottom sheet exiting from view. */
            /**
             * Begin animation of the bottom sheet exiting from view.
             * @return {?}
             */
            MatBottomSheetContainer.prototype.exit = /**
             * Begin animation of the bottom sheet exiting from view.
             * @return {?}
             */
            function () {
                if (!this._destroyed) {
                    this._animationState = 'hidden';
                    this._changeDetectorRef.markForCheck();
                }
            };
            /**
             * @return {?}
             */
            MatBottomSheetContainer.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._breakpointSubscription.unsubscribe();
                this._destroyed = true;
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatBottomSheetContainer.prototype._onAnimationDone = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event.toState === 'visible') {
                    this._trapFocus();
                }
                else if (event.toState === 'hidden') {
                    this._restoreFocus();
                }
                this._animationStateChanged.emit(event);
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatBottomSheetContainer.prototype._onAnimationStart = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this._animationStateChanged.emit(event);
            };
            /**
             * @param {?} cssClass
             * @param {?} add
             * @return {?}
             */
            MatBottomSheetContainer.prototype._toggleClass = /**
             * @param {?} cssClass
             * @param {?} add
             * @return {?}
             */
            function (cssClass, add) {
                var /** @type {?} */ classList = this._elementRef.nativeElement.classList;
                add ? classList.add(cssClass) : classList.remove(cssClass);
            };
            /**
             * @return {?}
             */
            MatBottomSheetContainer.prototype._validatePortalAttached = /**
             * @return {?}
             */
            function () {
                if (this._portalOutlet.hasAttached()) {
                    throw Error('Attempting to attach bottom sheet content after content is already attached');
                }
            };
            /**
             * @return {?}
             */
            MatBottomSheetContainer.prototype._setPanelClass = /**
             * @return {?}
             */
            function () {
                var /** @type {?} */ element = this._elementRef.nativeElement;
                var /** @type {?} */ panelClass = this.bottomSheetConfig.panelClass;
                if (Array.isArray(panelClass)) {
                    // Note that we can't use a spread here, because IE doesn't support multiple arguments.
                    panelClass.forEach(function (cssClass) {
                        return element.classList.add(cssClass);
                    });
                }
                else if (panelClass) {
                    element.classList.add(panelClass);
                }
            };
            /**
             * Moves the focus inside the focus trap.
             * @return {?}
             */
            MatBottomSheetContainer.prototype._trapFocus = /**
             * Moves the focus inside the focus trap.
             * @return {?}
             */
            function () {
                if (!this._focusTrap) {
                    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);
                }
                this._focusTrap.focusInitialElementWhenReady();
            };
            /**
             * Restores focus to the element that was focused before the bottom sheet opened.
             * @return {?}
             */
            MatBottomSheetContainer.prototype._restoreFocus = /**
             * Restores focus to the element that was focused before the bottom sheet opened.
             * @return {?}
             */
            function () {
                var /** @type {?} */ toFocus = this._elementFocusedBeforeOpened;
                // We need the extra check, because IE can set the `activeElement` to null in some cases.
                if (toFocus && typeof toFocus.focus === 'function') {
                    toFocus.focus();
                }
                if (this._focusTrap) {
                    this._focusTrap.destroy();
                }
            };
            /**
             * Saves a reference to the element that was focused before the bottom sheet was opened.
             * @return {?}
             */
            MatBottomSheetContainer.prototype._savePreviouslyFocusedElement = /**
             * Saves a reference to the element that was focused before the bottom sheet was opened.
             * @return {?}
             */
            function () {
                var _this = this;
                this._elementFocusedBeforeOpened = /** @type {?} */ (this._document.activeElement);
                // The `focus` method isn't available during server-side rendering.
                if (this._elementRef.nativeElement.focus) {
                    Promise.resolve().then(function () {
                        return _this._elementRef.nativeElement.focus();
                    });
                }
            };
            MatBottomSheetContainer.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-bottom-sheet-container',
                        template: "<ng-template cdkPortalOutlet></ng-template>",
                        styles: [".mat-bottom-sheet-container{box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12);padding:8px 16px;min-width:100vw;box-sizing:border-box;display:block;outline:0;max-height:80vh;overflow:auto}@media screen and (-ms-high-contrast:active){.mat-bottom-sheet-container{outline:1px solid}}.mat-bottom-sheet-container-medium{min-width:384px;max-width:calc(100vw - 128px)}.mat-bottom-sheet-container-large{min-width:512px;max-width:calc(100vw - 256px)}.mat-bottom-sheet-container-xlarge{min-width:576px;max-width:calc(100vw - 384px)}"],
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        animations: [matBottomSheetAnimations.bottomSheetState],
                        host: {
                            'class': 'mat-bottom-sheet-container',
                            'tabindex': '-1',
                            'role': 'dialog',
                            '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',
                            '[@state]': '_animationState',
                            '(@state.start)': '_onAnimationStart($event)',
                            '(@state.done)': '_onAnimationDone($event)'
                        },
                    },]
                },
            ];
            /** @nocollapse */
            MatBottomSheetContainer.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"],},
                    {type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__["FocusTrapFactory"],},
                    {type: _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_8__["BreakpointObserver"],},
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [_angular_common__WEBPACK_IMPORTED_MODULE_9__["DOCUMENT"],]
                        },]
                    },
                    {type: MatBottomSheetConfig,},
                ];
            };
            MatBottomSheetContainer.propDecorators = {
                "_portalOutlet": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
                    args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__["CdkPortalOutlet"],]
                },],
            };
            return MatBottomSheetContainer;
        }(_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__["BasePortalOutlet"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Service to trigger Material Design bottom sheets.
         */
        var MatBottomSheet = /** @class */ (function () {
            function MatBottomSheet(_overlay, _injector, _parentBottomSheet) {
                this._overlay = _overlay;
                this._injector = _injector;
                this._parentBottomSheet = _parentBottomSheet;
                this._bottomSheetRefAtThisLevel = null;
            }

            Object.defineProperty(MatBottomSheet.prototype, "_openedBottomSheetRef", {
                /** Reference to the currently opened bottom sheet. */
                get: /**
                 * Reference to the currently opened bottom sheet.
                 * @return {?}
                 */
                function () {
                    var /** @type {?} */ parent = this._parentBottomSheet;
                    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (this._parentBottomSheet) {
                        this._parentBottomSheet._openedBottomSheetRef = value;
                    }
                    else {
                        this._bottomSheetRefAtThisLevel = value;
                    }
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @template T, D, R
             * @param {?} componentOrTemplateRef
             * @param {?=} config
             * @return {?}
             */
            MatBottomSheet.prototype.open = /**
             * @template T, D, R
             * @param {?} componentOrTemplateRef
             * @param {?=} config
             * @return {?}
             */
            function (componentOrTemplateRef, config) {
                var _this = this;
                var /** @type {?} */ _config = _applyConfigDefaults(config);
                var /** @type {?} */ overlayRef = this._createOverlay(_config);
                var /** @type {?} */ container = this._attachContainer(overlayRef, _config);
                var /** @type {?} */ ref = new MatBottomSheetRef(container, overlayRef);
                if (componentOrTemplateRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]) {
                    container.attachTemplatePortal(new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__["TemplatePortal"](componentOrTemplateRef, /** @type {?} */ ((null)), /** @type {?} */ ({
                        $implicit: _config.data,
                        bottomSheetRef: ref
                    })));
                }
                else {
                    var /** @type {?} */ portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__["ComponentPortal"](componentOrTemplateRef, undefined, this._createInjector(_config, ref));
                    var /** @type {?} */ contentRef = container.attachComponentPortal(portal);
                    ref.instance = contentRef.instance;
                }
                // When the bottom sheet is dismissed, clear the reference to it.
                ref.afterDismissed().subscribe(function () {
                    // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.
                    if (_this._openedBottomSheetRef == ref) {
                        _this._openedBottomSheetRef = null;
                    }
                });
                if (this._openedBottomSheetRef) {
                    // If a bottom sheet is already in view, dismiss it and enter the
                    // new bottom sheet after exit animation is complete.
                    this._openedBottomSheetRef.afterDismissed().subscribe(function () {
                        return ref.containerInstance.enter();
                    });
                    this._openedBottomSheetRef.dismiss();
                }
                else {
                    // If no bottom sheet is in view, enter the new bottom sheet.
                    ref.containerInstance.enter();
                }
                this._openedBottomSheetRef = ref;
                return ref;
            };
            /**
             * Dismisses the currently-visible bottom sheet.
             */
            /**
             * Dismisses the currently-visible bottom sheet.
             * @return {?}
             */
            MatBottomSheet.prototype.dismiss = /**
             * Dismisses the currently-visible bottom sheet.
             * @return {?}
             */
            function () {
                if (this._openedBottomSheetRef) {
                    this._openedBottomSheetRef.dismiss();
                }
            };
            /**
             * Attaches the bottom sheet container component to the overlay.
             * @param {?} overlayRef
             * @param {?} config
             * @return {?}
             */
            MatBottomSheet.prototype._attachContainer = /**
             * Attaches the bottom sheet container component to the overlay.
             * @param {?} overlayRef
             * @param {?} config
             * @return {?}
             */
            function (overlayRef, config) {
                var /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
                var /** @type {?} */ injector = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__["PortalInjector"](userInjector || this._injector, new WeakMap([
                    [MatBottomSheetConfig, config]
                ]));
                var /** @type {?} */ containerPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__["ComponentPortal"](MatBottomSheetContainer, config.viewContainerRef, injector);
                var /** @type {?} */ containerRef = overlayRef.attach(containerPortal);
                return containerRef.instance;
            };
            /**
             * Creates a new overlay and places it in the correct location.
             * @param {?} config The user-specified bottom sheet config.
             * @return {?}
             */
            MatBottomSheet.prototype._createOverlay = /**
             * Creates a new overlay and places it in the correct location.
             * @param {?} config The user-specified bottom sheet config.
             * @return {?}
             */
            function (config) {
                var /** @type {?} */ overlayConfig = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_11__["OverlayConfig"]({
                    direction: config.direction,
                    hasBackdrop: config.hasBackdrop,
                    maxWidth: '100%',
                    scrollStrategy: this._overlay.scrollStrategies.block(),
                    positionStrategy: this._overlay.position()
                        .global()
                        .centerHorizontally()
                        .bottom('0')
                });
                if (config.backdropClass) {
                    overlayConfig.backdropClass = config.backdropClass;
                }
                return this._overlay.create(overlayConfig);
            };
            /**
             * Creates an injector to be used inside of a bottom sheet component.
             * @template T
             * @param {?} config Config that was used to create the bottom sheet.
             * @param {?} bottomSheetRef Reference to the bottom sheet.
             * @return {?}
             */
            MatBottomSheet.prototype._createInjector = /**
             * Creates an injector to be used inside of a bottom sheet component.
             * @template T
             * @param {?} config Config that was used to create the bottom sheet.
             * @param {?} bottomSheetRef Reference to the bottom sheet.
             * @return {?}
             */
            function (config, bottomSheetRef) {
                var /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
                var /** @type {?} */ injectionTokens = new WeakMap([
                    [MatBottomSheetRef, bottomSheetRef],
                    [MAT_BOTTOM_SHEET_DATA, config.data]
                ]);
                if (config.direction &&
                    (!userInjector || !userInjector.get(_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__["Directionality"], null))) {
                    injectionTokens.set(_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_12__["Directionality"], {
                        value: config.direction,
                        change: Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])()
                    });
                }
                return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__["PortalInjector"](userInjector || this._injector, injectionTokens);
            };
            MatBottomSheet.decorators = [
                {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]},
            ];
            /** @nocollapse */
            MatBottomSheet.ctorParameters = function () {
                return [
                    {type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_11__["Overlay"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"],},
                    {
                        type: MatBottomSheet,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]}, {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]},]
                    },
                ];
            };
            return MatBottomSheet;
        }());

        /**
         * Applies default options to the bottom sheet config.
         * @param {?=} config The configuration to which the defaults will be applied.
         * @return {?} The new configuration object with defaults applied.
         */
        function _applyConfigDefaults(config) {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_6__["__assign"])({}, new MatBottomSheetConfig(), config);
        }

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatBottomSheetModule = /** @class */ (function () {
            function MatBottomSheetModule() {
            }

            MatBottomSheetModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                        imports: [
                            _angular_common__WEBPACK_IMPORTED_MODULE_9__["CommonModule"],
                            _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_11__["OverlayModule"],
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"],
                            _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__["PortalModule"],
                        ],
                        exports: [MatBottomSheetContainer, _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"]],
                        declarations: [MatBottomSheetContainer],
                        entryComponents: [MatBottomSheetContainer],
                        providers: [MatBottomSheet],
                    },]
                },
            ];
            return MatBottomSheetModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=bottom-sheet.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/button-toggle.es5.js":
    /*!******************************************************************!*\
  !*** ./node_modules/@angular/material/esm5/button-toggle.es5.js ***!
  \******************************************************************/
    /*! exports provided: MatButtonToggleGroupBase, _MatButtonToggleGroupMixinBase, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleBase, _MatButtonToggleMixinBase, MatButtonToggle, MatButtonToggleModule */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatButtonToggleGroupBase", function () {
            return MatButtonToggleGroupBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MatButtonToggleGroupMixinBase", function () {
            return _MatButtonToggleGroupMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR", function () {
            return MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatButtonToggleGroupMultiple", function () {
            return MatButtonToggleGroupMultiple;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatButtonToggleChange", function () {
            return MatButtonToggleChange;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatButtonToggleGroup", function () {
            return MatButtonToggleGroup;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatButtonToggleBase", function () {
            return MatButtonToggleBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MatButtonToggleMixinBase", function () {
            return _MatButtonToggleMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatButtonToggle", function () {
            return MatButtonToggle;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatButtonToggleModule", function () {
            return MatButtonToggleModule;
        });
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm5/collections.es5.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatButtonToggleGroupBase = /** @class */ (function () {
            function MatButtonToggleGroupBase() {
            }

            return MatButtonToggleGroupBase;
        }());
        var /** @type {?} */ _MatButtonToggleGroupMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinDisabled"])(MatButtonToggleGroupBase);
        /**
         * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.
         * This allows it to support [(ngModel)].
         * \@docs-private
         */
        var /** @type {?} */ MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {
            provide: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NG_VALUE_ACCESSOR"],
            useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["forwardRef"])(function () {
                return MatButtonToggleGroup;
            }),
            multi: true
        };
        /**
         * @deprecated Use `MatButtonToggleGroup` instead.
         * \@deletion-target 7.0.0
         */
        var /**
         * @deprecated Use `MatButtonToggleGroup` instead.
         * \@deletion-target 7.0.0
         */
        MatButtonToggleGroupMultiple = /** @class */ (function () {
            function MatButtonToggleGroupMultiple() {
            }

            return MatButtonToggleGroupMultiple;
        }());
        var /** @type {?} */ _uniqueIdCounter = 0;
        /**
         * Change event object emitted by MatButtonToggle.
         */
        var /**
         * Change event object emitted by MatButtonToggle.
         */
        MatButtonToggleChange = /** @class */ (function () {
            function MatButtonToggleChange(source, value) {
                this.source = source;
                this.value = value;
            }

            return MatButtonToggleChange;
        }());
        /**
         * Exclusive selection button toggle group that behaves like a radio-button group.
         */
        var MatButtonToggleGroup = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatButtonToggleGroup, _super);

            function MatButtonToggleGroup(_changeDetector) {
                var _this = _super.call(this) || this;
                _this._changeDetector = _changeDetector;
                _this._vertical = false;
                _this._multiple = false;
                /**
                 * The method to be called in order to update ngModel.
                 * Now `ngModel` binding is not supported in multiple selection mode.
                 */
                _this._controlValueAccessorChangeFn = function () {
                };
                /**
                 * onTouch function registered via registerOnTouch (ControlValueAccessor).
                 */
                _this._onTouched = function () {
                };
                _this._name = "mat-button-toggle-group-" + _uniqueIdCounter++;
                /**
                 * Event that emits whenever the value of the group changes.
                 * Used to facilitate two-way data binding.
                 * \@docs-private
                 */
                _this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                /**
                 * Event emitted when the group's value changes.
                 */
                _this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                return _this;
            }

            Object.defineProperty(MatButtonToggleGroup.prototype, "name", {
                get: /**
                 * `name` attribute for the underlying `input` element.
                 * @return {?}
                 */
                function () {
                    return this._name;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    var _this = this;
                    this._name = value;
                    if (this._buttonToggles) {
                        this._buttonToggles.forEach(function (toggle) {
                            return toggle.name = _this._name;
                        });
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatButtonToggleGroup.prototype, "vertical", {
                get: /**
                 * Whether the toggle group is vertical.
                 * @return {?}
                 */
                function () {
                    return this._vertical;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._vertical = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatButtonToggleGroup.prototype, "value", {
                get: /**
                 * Value of the toggle group.
                 * @return {?}
                 */
                function () {
                    var /** @type {?} */ selected = this._selectionModel ? this._selectionModel.selected : [];
                    if (this.multiple) {
                        return selected.map(function (toggle) {
                            return toggle.value;
                        });
                    }
                    return selected[0] ? selected[0].value : undefined;
                },
                set: /**
                 * @param {?} newValue
                 * @return {?}
                 */
                function (newValue) {
                    this._setSelectionByValue(newValue);
                    this.valueChange.emit(this.value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatButtonToggleGroup.prototype, "selected", {
                /** Selected button toggles in the group. */
                get: /**
                 * Selected button toggles in the group.
                 * @return {?}
                 */
                function () {
                    var /** @type {?} */ selected = this._selectionModel.selected;
                    return this.multiple ? selected : (selected[0] || null);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatButtonToggleGroup.prototype, "multiple", {
                get: /**
                 * Whether multiple button toggles can be selected.
                 * @return {?}
                 */
                function () {
                    return this._multiple;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._multiple = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatButtonToggleGroup.prototype.ngOnInit = /**
             * @return {?}
             */
            function () {
                this._selectionModel = new _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_6__["SelectionModel"](this.multiple, undefined, false);
            };
            /**
             * @return {?}
             */
            MatButtonToggleGroup.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                (_a = this._selectionModel).select.apply(_a, this._buttonToggles.filter(function (toggle) {
                    return toggle.checked;
                }));
                var _a;
            };
            /**
             * Sets the model value. Implemented as part of ControlValueAccessor.
             * @param value Value to be set to the model.
             */
            /**
             * Sets the model value. Implemented as part of ControlValueAccessor.
             * @param {?} value Value to be set to the model.
             * @return {?}
             */
            MatButtonToggleGroup.prototype.writeValue = /**
             * Sets the model value. Implemented as part of ControlValueAccessor.
             * @param {?} value Value to be set to the model.
             * @return {?}
             */
            function (value) {
                this.value = value;
                this._changeDetector.markForCheck();
            };
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} fn
             * @return {?}
             */
            MatButtonToggleGroup.prototype.registerOnChange = /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this._controlValueAccessorChangeFn = fn;
            };
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} fn
             * @return {?}
             */
            MatButtonToggleGroup.prototype.registerOnTouched = /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this._onTouched = fn;
            };
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} isDisabled
             * @return {?}
             */
            MatButtonToggleGroup.prototype.setDisabledState = /**
             * @param {?} isDisabled
             * @return {?}
             */
            function (isDisabled) {
                this.disabled = isDisabled;
                if (this._buttonToggles) {
                    this._buttonToggles.forEach(function (toggle) {
                        return toggle._markForCheck();
                    });
                }
            };
            /** Dispatch change event with current selection and group value. */
            /**
             * Dispatch change event with current selection and group value.
             * @return {?}
             */
            MatButtonToggleGroup.prototype._emitChangeEvent = /**
             * Dispatch change event with current selection and group value.
             * @return {?}
             */
            function () {
                var /** @type {?} */ selected = this.selected;
                var /** @type {?} */ source = Array.isArray(selected) ? selected[selected.length - 1] : selected;
                var /** @type {?} */ event = new MatButtonToggleChange(/** @type {?} */ ((source)), this.value);
                this._controlValueAccessorChangeFn(event.value);
                this.change.emit(event);
            };
            /**
             * Syncs a button toggle's selected state with the model value.
             * @param toggle Toggle to be synced.
             * @param select Whether the toggle should be selected.
             * @param isUserInput Whether the change was a result of a user interaction.
             */
            /**
             * Syncs a button toggle's selected state with the model value.
             * @param {?} toggle Toggle to be synced.
             * @param {?} select Whether the toggle should be selected.
             * @param {?=} isUserInput Whether the change was a result of a user interaction.
             * @return {?}
             */
            MatButtonToggleGroup.prototype._syncButtonToggle = /**
             * Syncs a button toggle's selected state with the model value.
             * @param {?} toggle Toggle to be synced.
             * @param {?} select Whether the toggle should be selected.
             * @param {?=} isUserInput Whether the change was a result of a user interaction.
             * @return {?}
             */
            function (toggle, select, isUserInput) {
                if (isUserInput === void 0) {
                    isUserInput = false;
                }
                // Deselect the currently-selected toggle, if we're in single-selection
                // mode and the button being toggled isn't selected at the moment.
                if (!this.multiple && this.selected && !toggle.checked) {
                    (/** @type {?} */ (this.selected)).checked = false;
                }
                if (select) {
                    this._selectionModel.select(toggle);
                }
                else {
                    this._selectionModel.deselect(toggle);
                }
                // Only emit the change event for user input.
                if (isUserInput) {
                    this._emitChangeEvent();
                }
                // Note: we emit this one no matter whether it was a user interaction, because
                // it is used by Angular to sync up the two-way data binding.
                this.valueChange.emit(this.value);
            };
            /** Checks whether a button toggle is selected. */
            /**
             * Checks whether a button toggle is selected.
             * @param {?} toggle
             * @return {?}
             */
            MatButtonToggleGroup.prototype._isSelected = /**
             * Checks whether a button toggle is selected.
             * @param {?} toggle
             * @return {?}
             */
            function (toggle) {
                return this._selectionModel.isSelected(toggle);
            };
            /** Determines whether a button toggle should be checked on init. */
            /**
             * Determines whether a button toggle should be checked on init.
             * @param {?} toggle
             * @return {?}
             */
            MatButtonToggleGroup.prototype._isPrechecked = /**
             * Determines whether a button toggle should be checked on init.
             * @param {?} toggle
             * @return {?}
             */
            function (toggle) {
                if (typeof this._rawValue === 'undefined') {
                    return false;
                }
                if (this.multiple && Array.isArray(this._rawValue)) {
                    return this._rawValue.some(function (value) {
                        return toggle.value != null && value === toggle.value;
                    });
                }
                return toggle.value === this._rawValue;
            };
            /**
             * Updates the selection state of the toggles in the group based on a value.
             * @param {?} value
             * @return {?}
             */
            MatButtonToggleGroup.prototype._setSelectionByValue = /**
             * Updates the selection state of the toggles in the group based on a value.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                var _this = this;
                this._rawValue = value;
                if (!this._buttonToggles) {
                    return;
                }
                if (this.multiple && value) {
                    if (!Array.isArray(value)) {
                        throw Error('Value must be an array in multiple-selection mode.');
                    }
                    this._clearSelection();
                    value.forEach(function (currentValue) {
                        return _this._selectValue(currentValue);
                    });
                }
                else {
                    this._clearSelection();
                    this._selectValue(value);
                }
            };
            /**
             * Clears the selected toggles.
             * @return {?}
             */
            MatButtonToggleGroup.prototype._clearSelection = /**
             * Clears the selected toggles.
             * @return {?}
             */
            function () {
                this._selectionModel.clear();
                this._buttonToggles.forEach(function (toggle) {
                    return toggle.checked = false;
                });
            };
            /**
             * Selects a value if there's a toggle that corresponds to it.
             * @param {?} value
             * @return {?}
             */
            MatButtonToggleGroup.prototype._selectValue = /**
             * Selects a value if there's a toggle that corresponds to it.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                var /** @type {?} */ correspondingOption = this._buttonToggles.find(function (toggle) {
                    return toggle.value != null && toggle.value === value;
                });
                if (correspondingOption) {
                    correspondingOption.checked = true;
                    this._selectionModel.select(correspondingOption);
                }
            };
            MatButtonToggleGroup.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Directive"], args: [{
                        selector: 'mat-button-toggle-group',
                        providers: [
                            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,
                            {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},
                        ],
                        inputs: ['disabled'],
                        host: {
                            '[attr.role]': 'multiple ? "group" : "radiogroup"',
                            'class': 'mat-button-toggle-group',
                            '[class.mat-button-toggle-vertical]': 'vertical'
                        },
                        exportAs: 'matButtonToggleGroup',
                    },]
                },
            ];
            /** @nocollapse */
            MatButtonToggleGroup.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"],},
                ];
            };
            MatButtonToggleGroup.propDecorators = {
                "_buttonToggles": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ContentChildren"],
                    args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["forwardRef"])(function () {
                        return MatButtonToggle;
                    }),]
                },],
                "name": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]},],
                "vertical": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]},],
                "value": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]},],
                "valueChange": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]},],
                "multiple": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]},],
                "change": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]},],
            };
            return MatButtonToggleGroup;
        }(_MatButtonToggleGroupMixinBase));
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatButtonToggleBase = /** @class */ (function () {
            function MatButtonToggleBase() {
            }

            return MatButtonToggleBase;
        }());
        var /** @type {?} */ _MatButtonToggleMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinDisableRipple"])(MatButtonToggleBase);
        /**
         * Single button inside of a toggle group.
         */
        var MatButtonToggle = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatButtonToggle, _super);

            function MatButtonToggle(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor) {
                var _this = _super.call(this) || this;
                _this._changeDetectorRef = _changeDetectorRef;
                _this._elementRef = _elementRef;
                _this._focusMonitor = _focusMonitor;
                _this._isSingleSelector = false;
                _this._checked = false;
                /**
                 * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element
                 */
                _this.ariaLabelledby = null;
                _this._disabled = false;
                /**
                 * Event emitted when the group value changes.
                 */
                _this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                _this.buttonToggleGroup = toggleGroup;
                return _this;
            }

            Object.defineProperty(MatButtonToggle.prototype, "inputId", {
                /** Unique ID for the underlying `input` element. */
                get: /**
                 * Unique ID for the underlying `input` element.
                 * @return {?}
                 */
                function () {
                    return this.id + "-input";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatButtonToggle.prototype, "checked", {
                get: /**
                 * Whether the button is checked.
                 * @return {?}
                 */
                function () {
                    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    var /** @type {?} */ newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
                    if (newValue !== this._checked) {
                        this._checked = newValue;
                        if (this.buttonToggleGroup) {
                            this.buttonToggleGroup._syncButtonToggle(this, this._checked);
                        }
                        this._changeDetectorRef.markForCheck();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatButtonToggle.prototype, "disabled", {
                get: /**
                 * Whether the button is disabled.
                 * @return {?}
                 */
                function () {
                    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatButtonToggle.prototype.ngOnInit = /**
             * @return {?}
             */
            function () {
                this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;
                this._type = this._isSingleSelector ? 'radio' : 'checkbox';
                this.id = this.id || "mat-button-toggle-" + _uniqueIdCounter++;
                if (this._isSingleSelector) {
                    this.name = this.buttonToggleGroup.name;
                }
                if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {
                    this.checked = true;
                }
                this._focusMonitor.monitor(this._elementRef.nativeElement, true);
            };
            /**
             * @return {?}
             */
            MatButtonToggle.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);
            };
            /** Focuses the button. */
            /**
             * Focuses the button.
             * @return {?}
             */
            MatButtonToggle.prototype.focus = /**
             * Focuses the button.
             * @return {?}
             */
            function () {
                this._inputElement.nativeElement.focus();
            };
            /** Checks the button toggle due to an interaction with the underlying native input. */
            /**
             * Checks the button toggle due to an interaction with the underlying native input.
             * @param {?} event
             * @return {?}
             */
            MatButtonToggle.prototype._onInputChange = /**
             * Checks the button toggle due to an interaction with the underlying native input.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                event.stopPropagation();
                this._checked = this._isSingleSelector ? true : !this._checked;
                if (this.buttonToggleGroup) {
                    this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);
                    this.buttonToggleGroup._onTouched();
                }
                // Emit a change event when the native input does.
                this.change.emit(new MatButtonToggleChange(this, this.value));
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatButtonToggle.prototype._onInputClick = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                // We have to stop propagation for click events on the visual hidden input element.
                // By default, when a user clicks on a label element, a generated click event will be
                // dispatched on the associated input element. Since we are using a label element as our
                // root container, the click event on the `slide-toggle` will be executed twice.
                // The real click event will bubble up, and the generated click event also tries to bubble up.
                // This will lead to multiple click events.
                // Preventing bubbling for the second event will solve that issue.
                event.stopPropagation();
            };
            /**
             * Marks the button toggle as needing checking for change detection.
             * This method is exposed because the parent button toggle group will directly
             * update bound properties of the radio button.
             */
            /**
             * Marks the button toggle as needing checking for change detection.
             * This method is exposed because the parent button toggle group will directly
             * update bound properties of the radio button.
             * @return {?}
             */
            MatButtonToggle.prototype._markForCheck = /**
             * Marks the button toggle as needing checking for change detection.
             * This method is exposed because the parent button toggle group will directly
             * update bound properties of the radio button.
             * @return {?}
             */
            function () {
                // When the group value changes, the button will not be notified.
                // Use `markForCheck` to explicit update button toggle's status.
                this._changeDetectorRef.markForCheck();
            };
            MatButtonToggle.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"], args: [{
                        selector: 'mat-button-toggle',
                        template: "<label [attr.for]=\"inputId\" class=\"mat-button-toggle-label\" #label><input #input class=\"mat-button-toggle-input cdk-visually-hidden\" [type]=\"_type\" [id]=\"inputId\" [checked]=\"checked\" [disabled]=\"disabled || null\" [attr.name]=\"name\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" (change)=\"_onInputChange($event)\" (click)=\"_onInputClick($event)\"><div class=\"mat-button-toggle-label-content\"><ng-content></ng-content></div></label><div class=\"mat-button-toggle-focus-overlay\"></div><div class=\"mat-button-toggle-ripple\" matRipple [matRippleTrigger]=\"label\" [matRippleDisabled]=\"this.disableRipple || this.disabled\"></div>",
                        styles: [".mat-button-toggle-group,.mat-button-toggle-standalone{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);position:relative;display:inline-flex;flex-direction:row;border-radius:2px;cursor:pointer;white-space:nowrap;overflow:hidden}@media screen and (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle-disabled .mat-button-toggle-label-content{cursor:default}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media screen and (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;cursor:pointer}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}@media screen and (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0;border-bottom:solid 36px}}.mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}"],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewEncapsulation"].None,
                        exportAs: 'matButtonToggle',
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectionStrategy"].OnPush,
                        inputs: ['disableRipple'],
                        host: {
                            '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',
                            '[class.mat-button-toggle-checked]': 'checked',
                            '[class.mat-button-toggle-disabled]': 'disabled',
                            'class': 'mat-button-toggle',
                            '[attr.id]': 'id',
                        }
                    },]
                },
            ];
            /** @nocollapse */
            MatButtonToggle.ctorParameters = function () {
                return [
                    {
                        type: MatButtonToggleGroup,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Optional"]},]
                    },
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ElementRef"],},
                    {type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusMonitor"],},
                ];
            };
            MatButtonToggle.propDecorators = {
                "ariaLabel": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"], args: ['aria-label',]},],
                "ariaLabelledby": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"],
                    args: ['aria-labelledby',]
                },],
                "_inputElement": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ViewChild"], args: ['input',]},],
                "id": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]},],
                "name": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]},],
                "value": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]},],
                "checked": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]},],
                "disabled": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Input"]},],
                "change": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["Output"]},],
            };
            return MatButtonToggle;
        }(_MatButtonToggleMixinBase));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatButtonToggleModule = /** @class */ (function () {
            function MatButtonToggleModule() {
            }

            MatButtonToggleModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"], args: [{
                        imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatRippleModule"]],
                        exports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"], MatButtonToggleGroup, MatButtonToggle],
                        declarations: [MatButtonToggleGroup, MatButtonToggle],
                    },]
                },
            ];
            return MatButtonToggleModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=button-toggle.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/card.es5.js":
    /*!*********************************************************!*\
  !*** ./node_modules/@angular/material/esm5/card.es5.js ***!
  \*********************************************************/
    /*! exports provided: MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardImage, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardXlImage, MatCardAvatar, MatCard, MatCardHeader, MatCardTitleGroup, MatCardModule */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardContent", function () {
            return MatCardContent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardTitle", function () {
            return MatCardTitle;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardSubtitle", function () {
            return MatCardSubtitle;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardActions", function () {
            return MatCardActions;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardFooter", function () {
            return MatCardFooter;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardImage", function () {
            return MatCardImage;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardSmImage", function () {
            return MatCardSmImage;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardMdImage", function () {
            return MatCardMdImage;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardLgImage", function () {
            return MatCardLgImage;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardXlImage", function () {
            return MatCardXlImage;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardAvatar", function () {
            return MatCardAvatar;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCard", function () {
            return MatCard;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardHeader", function () {
            return MatCardHeader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardTitleGroup", function () {
            return MatCardTitleGroup;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCardModule", function () {
            return MatCardModule;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Content of a card, needed as it's used as a selector in the API.
         * \@docs-private
         */
        var MatCardContent = /** @class */ (function () {
            function MatCardContent() {
            }

            MatCardContent.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: 'mat-card-content',
                        host: {'class': 'mat-card-content'}
                    },]
                },
            ];
            return MatCardContent;
        }());
        /**
         * Title of a card, needed as it's used as a selector in the API.
         * \@docs-private
         */
        var MatCardTitle = /** @class */ (function () {
            function MatCardTitle() {
            }

            MatCardTitle.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: "mat-card-title, [mat-card-title], [matCardTitle]",
                        host: {
                            'class': 'mat-card-title'
                        }
                    },]
                },
            ];
            return MatCardTitle;
        }());
        /**
         * Sub-title of a card, needed as it's used as a selector in the API.
         * \@docs-private
         */
        var MatCardSubtitle = /** @class */ (function () {
            function MatCardSubtitle() {
            }

            MatCardSubtitle.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: "mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]",
                        host: {
                            'class': 'mat-card-subtitle'
                        }
                    },]
                },
            ];
            return MatCardSubtitle;
        }());
        /**
         * Action section of a card, needed as it's used as a selector in the API.
         * \@docs-private
         */
        var MatCardActions = /** @class */ (function () {
            function MatCardActions() {
                /**
                 * Position of the actions inside the card.
                 */
                this.align = 'start';
            }

            MatCardActions.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: 'mat-card-actions',
                        exportAs: 'matCardActions',
                        host: {
                            'class': 'mat-card-actions',
                            '[class.mat-card-actions-align-end]': 'align === "end"',
                        }
                    },]
                },
            ];
            /** @nocollapse */
            MatCardActions.propDecorators = {
                "align": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
            };
            return MatCardActions;
        }());
        /**
         * Footer of a card, needed as it's used as a selector in the API.
         * \@docs-private
         */
        var MatCardFooter = /** @class */ (function () {
            function MatCardFooter() {
            }

            MatCardFooter.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: 'mat-card-footer',
                        host: {'class': 'mat-card-footer'}
                    },]
                },
            ];
            return MatCardFooter;
        }());
        /**
         * Image used in a card, needed to add the mat- CSS styling.
         * \@docs-private
         */
        var MatCardImage = /** @class */ (function () {
            function MatCardImage() {
            }

            MatCardImage.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[mat-card-image], [matCardImage]',
                        host: {'class': 'mat-card-image'}
                    },]
                },
            ];
            return MatCardImage;
        }());
        /**
         * Image used in a card, needed to add the mat- CSS styling.
         * \@docs-private
         */
        var MatCardSmImage = /** @class */ (function () {
            function MatCardSmImage() {
            }

            MatCardSmImage.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[mat-card-sm-image], [matCardImageSmall]',
                        host: {'class': 'mat-card-sm-image'}
                    },]
                },
            ];
            return MatCardSmImage;
        }());
        /**
         * Image used in a card, needed to add the mat- CSS styling.
         * \@docs-private
         */
        var MatCardMdImage = /** @class */ (function () {
            function MatCardMdImage() {
            }

            MatCardMdImage.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[mat-card-md-image], [matCardImageMedium]',
                        host: {'class': 'mat-card-md-image'}
                    },]
                },
            ];
            return MatCardMdImage;
        }());
        /**
         * Image used in a card, needed to add the mat- CSS styling.
         * \@docs-private
         */
        var MatCardLgImage = /** @class */ (function () {
            function MatCardLgImage() {
            }

            MatCardLgImage.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[mat-card-lg-image], [matCardImageLarge]',
                        host: {'class': 'mat-card-lg-image'}
                    },]
                },
            ];
            return MatCardLgImage;
        }());
        /**
         * Large image used in a card, needed to add the mat- CSS styling.
         * \@docs-private
         */
        var MatCardXlImage = /** @class */ (function () {
            function MatCardXlImage() {
            }

            MatCardXlImage.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[mat-card-xl-image], [matCardImageXLarge]',
                        host: {'class': 'mat-card-xl-image'}
                    },]
                },
            ];
            return MatCardXlImage;
        }());
        /**
         * Avatar image used in a card, needed to add the mat- CSS styling.
         * \@docs-private
         */
        var MatCardAvatar = /** @class */ (function () {
            function MatCardAvatar() {
            }

            MatCardAvatar.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[mat-card-avatar], [matCardAvatar]',
                        host: {'class': 'mat-card-avatar'}
                    },]
                },
            ];
            return MatCardAvatar;
        }());
        /**
         * A basic content container component that adds the styles of a Material design card.
         *
         * While this component can be used alone, it also provides a number
         * of preset styles for common card sections, including:
         * - mat-card-title
         * - mat-card-subtitle
         * - mat-card-content
         * - mat-card-actions
         * - mat-card-footer
         */
        var MatCard = /** @class */ (function () {
            function MatCard() {
            }

            MatCard.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-card',
                        exportAs: 'matCard',
                        template: "<ng-content></ng-content><ng-content select=\"mat-card-footer\"></ng-content>",
                        styles: [".mat-card{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:block;position:relative;padding:24px;border-radius:2px}.mat-card:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-card .mat-divider{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider{left:auto;right:0}.mat-card .mat-divider.mat-divider-inset{position:static;margin:0}.mat-card.mat-card-flat{box-shadow:none}@media screen and (-ms-high-contrast:active){.mat-card{outline:solid 1px}}.mat-card-actions,.mat-card-content,.mat-card-subtitle,.mat-card-title{display:block;margin-bottom:16px}.mat-card-actions{margin-left:-16px;margin-right:-16px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 48px);margin:0 -24px 16px -24px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-footer{display:block;margin:0 -24px -24px -24px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button{margin:0 4px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header-text{margin:0 8px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0}.mat-card-lg-image,.mat-card-md-image,.mat-card-sm-image{margin:-8px 0}.mat-card-title-group{display:flex;justify-content:space-between;margin:0 -8px}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}@media (max-width:599px){.mat-card{padding:24px 16px}.mat-card-actions{margin-left:-8px;margin-right:-8px}.mat-card-image{width:calc(100% + 32px);margin:16px -16px}.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}.mat-card-header{margin:-8px 0 0 0}.mat-card-footer{margin-left:-16px;margin-right:-16px}}.mat-card-content>:first-child,.mat-card>:first-child{margin-top:0}.mat-card-content>:last-child:not(.mat-card-footer),.mat-card>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-24px}.mat-card>.mat-card-actions:last-child{margin-bottom:-16px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child{margin-left:0;margin-right:0}.mat-card-subtitle:not(:first-child),.mat-card-title:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}"],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        host: {'class': 'mat-card'}
                    },]
                },
            ];
            return MatCard;
        }());
        /**
         * Component intended to be used within the `<mat-card>` component. It adds styles for a
         * preset header section (i.e. a title, subtitle, and avatar layout).
         * \@docs-private
         */
        var MatCardHeader = /** @class */ (function () {
            function MatCardHeader() {
            }

            MatCardHeader.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-card-header',
                        template: "<ng-content select=\"[mat-card-avatar], [matCardAvatar]\"></ng-content><div class=\"mat-card-header-text\"><ng-content select=\"mat-card-title, mat-card-subtitle, [mat-card-title], [mat-card-subtitle], [matCardTitle], [matCardSubtitle]\"></ng-content></div><ng-content></ng-content>",
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        host: {'class': 'mat-card-header'}
                    },]
                },
            ];
            return MatCardHeader;
        }());
        /**
         * Component intended to be used within the `<mat-card>` component. It adds styles for a preset
         * layout that groups an image with a title section.
         * \@docs-private
         */
        var MatCardTitleGroup = /** @class */ (function () {
            function MatCardTitleGroup() {
            }

            MatCardTitleGroup.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-card-title-group',
                        template: "<div><ng-content select=\"mat-card-title, mat-card-subtitle, [mat-card-title], [mat-card-subtitle], [matCardTitle], [matCardSubtitle]\"></ng-content></div><ng-content select=\"img\"></ng-content><ng-content></ng-content>",
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        host: {'class': 'mat-card-title-group'}
                    },]
                },
            ];
            return MatCardTitleGroup;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatCardModule = /** @class */ (function () {
            function MatCardModule() {
            }

            MatCardModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                        imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatCommonModule"]],
                        exports: [
                            MatCard,
                            MatCardHeader,
                            MatCardTitleGroup,
                            MatCardContent,
                            MatCardTitle,
                            MatCardSubtitle,
                            MatCardActions,
                            MatCardFooter,
                            MatCardSmImage,
                            MatCardMdImage,
                            MatCardLgImage,
                            MatCardImage,
                            MatCardXlImage,
                            MatCardAvatar,
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatCommonModule"],
                        ],
                        declarations: [
                            MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,
                            MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,
                            MatCardXlImage, MatCardAvatar,
                        ],
                    },]
                },
            ];
            return MatCardModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=card.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/checkbox.es5.js":
    /*!*************************************************************!*\
  !*** ./node_modules/@angular/material/esm5/checkbox.es5.js ***!
  \*************************************************************/
    /*! exports provided: MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckboxBase, _MatCheckboxMixinBase, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR", function () {
            return MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TransitionCheckState", function () {
            return TransitionCheckState;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCheckboxChange", function () {
            return MatCheckboxChange;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCheckboxBase", function () {
            return MatCheckboxBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MatCheckboxMixinBase", function () {
            return _MatCheckboxMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCheckbox", function () {
            return MatCheckbox;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_CHECKBOX_CLICK_ACTION", function () {
            return MAT_CHECKBOX_CLICK_ACTION;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCheckboxModule", function () {
            return MatCheckboxModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_CHECKBOX_REQUIRED_VALIDATOR", function () {
            return MAT_CHECKBOX_REQUIRED_VALIDATOR;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCheckboxRequiredValidator", function () {
            return MatCheckboxRequiredValidator;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm5/animations.js");
        /* harmony import */
        var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/observers */ "./node_modules/@angular/cdk/esm5/observers.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Injection token that can be used to specify the checkbox click behavior.
         */
        var /** @type {?} */ MAT_CHECKBOX_CLICK_ACTION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-checkbox-click-action');

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
// Increasing integer for generating unique ids for checkbox components.
        var /** @type {?} */ nextUniqueId = 0;
        /**
         * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.
         * This allows it to support [(ngModel)].
         * \@docs-private
         */
        var /** @type {?} */ MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {
            provide: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NG_VALUE_ACCESSOR"],
            useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
                return MatCheckbox;
            }),
            multi: true
        };
        /** @enum {number} */
        var TransitionCheckState = {
            /** The initial state of the component before any user interaction. */
            Init: 0,
            /** The state representing the component when it's becoming checked. */
            Checked: 1,
            /** The state representing the component when it's becoming unchecked. */
            Unchecked: 2,
            /** The state representing the component when it's becoming indeterminate. */
            Indeterminate: 3,
        };
        TransitionCheckState[TransitionCheckState.Init] = "Init";
        TransitionCheckState[TransitionCheckState.Checked] = "Checked";
        TransitionCheckState[TransitionCheckState.Unchecked] = "Unchecked";
        TransitionCheckState[TransitionCheckState.Indeterminate] = "Indeterminate";
        /**
         * Change event object emitted by MatCheckbox.
         */
        var /**
         * Change event object emitted by MatCheckbox.
         */
        MatCheckboxChange = /** @class */ (function () {
            function MatCheckboxChange() {
            }

            return MatCheckboxChange;
        }());
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatCheckboxBase = /** @class */ (function () {
            function MatCheckboxBase(_elementRef) {
                this._elementRef = _elementRef;
            }

            return MatCheckboxBase;
        }());
        var /** @type {?} */ _MatCheckboxMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinTabIndex"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinColor"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinDisableRipple"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["mixinDisabled"])(MatCheckboxBase)), 'accent'));
        /**
         * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,
         * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or
         * disabled. Note that all additional accessibility attributes are taken care of by the component,
         * so there is no need to provide them yourself. However, if you want to omit a label and still
         * have the checkbox be accessible, you may supply an [aria-label] input.
         * See: https://material.io/design/components/selection-controls.html
         */
        var MatCheckbox = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatCheckbox, _super);

            function MatCheckbox(elementRef, _changeDetectorRef, _focusMonitor, tabIndex, _clickAction, _animationMode) {
                var _this = _super.call(this, elementRef) || this;
                _this._changeDetectorRef = _changeDetectorRef;
                _this._focusMonitor = _focusMonitor;
                _this._clickAction = _clickAction;
                _this._animationMode = _animationMode;
                /**
                 * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will
                 * take precedence so this may be omitted.
                 */
                _this.ariaLabel = '';
                /**
                 * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element
                 */
                _this.ariaLabelledby = null;
                _this._uniqueId = "mat-checkbox-" + ++nextUniqueId;
                /**
                 * A unique id for the checkbox input. If none is supplied, it will be auto-generated.
                 */
                _this.id = _this._uniqueId;
                /**
                 * Whether the label should appear after or before the checkbox. Defaults to 'after'
                 */
                _this.labelPosition = 'after';
                /**
                 * Name value will be applied to the input element if present
                 */
                _this.name = null;
                /**
                 * Event emitted when the checkbox's `checked` value changes.
                 */
                _this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Event emitted when the checkbox's `indeterminate` value changes.
                 */
                _this.indeterminateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.
                 * \@docs-private
                 */
                _this._onTouched = function () {
                };
                _this._currentAnimationClass = '';
                _this._currentCheckState = TransitionCheckState.Init;
                _this._controlValueAccessorChangeFn = function () {
                };
                _this._checked = false;
                _this._disabled = false;
                _this._indeterminate = false;
                _this.tabIndex = parseInt(tabIndex) || 0;
                return _this;
            }

            Object.defineProperty(MatCheckbox.prototype, "inputId", {
                /** Returns the unique id for the visual hidden input. */
                get: /**
                 * Returns the unique id for the visual hidden input.
                 * @return {?}
                 */
                function () {
                    return (this.id || this._uniqueId) + "-input";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatCheckbox.prototype, "required", {
                get: /**
                 * Whether the checkbox is required.
                 * @return {?}
                 */
                function () {
                    return this._required;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatCheckbox.prototype.ngAfterViewInit = /**
             * @return {?}
             */
            function () {
                var _this = this;
                this._focusMonitor
                    .monitor(this._inputElement.nativeElement)
                    .subscribe(function (focusOrigin) {
                        return _this._onInputFocusChange(focusOrigin);
                    });
            };
            /**
             * @return {?}
             */
            MatCheckbox.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);
            };
            Object.defineProperty(MatCheckbox.prototype, "checked", {
                get: /**
                 * Whether the checkbox is checked.
                 * @return {?}
                 */
                function () {
                    return this._checked;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (value != this.checked) {
                        this._checked = value;
                        this._changeDetectorRef.markForCheck();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatCheckbox.prototype, "disabled", {
                get: /**
                 * Whether the checkbox is disabled. This fully overrides the implementation provided by
                 * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.
                 * @return {?}
                 */
                function () {
                    return this._disabled;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (value != this.disabled) {
                        this._disabled = value;
                        this._changeDetectorRef.markForCheck();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatCheckbox.prototype, "indeterminate", {
                get: /**
                 * Whether the checkbox is indeterminate. This is also known as "mixed" mode and can be used to
                 * represent a checkbox with three states, e.g. a checkbox that represents a nested list of
                 * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately
                 * set to false.
                 * @return {?}
                 */
                function () {
                    return this._indeterminate;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    var /** @type {?} */ changed = value != this._indeterminate;
                    this._indeterminate = value;
                    if (changed) {
                        if (this._indeterminate) {
                            this._transitionCheckState(TransitionCheckState.Indeterminate);
                        }
                        else {
                            this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);
                        }
                        this.indeterminateChange.emit(this._indeterminate);
                    }
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatCheckbox.prototype._isRippleDisabled = /**
             * @return {?}
             */
            function () {
                return this.disableRipple || this.disabled;
            };
            /** Method being called whenever the label text changes. */
            /**
             * Method being called whenever the label text changes.
             * @return {?}
             */
            MatCheckbox.prototype._onLabelTextChange = /**
             * Method being called whenever the label text changes.
             * @return {?}
             */
            function () {
                // This method is getting called whenever the label of the checkbox changes.
                // Since the checkbox uses the OnPush strategy we need to notify it about the change
                // that has been recognized by the cdkObserveContent directive.
                this._changeDetectorRef.markForCheck();
            };
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} value
             * @return {?}
             */
            MatCheckbox.prototype.writeValue = /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.checked = !!value;
            };
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} fn
             * @return {?}
             */
            MatCheckbox.prototype.registerOnChange = /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this._controlValueAccessorChangeFn = fn;
            };
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} fn
             * @return {?}
             */
            MatCheckbox.prototype.registerOnTouched = /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this._onTouched = fn;
            };
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} isDisabled
             * @return {?}
             */
            MatCheckbox.prototype.setDisabledState = /**
             * @param {?} isDisabled
             * @return {?}
             */
            function (isDisabled) {
                this.disabled = isDisabled;
            };
            /**
             * @return {?}
             */
            MatCheckbox.prototype._getAriaChecked = /**
             * @return {?}
             */
            function () {
                return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');
            };
            /**
             * @param {?} newState
             * @return {?}
             */
            MatCheckbox.prototype._transitionCheckState = /**
             * @param {?} newState
             * @return {?}
             */
            function (newState) {
                var /** @type {?} */ oldState = this._currentCheckState;
                var /** @type {?} */ element = this._elementRef.nativeElement;
                if (oldState === newState) {
                    return;
                }
                if (this._currentAnimationClass.length > 0) {
                    element.classList.remove(this._currentAnimationClass);
                }
                this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);
                this._currentCheckState = newState;
                if (this._currentAnimationClass.length > 0) {
                    element.classList.add(this._currentAnimationClass);
                }
            };
            /**
             * @return {?}
             */
            MatCheckbox.prototype._emitChangeEvent = /**
             * @return {?}
             */
            function () {
                var /** @type {?} */ event = new MatCheckboxChange();
                event.source = this;
                event.checked = this.checked;
                this._controlValueAccessorChangeFn(this.checked);
                this.change.emit(event);
            };
            /**
             * Function is called whenever the focus changes for the input element.
             * @param {?} focusOrigin
             * @return {?}
             */
            MatCheckbox.prototype._onInputFocusChange = /**
             * Function is called whenever the focus changes for the input element.
             * @param {?} focusOrigin
             * @return {?}
             */
            function (focusOrigin) {
                // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889
                if (!this._focusRipple && focusOrigin === 'keyboard') {
                    this._focusRipple = this.ripple.launch(0, 0, {persistent: true});
                }
                else if (!focusOrigin) {
                    if (this._focusRipple) {
                        this._focusRipple.fadeOut();
                        this._focusRipple = null;
                    }
                    this._onTouched();
                }
            };
            /** Toggles the `checked` state of the checkbox. */
            /**
             * Toggles the `checked` state of the checkbox.
             * @return {?}
             */
            MatCheckbox.prototype.toggle = /**
             * Toggles the `checked` state of the checkbox.
             * @return {?}
             */
            function () {
                this.checked = !this.checked;
            };
            /**
             * Event handler for checkbox input element.
             * Toggles checked state if element is not disabled.
             * Do not toggle on (change) event since IE doesn't fire change event when
             *   indeterminate checkbox is clicked.
             * @param event
             */
            /**
             * Event handler for checkbox input element.
             * Toggles checked state if element is not disabled.
             * Do not toggle on (change) event since IE doesn't fire change event when
             *   indeterminate checkbox is clicked.
             * @param {?} event
             * @return {?}
             */
            MatCheckbox.prototype._onInputClick = /**
             * Event handler for checkbox input element.
             * Toggles checked state if element is not disabled.
             * Do not toggle on (change) event since IE doesn't fire change event when
             *   indeterminate checkbox is clicked.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                var _this = this;
                // We have to stop propagation for click events on the visual hidden input element.
                // By default, when a user clicks on a label element, a generated click event will be
                // dispatched on the associated input element. Since we are using a label element as our
                // root container, the click event on the `checkbox` will be executed twice.
                // The real click event will bubble up, and the generated click event also tries to bubble up.
                // This will lead to multiple click events.
                // Preventing bubbling for the second event will solve that issue.
                event.stopPropagation();
                // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click
                if (!this.disabled && this._clickAction !== 'noop') {
                    // When user manually click on the checkbox, `indeterminate` is set to false.
                    if (this.indeterminate && this._clickAction !== 'check') {
                        Promise.resolve().then(function () {
                            _this._indeterminate = false;
                            _this.indeterminateChange.emit(_this._indeterminate);
                        });
                    }
                    this.toggle();
                    this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);
                    // Emit our custom change event if the native input emitted one.
                    // It is important to only emit it, if the native input triggered one, because
                    // we don't want to trigger a change event, when the `checked` variable changes for example.
                    this._emitChangeEvent();
                }
                else if (!this.disabled && this._clickAction === 'noop') {
                    // Reset native input when clicked with noop. The native checkbox becomes checked after
                    // click, reset it to be align with `checked` value of `mat-checkbox`.
                    this._inputElement.nativeElement.checked = this.checked;
                    this._inputElement.nativeElement.indeterminate = this.indeterminate;
                }
            };
            /** Focuses the checkbox. */
            /**
             * Focuses the checkbox.
             * @return {?}
             */
            MatCheckbox.prototype.focus = /**
             * Focuses the checkbox.
             * @return {?}
             */
            function () {
                this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatCheckbox.prototype._onInteractionEvent = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                // We always have to stop propagation on the change event.
                // Otherwise the change event, from the input element, will bubble up and
                // emit its event object to the `change` output.
                event.stopPropagation();
            };
            /**
             * @param {?} oldState
             * @param {?} newState
             * @return {?}
             */
            MatCheckbox.prototype._getAnimationClassForCheckStateTransition = /**
             * @param {?} oldState
             * @param {?} newState
             * @return {?}
             */
            function (oldState, newState) {
                // Don't transition if animations are disabled.
                if (this._animationMode === 'NoopAnimations') {
                    return '';
                }
                var /** @type {?} */ animSuffix = '';
                switch (oldState) {
                    case TransitionCheckState.Init:
                        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or
                        // [checked] bound to it.
                        if (newState === TransitionCheckState.Checked) {
                            animSuffix = 'unchecked-checked';
                        }
                        else if (newState == TransitionCheckState.Indeterminate) {
                            animSuffix = 'unchecked-indeterminate';
                        }
                        else {
                            return '';
                        }
                        break;
                    case TransitionCheckState.Unchecked:
                        animSuffix = newState === TransitionCheckState.Checked ?
                            'unchecked-checked' : 'unchecked-indeterminate';
                        break;
                    case TransitionCheckState.Checked:
                        animSuffix = newState === TransitionCheckState.Unchecked ?
                            'checked-unchecked' : 'checked-indeterminate';
                        break;
                    case TransitionCheckState.Indeterminate:
                        animSuffix = newState === TransitionCheckState.Checked ?
                            'indeterminate-checked' : 'indeterminate-unchecked';
                        break;
                }
                return "mat-checkbox-anim-" + animSuffix;
            };
            MatCheckbox.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-checkbox',
                        template: "<label [attr.for]=\"inputId\" class=\"mat-checkbox-layout\" #label><div class=\"mat-checkbox-inner-container\" [class.mat-checkbox-inner-container-no-side-margin]=\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\"><input #input class=\"mat-checkbox-input cdk-visually-hidden\" type=\"checkbox\" [id]=\"inputId\" [required]=\"required\" [checked]=\"checked\" [attr.value]=\"value\" [disabled]=\"disabled\" [attr.name]=\"name\" [tabIndex]=\"tabIndex\" [indeterminate]=\"indeterminate\" [attr.aria-label]=\"ariaLabel || null\" [attr.aria-labelledby]=\"ariaLabelledby\" [attr.aria-checked]=\"_getAriaChecked()\" (change)=\"_onInteractionEvent($event)\" (click)=\"_onInputClick($event)\"><div matRipple class=\"mat-checkbox-ripple\" [matRippleTrigger]=\"label\" [matRippleDisabled]=\"_isRippleDisabled()\" [matRippleRadius]=\"25\" [matRippleCentered]=\"true\" [matRippleAnimation]=\"{enterDuration: 150}\"></div><div class=\"mat-checkbox-frame\"></div><div class=\"mat-checkbox-background\"><svg version=\"1.1\" focusable=\"false\" class=\"mat-checkbox-checkmark\" viewBox=\"0 0 24 24\" xml:space=\"preserve\"><path class=\"mat-checkbox-checkmark-path\" fill=\"none\" stroke=\"white\" d=\"M4.1,12.7 9,17.6 20.3,6.3\"/></svg><div class=\"mat-checkbox-mixedmark\"></div></div></div><span class=\"mat-checkbox-label\" #checkboxLabel (cdkObserveContent)=\"_onLabelTextChange()\"><span style=\"display:none\">&nbsp;</span><ng-content></ng-content></span></label>",
                        styles: ["@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-checkmark,.mat-checkbox-mixedmark{width:calc(100% - 4px)}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-inner-container{display:inline-block;height:20px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:20px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.66667px}.mat-checkbox-mixedmark{height:2px;opacity:0;transform:scaleX(0) rotate(0)}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox-ripple{position:absolute;left:calc(50% - 25px);top:calc(50% - 25px);height:50px;width:50px;z-index:1;pointer-events:none}"],
                        exportAs: 'matCheckbox',
                        host: {
                            'class': 'mat-checkbox',
                            '[id]': 'id',
                            '[class.mat-checkbox-indeterminate]': 'indeterminate',
                            '[class.mat-checkbox-checked]': 'checked',
                            '[class.mat-checkbox-disabled]': 'disabled',
                            '[class.mat-checkbox-label-before]': 'labelPosition == "before"',
                            '[class._mat-animation-noopable]': "_animationMode === 'NoopAnimations'",
                        },
                        providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],
                        inputs: ['disableRipple', 'color', 'tabIndex'],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
                    },]
                },
            ];
            /** @nocollapse */
            MatCheckbox.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"],},
                    {type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__["FocusMonitor"],},
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Attribute"],
                            args: ['tabindex',]
                        },]
                    },
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [MAT_CHECKBOX_CLICK_ACTION,]
                        },]
                    },
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_6__["ANIMATION_MODULE_TYPE"],]
                        },]
                    },
                ];
            };
            MatCheckbox.propDecorators = {
                "ariaLabel": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['aria-label',]},],
                "ariaLabelledby": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
                    args: ['aria-labelledby',]
                },],
                "id": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "required": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "labelPosition": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "name": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "change": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "indeterminateChange": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "value": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "_inputElement": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['input',]},],
                "ripple": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
                    args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatRipple"],]
                },],
                "checked": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "disabled": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "indeterminate": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
            };
            return MatCheckbox;
        }(_MatCheckboxMixinBase));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var /** @type {?} */ MAT_CHECKBOX_REQUIRED_VALIDATOR = {
            provide: _angular_forms__WEBPACK_IMPORTED_MODULE_4__["NG_VALIDATORS"],
            useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
                return MatCheckboxRequiredValidator;
            }),
            multi: true
        };
        /**
         * Validator for Material checkbox's required attribute in template-driven checkbox.
         * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not
         * work with `mat-checkbox`.
         */
        var MatCheckboxRequiredValidator = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatCheckboxRequiredValidator, _super);

            function MatCheckboxRequiredValidator() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            MatCheckboxRequiredValidator.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: "mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]",
                        providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],
                        host: {'[attr.required]': 'required ? "" : null'}
                    },]
                },
            ];
            return MatCheckboxRequiredValidator;
        }(_angular_forms__WEBPACK_IMPORTED_MODULE_4__["CheckboxRequiredValidator"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatCheckboxModule = /** @class */ (function () {
            function MatCheckboxModule() {
            }

            MatCheckboxModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_8__["CommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatRippleModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"], _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ObserversModule"]],
                        exports: [MatCheckbox, MatCheckboxRequiredValidator, _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"]],
                        declarations: [MatCheckbox, MatCheckboxRequiredValidator],
                    },]
                },
            ];
            return MatCheckboxModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=checkbox.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/datepicker.es5.js":
    /*!***************************************************************!*\
  !*** ./node_modules/@angular/material/esm5/datepicker.es5.js ***!
  \***************************************************************/
    /*! exports provided: MatDatepickerModule, MatCalendarHeader, MatCalendar, MatCalendarCell, MatCalendarBody, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MatDatepickerContentBase, _MatDatepickerContentMixinBase, MatDatepickerContent, MatDatepicker, matDatepickerAnimations, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, MatDatepickerInputEvent, MatDatepickerInput, MatDatepickerIntl, MatDatepickerToggleIcon, MatDatepickerToggle, MatMonthView, MatYearView, ɵa34 */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerModule", function () {
            return MatDatepickerModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCalendarHeader", function () {
            return MatCalendarHeader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCalendar", function () {
            return MatCalendar;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCalendarCell", function () {
            return MatCalendarCell;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCalendarBody", function () {
            return MatCalendarBody;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_DATEPICKER_SCROLL_STRATEGY", function () {
            return MAT_DATEPICKER_SCROLL_STRATEGY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY", function () {
            return MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER", function () {
            return MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerContentBase", function () {
            return MatDatepickerContentBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MatDatepickerContentMixinBase", function () {
            return _MatDatepickerContentMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerContent", function () {
            return MatDatepickerContent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDatepicker", function () {
            return MatDatepicker;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "matDatepickerAnimations", function () {
            return matDatepickerAnimations;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_DATEPICKER_VALUE_ACCESSOR", function () {
            return MAT_DATEPICKER_VALUE_ACCESSOR;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_DATEPICKER_VALIDATORS", function () {
            return MAT_DATEPICKER_VALIDATORS;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerInputEvent", function () {
            return MatDatepickerInputEvent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerInput", function () {
            return MatDatepickerInput;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerIntl", function () {
            return MatDatepickerIntl;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerToggleIcon", function () {
            return MatDatepickerToggleIcon;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerToggle", function () {
            return MatDatepickerToggle;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatMonthView", function () {
            return MatMonthView;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatYearView", function () {
            return MatYearView;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵa34", function () {
            return MatMultiYearView;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /* harmony import */
        var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm5/keycodes.es5.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm5/portal.es5.js");
        /* harmony import */
        var _angular_animations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm5/animations.js");
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/dialog */ "./node_modules/@angular/material/esm5/dialog.es5.js");
        /* harmony import */
        var _angular_forms__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
        /* harmony import */
        var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/form-field */ "./node_modules/@angular/material/esm5/form-field.es5.js");
        /* harmony import */
        var _angular_material_input__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/material/input */ "./node_modules/@angular/material/esm5/input.es5.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_material_button__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm5/button.es5.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * \@docs-private
         * @param {?} provider
         * @return {?}
         */
        function createMissingDateImplError(provider) {
            return Error("MatDatepicker: No provider found for " + provider + ". You must import one of the following " +
                "modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a " +
                "custom implementation.");
        }

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Datepicker data that requires internationalization.
         */
        var MatDatepickerIntl = /** @class */ (function () {
            function MatDatepickerIntl() {
                /**
                 * Stream that emits whenever the labels here are changed. Use this to notify
                 * components if the labels have changed after initialization.
                 */
                this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                /**
                 * A label for the calendar popup (used by screen readers).
                 */
                this.calendarLabel = 'Calendar';
                /**
                 * A label for the button used to open the calendar popup (used by screen readers).
                 */
                this.openCalendarLabel = 'Open calendar';
                /**
                 * A label for the previous month button (used by screen readers).
                 */
                this.prevMonthLabel = 'Previous month';
                /**
                 * A label for the next month button (used by screen readers).
                 */
                this.nextMonthLabel = 'Next month';
                /**
                 * A label for the previous year button (used by screen readers).
                 */
                this.prevYearLabel = 'Previous year';
                /**
                 * A label for the next year button (used by screen readers).
                 */
                this.nextYearLabel = 'Next year';
                /**
                 * A label for the previous multi-year button (used by screen readers).
                 */
                this.prevMultiYearLabel = 'Previous 20 years';
                /**
                 * A label for the next multi-year button (used by screen readers).
                 */
                this.nextMultiYearLabel = 'Next 20 years';
                /**
                 * A label for the 'switch to month view' button (used by screen readers).
                 */
                this.switchToMonthViewLabel = 'Choose date';
                /**
                 * A label for the 'switch to year view' button (used by screen readers).
                 */
                this.switchToMultiYearViewLabel = 'Choose month and year';
            }

            MatDatepickerIntl.decorators = [
                {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{providedIn: 'root'},]},
            ];
            /** @nocollapse */ MatDatepickerIntl.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["defineInjectable"])({
                factory: function MatDatepickerIntl_Factory() {
                    return new MatDatepickerIntl();
                }, token: MatDatepickerIntl, providedIn: "root"
            });
            return MatDatepickerIntl;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * An internal class that represents the data corresponding to a single calendar cell.
         * \@docs-private
         */
        var /**
         * An internal class that represents the data corresponding to a single calendar cell.
         * \@docs-private
         */
        MatCalendarCell = /** @class */ (function () {
            function MatCalendarCell(value, displayValue, ariaLabel, enabled) {
                this.value = value;
                this.displayValue = displayValue;
                this.ariaLabel = ariaLabel;
                this.enabled = enabled;
            }

            return MatCalendarCell;
        }());
        /**
         * An internal component used to display calendar data in a table.
         * \@docs-private
         */
        var MatCalendarBody = /** @class */ (function () {
            function MatCalendarBody(_elementRef, _ngZone) {
                this._elementRef = _elementRef;
                this._ngZone = _ngZone;
                /**
                 * The number of columns in the table.
                 */
                this.numCols = 7;
                /**
                 * Whether to allow selection of disabled cells.
                 */
                this.allowDisabledSelection = false;
                /**
                 * The cell number of the active cell in the table.
                 */
                this.activeCell = 0;
                /**
                 * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be
                 * maintained even as the table resizes.
                 */
                this.cellAspectRatio = 1;
                /**
                 * Emits when a new value is selected.
                 */
                this.selectedValueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
            }

            /**
             * @param {?} cell
             * @return {?}
             */
            MatCalendarBody.prototype._cellClicked = /**
             * @param {?} cell
             * @return {?}
             */
            function (cell) {
                if (!this.allowDisabledSelection && !cell.enabled) {
                    return;
                }
                this.selectedValueChange.emit(cell.value);
            };
            Object.defineProperty(MatCalendarBody.prototype, "_firstRowOffset", {
                /** The number of blank cells to put at the beginning for the first row. */
                get: /**
                 * The number of blank cells to put at the beginning for the first row.
                 * @return {?}
                 */
                function () {
                    return this.rows && this.rows.length && this.rows[0].length ?
                        this.numCols - this.rows[0].length : 0;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @param {?} rowIndex
             * @param {?} colIndex
             * @return {?}
             */
            MatCalendarBody.prototype._isActiveCell = /**
             * @param {?} rowIndex
             * @param {?} colIndex
             * @return {?}
             */
            function (rowIndex, colIndex) {
                var /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;
                // Account for the fact that the first row may not have as many cells.
                if (rowIndex) {
                    cellNumber -= this._firstRowOffset;
                }
                return cellNumber == this.activeCell;
            };
            /** Focuses the active cell after the microtask queue is empty. */
            /**
             * Focuses the active cell after the microtask queue is empty.
             * @return {?}
             */
            MatCalendarBody.prototype._focusActiveCell = /**
             * Focuses the active cell after the microtask queue is empty.
             * @return {?}
             */
            function () {
                var _this = this;
                this._ngZone.runOutsideAngular(function () {
                    _this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["take"])(1)).subscribe(function () {
                        _this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();
                    });
                });
            };
            MatCalendarBody.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: '[mat-calendar-body]',
                        template: "<tr *ngIf=\"_firstRowOffset < labelMinRequiredCells\" aria-hidden=\"true\"><td class=\"mat-calendar-body-label\" [attr.colspan]=\"numCols\" [style.paddingTop.%]=\"50 * cellAspectRatio / numCols\" [style.paddingBottom.%]=\"50 * cellAspectRatio / numCols\">{{label}}</td></tr><tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\"><td *ngIf=\"rowIndex === 0 && _firstRowOffset\" aria-hidden=\"true\" class=\"mat-calendar-body-label\" [attr.colspan]=\"_firstRowOffset\" [style.paddingTop.%]=\"50 * cellAspectRatio / numCols\" [style.paddingBottom.%]=\"50 * cellAspectRatio / numCols\">{{_firstRowOffset >= labelMinRequiredCells ? label : ''}}</td><td *ngFor=\"let item of row; let colIndex = index\" role=\"gridcell\" class=\"mat-calendar-body-cell\" [tabindex]=\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\" [class.mat-calendar-body-disabled]=\"!item.enabled\" [class.mat-calendar-body-active]=\"_isActiveCell(rowIndex, colIndex)\" [attr.aria-label]=\"item.ariaLabel\" [attr.aria-disabled]=\"!item.enabled || null\" (click)=\"_cellClicked(item)\" [style.width.%]=\"100 / numCols\" [style.paddingTop.%]=\"50 * cellAspectRatio / numCols\" [style.paddingBottom.%]=\"50 * cellAspectRatio / numCols\"><div class=\"mat-calendar-body-cell-content\" [class.mat-calendar-body-selected]=\"selectedValue === item.value\" [class.mat-calendar-body-today]=\"todayValue === item.value\">{{item.displayValue}}</div></td></tr>",
                        styles: [".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.71429%;padding-right:4.71429%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:0;cursor:pointer}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{position:absolute;top:5%;left:5%;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}@media screen and (-ms-high-contrast:active){.mat-calendar-body-cell-content{border:none}}@media screen and (-ms-high-contrast:active){.mat-calendar-body-selected,.mat-datepicker-popup{outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}}[dir=rtl] .mat-calendar-body-label{text-align:right}"],
                        host: {
                            'class': 'mat-calendar-body',
                            'role': 'grid',
                            'attr.aria-readonly': 'true'
                        },
                        exportAs: 'matCalendarBody',
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                    },]
                },
            ];
            /** @nocollapse */
            MatCalendarBody.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"],},
                ];
            };
            MatCalendarBody.propDecorators = {
                "label": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "rows": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "todayValue": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selectedValue": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "labelMinRequiredCells": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "numCols": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "allowDisabledSelection": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "activeCell": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "cellAspectRatio": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selectedValueChange": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
            };
            return MatCalendarBody;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var /** @type {?} */ DAYS_PER_WEEK = 7;
        /**
         * An internal component used to display a single month in the datepicker.
         * \@docs-private
         * @template D
         */
        var MatMonthView = /** @class */ (function () {
            function MatMonthView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {
                this._changeDetectorRef = _changeDetectorRef;
                this._dateFormats = _dateFormats;
                this._dateAdapter = _dateAdapter;
                this._dir = _dir;
                /**
                 * Emits when a new date is selected.
                 */
                this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Emits when any date is selected.
                 */
                this._userSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Emits when any date is activated.
                 */
                this.activeDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                if (!this._dateAdapter) {
                    throw createMissingDateImplError('DateAdapter');
                }
                if (!this._dateFormats) {
                    throw createMissingDateImplError('MAT_DATE_FORMATS');
                }
                var /** @type {?} */ firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();
                var /** @type {?} */ narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');
                var /** @type {?} */ longWeekdays = this._dateAdapter.getDayOfWeekNames('long');
                // Rotate the labels for days of the week based on the configured first day of the week.
                var /** @type {?} */ weekdays = longWeekdays.map(function (long, i) {
                    return {long: long, narrow: narrowWeekdays[i]};
                });
                this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));
                this._activeDate = this._dateAdapter.today();
            }

            Object.defineProperty(MatMonthView.prototype, "activeDate", {
                get: /**
                 * The date to display in this month view (everything other than the month and year is ignored).
                 * @return {?}
                 */
                function () {
                    return this._activeDate;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    var /** @type {?} */ oldActiveDate = this._activeDate;
                    var /** @type {?} */ validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
                    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
                    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {
                        this._init();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatMonthView.prototype, "selected", {
                get: /**
                 * The currently selected date.
                 * @return {?}
                 */
                function () {
                    return this._selected;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    this._selectedDate = this._getDateInCurrentMonth(this._selected);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatMonthView.prototype, "minDate", {
                get: /**
                 * The minimum selectable date.
                 * @return {?}
                 */
                function () {
                    return this._minDate;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatMonthView.prototype, "maxDate", {
                get: /**
                 * The maximum selectable date.
                 * @return {?}
                 */
                function () {
                    return this._maxDate;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatMonthView.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                this._init();
            };
            /** Handles when a new date is selected. */
            /**
             * Handles when a new date is selected.
             * @param {?} date
             * @return {?}
             */
            MatMonthView.prototype._dateSelected = /**
             * Handles when a new date is selected.
             * @param {?} date
             * @return {?}
             */
            function (date) {
                if (this._selectedDate != date) {
                    var /** @type {?} */ selectedYear = this._dateAdapter.getYear(this.activeDate);
                    var /** @type {?} */ selectedMonth = this._dateAdapter.getMonth(this.activeDate);
                    var /** @type {?} */ selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);
                    this.selectedChange.emit(selectedDate);
                }
                this._userSelection.emit();
            };
            /** Handles keydown events on the calendar body when calendar is in month view. */
            /**
             * Handles keydown events on the calendar body when calendar is in month view.
             * @param {?} event
             * @return {?}
             */
            MatMonthView.prototype._handleCalendarBodyKeydown = /**
             * Handles keydown events on the calendar body when calendar is in month view.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                // disabled ones from being selected. This may not be ideal, we should look into whether
                // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                var /** @type {?} */ oldActiveDate = this._activeDate;
                var /** @type {?} */ isRtl = this._isRtl();
                switch (event.keyCode) {
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["LEFT_ARROW"]:
                        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["RIGHT_ARROW"]:
                        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["UP_ARROW"]:
                        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["DOWN_ARROW"]:
                        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["HOME"]:
                        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["END"]:
                        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) -
                            this._dateAdapter.getDate(this._activeDate)));
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["PAGE_UP"]:
                        this.activeDate = event.altKey ?
                            this._dateAdapter.addCalendarYears(this._activeDate, -1) :
                            this._dateAdapter.addCalendarMonths(this._activeDate, -1);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["PAGE_DOWN"]:
                        this.activeDate = event.altKey ?
                            this._dateAdapter.addCalendarYears(this._activeDate, 1) :
                            this._dateAdapter.addCalendarMonths(this._activeDate, 1);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ENTER"]:
                        if (!this.dateFilter || this.dateFilter(this._activeDate)) {
                            this._dateSelected(this._dateAdapter.getDate(this._activeDate));
                            this._userSelection.emit();
                            // Prevent unexpected default actions such as form submission.
                            event.preventDefault();
                        }
                        return;
                    default:
                        // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                        return;
                }
                if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
                    this.activeDateChange.emit(this.activeDate);
                }
                this._focusActiveCell();
                // Prevent unexpected default actions such as form submission.
                event.preventDefault();
            };
            /** Initializes this month view. */
            /**
             * Initializes this month view.
             * @return {?}
             */
            MatMonthView.prototype._init = /**
             * Initializes this month view.
             * @return {?}
             */
            function () {
                this._selectedDate = this._getDateInCurrentMonth(this.selected);
                this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());
                this._monthLabel =
                    this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]
                        .toLocaleUpperCase();
                var /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);
                this._firstWeekOffset =
                    (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -
                        this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;
                this._createWeekCells();
                this._changeDetectorRef.markForCheck();
            };
            /** Focuses the active cell after the microtask queue is empty. */
            /**
             * Focuses the active cell after the microtask queue is empty.
             * @return {?}
             */
            MatMonthView.prototype._focusActiveCell = /**
             * Focuses the active cell after the microtask queue is empty.
             * @return {?}
             */
            function () {
                this._matCalendarBody._focusActiveCell();
            };
            /**
             * Creates MatCalendarCells for the dates in this month.
             * @return {?}
             */
            MatMonthView.prototype._createWeekCells = /**
             * Creates MatCalendarCells for the dates in this month.
             * @return {?}
             */
            function () {
                var /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);
                var /** @type {?} */ dateNames = this._dateAdapter.getDateNames();
                this._weeks = [[]];
                for (var /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {
                    if (cell == DAYS_PER_WEEK) {
                        this._weeks.push([]);
                        cell = 0;
                    }
                    var /** @type {?} */ date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);
                    var /** @type {?} */ enabled = this._shouldEnableDate(date);
                    var /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);
                    this._weeks[this._weeks.length - 1]
                        .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));
                }
            };
            /**
             * Date filter for the month
             * @param {?} date
             * @return {?}
             */
            MatMonthView.prototype._shouldEnableDate = /**
             * Date filter for the month
             * @param {?} date
             * @return {?}
             */
            function (date) {
                return !!date &&
                    (!this.dateFilter || this.dateFilter(date)) &&
                    (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&
                    (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);
            };
            /**
             * Gets the date in this month that the given Date falls on.
             * Returns null if the given Date is in another month.
             * @param {?} date
             * @return {?}
             */
            MatMonthView.prototype._getDateInCurrentMonth = /**
             * Gets the date in this month that the given Date falls on.
             * Returns null if the given Date is in another month.
             * @param {?} date
             * @return {?}
             */
            function (date) {
                return date && this._hasSameMonthAndYear(date, this.activeDate) ?
                    this._dateAdapter.getDate(date) : null;
            };
            /**
             * Checks whether the 2 dates are non-null and fall within the same month of the same year.
             * @param {?} d1
             * @param {?} d2
             * @return {?}
             */
            MatMonthView.prototype._hasSameMonthAndYear = /**
             * Checks whether the 2 dates are non-null and fall within the same month of the same year.
             * @param {?} d1
             * @param {?} d2
             * @return {?}
             */
            function (d1, d2) {
                return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&
                    this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));
            };
            /**
             * @param {?} obj The object to check.
             * @return {?} The given object if it is both a date instance and valid, otherwise null.
             */
            MatMonthView.prototype._getValidDateOrNull = /**
             * @param {?} obj The object to check.
             * @return {?} The given object if it is both a date instance and valid, otherwise null.
             */
            function (obj) {
                return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
            };
            /**
             * Determines whether the user has the RTL layout direction.
             * @return {?}
             */
            MatMonthView.prototype._isRtl = /**
             * Determines whether the user has the RTL layout direction.
             * @return {?}
             */
            function () {
                return this._dir && this._dir.value === 'rtl';
            };
            MatMonthView.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-month-view',
                        template: "<table class=\"mat-calendar-table\"><thead class=\"mat-calendar-table-header\"><tr><th *ngFor=\"let day of _weekdays\" [attr.aria-label]=\"day.long\">{{day.narrow}}</th></tr><tr><th class=\"mat-calendar-table-header-divider\" colspan=\"7\" aria-hidden=\"true\"></th></tr></thead><tbody mat-calendar-body [label]=\"_monthLabel\" [rows]=\"_weeks\" [todayValue]=\"_todayDate\" [selectedValue]=\"_selectedDate\" [labelMinRequiredCells]=\"3\" [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\" (selectedValueChange)=\"_dateSelected($event)\" (keydown)=\"_handleCalendarBodyKeydown($event)\"></tbody></table>",
                        exportAs: 'matMonthView',
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
                    },]
                },
            ];
            /** @nocollapse */
            MatMonthView.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"],},
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MAT_DATE_FORMATS"],]
                        },]
                    },
                    {
                        type: _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                    {
                        type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                ];
            };
            MatMonthView.propDecorators = {
                "activeDate": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selected": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "minDate": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "maxDate": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "dateFilter": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selectedChange": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "_userSelection": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "activeDateChange": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "_matCalendarBody": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
                    args: [MatCalendarBody,]
                },],
            };
            return MatMonthView;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var /** @type {?} */ yearsPerPage = 24;
        var /** @type {?} */ yearsPerRow = 4;
        /**
         * An internal component used to display a year selector in the datepicker.
         * \@docs-private
         * @template D
         */
        var MatMultiYearView = /** @class */ (function () {
            function MatMultiYearView(_changeDetectorRef, _dateAdapter, _dir) {
                this._changeDetectorRef = _changeDetectorRef;
                this._dateAdapter = _dateAdapter;
                this._dir = _dir;
                /**
                 * Emits when a new year is selected.
                 */
                this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Emits the selected year. This doesn't imply a change on the selected date
                 */
                this.yearSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                if (!this._dateAdapter) {
                    throw createMissingDateImplError('DateAdapter');
                }
                this._activeDate = this._dateAdapter.today();
            }

            Object.defineProperty(MatMultiYearView.prototype, "activeDate", {
                get: /**
                 * The date to display in this multi-year view (everything other than the year is ignored).
                 * @return {?}
                 */
                function () {
                    return this._activeDate;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    var /** @type {?} */ oldActiveDate = this._activeDate;
                    var /** @type {?} */ validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
                    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
                    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=
                        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {
                        this._init();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatMultiYearView.prototype, "selected", {
                get: /**
                 * The currently selected date.
                 * @return {?}
                 */
                function () {
                    return this._selected;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatMultiYearView.prototype, "minDate", {
                get: /**
                 * The minimum selectable date.
                 * @return {?}
                 */
                function () {
                    return this._minDate;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatMultiYearView.prototype, "maxDate", {
                get: /**
                 * The maximum selectable date.
                 * @return {?}
                 */
                function () {
                    return this._maxDate;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatMultiYearView.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                this._init();
            };
            /** Initializes this multi-year view. */
            /**
             * Initializes this multi-year view.
             * @return {?}
             */
            MatMultiYearView.prototype._init = /**
             * Initializes this multi-year view.
             * @return {?}
             */
            function () {
                var _this = this;
                this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());
                var /** @type {?} */ activeYear = this._dateAdapter.getYear(this._activeDate);
                var /** @type {?} */ activeOffset = activeYear % yearsPerPage;
                this._years = [];
                for (var /** @type {?} */ i = 0, /** @type {?} */ row = []; i < yearsPerPage; i++) {
                    row.push(activeYear - activeOffset + i);
                    if (row.length == yearsPerRow) {
                        this._years.push(row.map(function (year) {
                            return _this._createCellForYear(year);
                        }));
                        row = [];
                    }
                }
                this._changeDetectorRef.markForCheck();
            };
            /** Handles when a new year is selected. */
            /**
             * Handles when a new year is selected.
             * @param {?} year
             * @return {?}
             */
            MatMultiYearView.prototype._yearSelected = /**
             * Handles when a new year is selected.
             * @param {?} year
             * @return {?}
             */
            function (year) {
                this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));
                var /** @type {?} */ month = this._dateAdapter.getMonth(this.activeDate);
                var /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));
                this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));
            };
            /** Handles keydown events on the calendar body when calendar is in multi-year view. */
            /**
             * Handles keydown events on the calendar body when calendar is in multi-year view.
             * @param {?} event
             * @return {?}
             */
            MatMultiYearView.prototype._handleCalendarBodyKeydown = /**
             * Handles keydown events on the calendar body when calendar is in multi-year view.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                // disabled ones from being selected. This may not be ideal, we should look into whether
                // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                var /** @type {?} */ isRtl = this._isRtl();
                switch (event.keyCode) {
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["LEFT_ARROW"]:
                        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["RIGHT_ARROW"]:
                        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["UP_ARROW"]:
                        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["DOWN_ARROW"]:
                        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["HOME"]:
                        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["END"]:
                        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["PAGE_UP"]:
                        this.activeDate =
                            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["PAGE_DOWN"]:
                        this.activeDate =
                            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ENTER"]:
                        this._yearSelected(this._dateAdapter.getYear(this._activeDate));
                        break;
                    default:
                        // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                        return;
                }
                this._focusActiveCell();
                // Prevent unexpected default actions such as form submission.
                event.preventDefault();
            };
            /**
             * @return {?}
             */
            MatMultiYearView.prototype._getActiveCell = /**
             * @return {?}
             */
            function () {
                return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;
            };
            /** Focuses the active cell after the microtask queue is empty. */
            /**
             * Focuses the active cell after the microtask queue is empty.
             * @return {?}
             */
            MatMultiYearView.prototype._focusActiveCell = /**
             * Focuses the active cell after the microtask queue is empty.
             * @return {?}
             */
            function () {
                this._matCalendarBody._focusActiveCell();
            };
            /**
             * Creates an MatCalendarCell for the given year.
             * @param {?} year
             * @return {?}
             */
            MatMultiYearView.prototype._createCellForYear = /**
             * Creates an MatCalendarCell for the given year.
             * @param {?} year
             * @return {?}
             */
            function (year) {
                var /** @type {?} */ yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));
                return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));
            };
            /**
             * Whether the given year is enabled.
             * @param {?} year
             * @return {?}
             */
            MatMultiYearView.prototype._shouldEnableYear = /**
             * Whether the given year is enabled.
             * @param {?} year
             * @return {?}
             */
            function (year) {
                // disable if the year is greater than maxDate lower than minDate
                if (year === undefined || year === null ||
                    (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||
                    (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {
                    return false;
                }
                // enable if it reaches here and there's no filter defined
                if (!this.dateFilter) {
                    return true;
                }
                var /** @type {?} */ firstOfYear = this._dateAdapter.createDate(year, 0, 1);
                // If any date in the year is enabled count the year as enabled.
                for (var /** @type {?} */ date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {
                    if (this.dateFilter(date)) {
                        return true;
                    }
                }
                return false;
            };
            /**
             * @param {?} obj The object to check.
             * @return {?} The given object if it is both a date instance and valid, otherwise null.
             */
            MatMultiYearView.prototype._getValidDateOrNull = /**
             * @param {?} obj The object to check.
             * @return {?} The given object if it is both a date instance and valid, otherwise null.
             */
            function (obj) {
                return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
            };
            /**
             * Determines whether the user has the RTL layout direction.
             * @return {?}
             */
            MatMultiYearView.prototype._isRtl = /**
             * Determines whether the user has the RTL layout direction.
             * @return {?}
             */
            function () {
                return this._dir && this._dir.value === 'rtl';
            };
            MatMultiYearView.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-multi-year-view',
                        template: "<table class=\"mat-calendar-table\"><thead class=\"mat-calendar-table-header\"><tr><th class=\"mat-calendar-table-header-divider\" colspan=\"4\"></th></tr></thead><tbody mat-calendar-body allowDisabledSelection=\"true\" [rows]=\"_years\" [todayValue]=\"_todayYear\" [selectedValue]=\"_selectedYear\" [numCols]=\"4\" [cellAspectRatio]=\"4 / 7\" [activeCell]=\"_getActiveCell()\" (selectedValueChange)=\"_yearSelected($event)\" (keydown)=\"_handleCalendarBodyKeydown($event)\"></tbody></table>",
                        exportAs: 'matMultiYearView',
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
                    },]
                },
            ];
            /** @nocollapse */
            MatMultiYearView.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"],},
                    {
                        type: _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                    {
                        type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                ];
            };
            MatMultiYearView.propDecorators = {
                "activeDate": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selected": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "minDate": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "maxDate": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "dateFilter": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selectedChange": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "yearSelected": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "_matCalendarBody": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
                    args: [MatCalendarBody,]
                },],
            };
            return MatMultiYearView;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * An internal component used to display a single year in the datepicker.
         * \@docs-private
         * @template D
         */
        var MatYearView = /** @class */ (function () {
            function MatYearView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {
                this._changeDetectorRef = _changeDetectorRef;
                this._dateFormats = _dateFormats;
                this._dateAdapter = _dateAdapter;
                this._dir = _dir;
                /**
                 * Emits when a new month is selected.
                 */
                this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Emits the selected month. This doesn't imply a change on the selected date
                 */
                this.monthSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                if (!this._dateAdapter) {
                    throw createMissingDateImplError('DateAdapter');
                }
                if (!this._dateFormats) {
                    throw createMissingDateImplError('MAT_DATE_FORMATS');
                }
                this._activeDate = this._dateAdapter.today();
            }

            Object.defineProperty(MatYearView.prototype, "activeDate", {
                get: /**
                 * The date to display in this year view (everything other than the year is ignored).
                 * @return {?}
                 */
                function () {
                    return this._activeDate;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    var /** @type {?} */ oldActiveDate = this._activeDate;
                    var /** @type {?} */ validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();
                    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
                    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {
                        this._init();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatYearView.prototype, "selected", {
                get: /**
                 * The currently selected date.
                 * @return {?}
                 */
                function () {
                    return this._selected;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    this._selectedMonth = this._getMonthInCurrentYear(this._selected);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatYearView.prototype, "minDate", {
                get: /**
                 * The minimum selectable date.
                 * @return {?}
                 */
                function () {
                    return this._minDate;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatYearView.prototype, "maxDate", {
                get: /**
                 * The maximum selectable date.
                 * @return {?}
                 */
                function () {
                    return this._maxDate;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatYearView.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                this._init();
            };
            /** Handles when a new month is selected. */
            /**
             * Handles when a new month is selected.
             * @param {?} month
             * @return {?}
             */
            MatYearView.prototype._monthSelected = /**
             * Handles when a new month is selected.
             * @param {?} month
             * @return {?}
             */
            function (month) {
                var /** @type {?} */ normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);
                this.monthSelected.emit(normalizedDate);
                var /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);
                this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));
            };
            /** Handles keydown events on the calendar body when calendar is in year view. */
            /**
             * Handles keydown events on the calendar body when calendar is in year view.
             * @param {?} event
             * @return {?}
             */
            MatYearView.prototype._handleCalendarBodyKeydown = /**
             * Handles keydown events on the calendar body when calendar is in year view.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
                // disabled ones from being selected. This may not be ideal, we should look into whether
                // navigation should skip over disabled dates, and if so, how to implement that efficiently.
                var /** @type {?} */ isRtl = this._isRtl();
                switch (event.keyCode) {
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["LEFT_ARROW"]:
                        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["RIGHT_ARROW"]:
                        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["UP_ARROW"]:
                        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["DOWN_ARROW"]:
                        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["HOME"]:
                        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["END"]:
                        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["PAGE_UP"]:
                        this.activeDate =
                            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["PAGE_DOWN"]:
                        this.activeDate =
                            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ENTER"]:
                        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));
                        break;
                    default:
                        // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                        return;
                }
                this._focusActiveCell();
                // Prevent unexpected default actions such as form submission.
                event.preventDefault();
            };
            /** Initializes this year view. */
            /**
             * Initializes this year view.
             * @return {?}
             */
            MatYearView.prototype._init = /**
             * Initializes this year view.
             * @return {?}
             */
            function () {
                var _this = this;
                this._selectedMonth = this._getMonthInCurrentYear(this.selected);
                this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());
                this._yearLabel = this._dateAdapter.getYearName(this.activeDate);
                var /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');
                // First row of months only contains 5 elements so we can fit the year label on the same row.
                this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(function (row) {
                    return row.map(function (month) {
                        return _this._createCellForMonth(month, monthNames[month]);
                    });
                });
                this._changeDetectorRef.markForCheck();
            };
            /** Focuses the active cell after the microtask queue is empty. */
            /**
             * Focuses the active cell after the microtask queue is empty.
             * @return {?}
             */
            MatYearView.prototype._focusActiveCell = /**
             * Focuses the active cell after the microtask queue is empty.
             * @return {?}
             */
            function () {
                this._matCalendarBody._focusActiveCell();
            };
            /**
             * Gets the month in this year that the given Date falls on.
             * Returns null if the given Date is in another year.
             * @param {?} date
             * @return {?}
             */
            MatYearView.prototype._getMonthInCurrentYear = /**
             * Gets the month in this year that the given Date falls on.
             * Returns null if the given Date is in another year.
             * @param {?} date
             * @return {?}
             */
            function (date) {
                return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?
                    this._dateAdapter.getMonth(date) : null;
            };
            /**
             * Creates an MatCalendarCell for the given month.
             * @param {?} month
             * @param {?} monthName
             * @return {?}
             */
            MatYearView.prototype._createCellForMonth = /**
             * Creates an MatCalendarCell for the given month.
             * @param {?} month
             * @param {?} monthName
             * @return {?}
             */
            function (month, monthName) {
                var /** @type {?} */ ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);
                return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));
            };
            /**
             * Whether the given month is enabled.
             * @param {?} month
             * @return {?}
             */
            MatYearView.prototype._shouldEnableMonth = /**
             * Whether the given month is enabled.
             * @param {?} month
             * @return {?}
             */
            function (month) {
                var /** @type {?} */ activeYear = this._dateAdapter.getYear(this.activeDate);
                if (month === undefined || month === null ||
                    this._isYearAndMonthAfterMaxDate(activeYear, month) ||
                    this._isYearAndMonthBeforeMinDate(activeYear, month)) {
                    return false;
                }
                if (!this.dateFilter) {
                    return true;
                }
                var /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);
                // If any date in the month is enabled count the month as enabled.
                for (var /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {
                    if (this.dateFilter(date)) {
                        return true;
                    }
                }
                return false;
            };
            /**
             * Tests whether the combination month/year is after this.maxDate, considering
             * just the month and year of this.maxDate
             * @param {?} year
             * @param {?} month
             * @return {?}
             */
            MatYearView.prototype._isYearAndMonthAfterMaxDate = /**
             * Tests whether the combination month/year is after this.maxDate, considering
             * just the month and year of this.maxDate
             * @param {?} year
             * @param {?} month
             * @return {?}
             */
            function (year, month) {
                if (this.maxDate) {
                    var /** @type {?} */ maxYear = this._dateAdapter.getYear(this.maxDate);
                    var /** @type {?} */ maxMonth = this._dateAdapter.getMonth(this.maxDate);
                    return year > maxYear || (year === maxYear && month > maxMonth);
                }
                return false;
            };
            /**
             * Tests whether the combination month/year is before this.minDate, considering
             * just the month and year of this.minDate
             * @param {?} year
             * @param {?} month
             * @return {?}
             */
            MatYearView.prototype._isYearAndMonthBeforeMinDate = /**
             * Tests whether the combination month/year is before this.minDate, considering
             * just the month and year of this.minDate
             * @param {?} year
             * @param {?} month
             * @return {?}
             */
            function (year, month) {
                if (this.minDate) {
                    var /** @type {?} */ minYear = this._dateAdapter.getYear(this.minDate);
                    var /** @type {?} */ minMonth = this._dateAdapter.getMonth(this.minDate);
                    return year < minYear || (year === minYear && month < minMonth);
                }
                return false;
            };
            /**
             * @param {?} obj The object to check.
             * @return {?} The given object if it is both a date instance and valid, otherwise null.
             */
            MatYearView.prototype._getValidDateOrNull = /**
             * @param {?} obj The object to check.
             * @return {?} The given object if it is both a date instance and valid, otherwise null.
             */
            function (obj) {
                return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
            };
            /**
             * Determines whether the user has the RTL layout direction.
             * @return {?}
             */
            MatYearView.prototype._isRtl = /**
             * Determines whether the user has the RTL layout direction.
             * @return {?}
             */
            function () {
                return this._dir && this._dir.value === 'rtl';
            };
            MatYearView.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-year-view',
                        template: "<table class=\"mat-calendar-table\"><thead class=\"mat-calendar-table-header\"><tr><th class=\"mat-calendar-table-header-divider\" colspan=\"4\"></th></tr></thead><tbody mat-calendar-body allowDisabledSelection=\"true\" [label]=\"_yearLabel\" [rows]=\"_months\" [todayValue]=\"_todayMonth\" [selectedValue]=\"_selectedMonth\" [labelMinRequiredCells]=\"2\" [numCols]=\"4\" [cellAspectRatio]=\"4 / 7\" [activeCell]=\"_dateAdapter.getMonth(activeDate)\" (selectedValueChange)=\"_monthSelected($event)\" (keydown)=\"_handleCalendarBodyKeydown($event)\"></tbody></table>",
                        exportAs: 'matYearView',
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
                    },]
                },
            ];
            /** @nocollapse */
            MatYearView.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"],},
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MAT_DATE_FORMATS"],]
                        },]
                    },
                    {
                        type: _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                    {
                        type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                ];
            };
            MatYearView.propDecorators = {
                "activeDate": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selected": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "minDate": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "maxDate": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "dateFilter": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selectedChange": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "monthSelected": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "_matCalendarBody": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
                    args: [MatCalendarBody,]
                },],
            };
            return MatYearView;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Default header for MatCalendar
         * @template D
         */
        var MatCalendarHeader = /** @class */ (function () {
            function MatCalendarHeader(_intl, calendar, _dateAdapter, _dateFormats, changeDetectorRef) {
                this._intl = _intl;
                this.calendar = calendar;
                this._dateAdapter = _dateAdapter;
                this._dateFormats = _dateFormats;
                this.calendar.stateChanges.subscribe(function () {
                    return changeDetectorRef.markForCheck();
                });
            }

            Object.defineProperty(MatCalendarHeader.prototype, "periodButtonText", {
                /** The label for the current calendar view. */
                get: /**
                 * The label for the current calendar view.
                 * @return {?}
                 */
                function () {
                    if (this.calendar.currentView == 'month') {
                        return this._dateAdapter
                            .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)
                            .toLocaleUpperCase();
                    }
                    if (this.calendar.currentView == 'year') {
                        return this._dateAdapter.getYearName(this.calendar.activeDate);
                    }
                    var /** @type {?} */ activeYear = this._dateAdapter.getYear(this.calendar.activeDate);
                    var /** @type {?} */ firstYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));
                    var /** @type {?} */ lastYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));
                    return firstYearInView + " \u2013 " + lastYearInView;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatCalendarHeader.prototype, "periodButtonLabel", {
                get: /**
                 * @return {?}
                 */
                function () {
                    return this.calendar.currentView == 'month' ?
                        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatCalendarHeader.prototype, "prevButtonLabel", {
                /** The label for the the previous button. */
                get: /**
                 * The label for the the previous button.
                 * @return {?}
                 */
                function () {
                    return {
                        'month': this._intl.prevMonthLabel,
                        'year': this._intl.prevYearLabel,
                        'multi-year': this._intl.prevMultiYearLabel
                    }[this.calendar.currentView];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatCalendarHeader.prototype, "nextButtonLabel", {
                /** The label for the the next button. */
                get: /**
                 * The label for the the next button.
                 * @return {?}
                 */
                function () {
                    return {
                        'month': this._intl.nextMonthLabel,
                        'year': this._intl.nextYearLabel,
                        'multi-year': this._intl.nextMultiYearLabel
                    }[this.calendar.currentView];
                },
                enumerable: true,
                configurable: true
            });
            /** Handles user clicks on the period label. */
            /**
             * Handles user clicks on the period label.
             * @return {?}
             */
            MatCalendarHeader.prototype.currentPeriodClicked = /**
             * Handles user clicks on the period label.
             * @return {?}
             */
            function () {
                this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';
            };
            /** Handles user clicks on the previous button. */
            /**
             * Handles user clicks on the previous button.
             * @return {?}
             */
            MatCalendarHeader.prototype.previousClicked = /**
             * Handles user clicks on the previous button.
             * @return {?}
             */
            function () {
                this.calendar.activeDate = this.calendar.currentView == 'month' ?
                    this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :
                    this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);
            };
            /** Handles user clicks on the next button. */
            /**
             * Handles user clicks on the next button.
             * @return {?}
             */
            MatCalendarHeader.prototype.nextClicked = /**
             * Handles user clicks on the next button.
             * @return {?}
             */
            function () {
                this.calendar.activeDate = this.calendar.currentView == 'month' ?
                    this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :
                    this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);
            };
            /** Whether the previous period button is enabled. */
            /**
             * Whether the previous period button is enabled.
             * @return {?}
             */
            MatCalendarHeader.prototype.previousEnabled = /**
             * Whether the previous period button is enabled.
             * @return {?}
             */
            function () {
                if (!this.calendar.minDate) {
                    return true;
                }
                return !this.calendar.minDate ||
                    !this._isSameView(this.calendar.activeDate, this.calendar.minDate);
            };
            /** Whether the next period button is enabled. */
            /**
             * Whether the next period button is enabled.
             * @return {?}
             */
            MatCalendarHeader.prototype.nextEnabled = /**
             * Whether the next period button is enabled.
             * @return {?}
             */
            function () {
                return !this.calendar.maxDate ||
                    !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);
            };
            /**
             * Whether the two dates represent the same view in the current view mode (month or year).
             * @param {?} date1
             * @param {?} date2
             * @return {?}
             */
            MatCalendarHeader.prototype._isSameView = /**
             * Whether the two dates represent the same view in the current view mode (month or year).
             * @param {?} date1
             * @param {?} date2
             * @return {?}
             */
            function (date1, date2) {
                if (this.calendar.currentView == 'month') {
                    return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&
                        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);
                }
                if (this.calendar.currentView == 'year') {
                    return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);
                }
                // Otherwise we are in 'multi-year' view.
                return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==
                    Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);
            };
            MatCalendarHeader.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-calendar-header',
                        template: "<div class=\"mat-calendar-header\"><div class=\"mat-calendar-controls\"><button mat-button type=\"button\" class=\"mat-calendar-period-button\" (click)=\"currentPeriodClicked()\" [attr.aria-label]=\"periodButtonLabel\">{{periodButtonText}}<div class=\"mat-calendar-arrow\" [class.mat-calendar-invert]=\"calendar.currentView != 'month'\"></div></button><div class=\"mat-calendar-spacer\"></div><button mat-icon-button type=\"button\" class=\"mat-calendar-previous-button\" [disabled]=\"!previousEnabled()\" (click)=\"previousClicked()\" [attr.aria-label]=\"prevButtonLabel\"></button> <button mat-icon-button type=\"button\" class=\"mat-calendar-next-button\" [disabled]=\"!nextEnabled()\" (click)=\"nextClicked()\" [attr.aria-label]=\"nextButtonLabel\"></button></div></div>",
                        exportAs: 'matCalendarHeader',
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                    },]
                },
            ];
            /** @nocollapse */
            MatCalendarHeader.ctorParameters = function () {
                return [
                    {type: MatDatepickerIntl,},
                    {
                        type: MatCalendar,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
                                return MatCalendar;
                            }),]
                        },]
                    },
                    {
                        type: _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MAT_DATE_FORMATS"],]
                        },]
                    },
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"],},
                ];
            };
            return MatCalendarHeader;
        }());
        /**
         * A calendar that is used as part of the datepicker.
         * \@docs-private
         * @template D
         */
        var MatCalendar = /** @class */ (function () {
            function MatCalendar(_intl, _dateAdapter, _dateFormats, changeDetectorRef) {
                var _this = this;
                this._dateAdapter = _dateAdapter;
                this._dateFormats = _dateFormats;
                /**
                 * Used for scheduling that focus should be moved to the active cell on the next tick.
                 * We need to schedule it, rather than do it immediately, because we have to wait
                 * for Angular to re-evaluate the view children.
                 */
                this._moveFocusOnNextTick = false;
                /**
                 * Whether the calendar should be started in month or year view.
                 */
                this.startView = 'month';
                /**
                 * Emits when the currently selected date changes.
                 */
                this.selectedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Emits the year chosen in multiyear view.
                 * This doesn't imply a change on the selected date.
                 */
                this.yearSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Emits the month chosen in year view.
                 * This doesn't imply a change on the selected date.
                 */
                this.monthSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Emits when any date is selected.
                 */
                this._userSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Emits whenever there is a state change that the header may need to respond to.
                 */
                this.stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                if (!this._dateAdapter) {
                    throw createMissingDateImplError('DateAdapter');
                }
                if (!this._dateFormats) {
                    throw createMissingDateImplError('MAT_DATE_FORMATS');
                }
                this._intlChanges = _intl.changes.subscribe(function () {
                    changeDetectorRef.markForCheck();
                    _this.stateChanges.next();
                });
            }

            Object.defineProperty(MatCalendar.prototype, "startAt", {
                get: /**
                 * A date representing the period (month or year) to start the calendar in.
                 * @return {?}
                 */
                function () {
                    return this._startAt;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatCalendar.prototype, "selected", {
                get: /**
                 * The currently selected date.
                 * @return {?}
                 */
                function () {
                    return this._selected;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatCalendar.prototype, "minDate", {
                get: /**
                 * The minimum selectable date.
                 * @return {?}
                 */
                function () {
                    return this._minDate;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatCalendar.prototype, "maxDate", {
                get: /**
                 * The maximum selectable date.
                 * @return {?}
                 */
                function () {
                    return this._maxDate;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatCalendar.prototype, "activeDate", {
                /**
                 * The current active date. This determines which time period is shown and which date is
                 * highlighted when using keyboard navigation.
                 */
                get: /**
                 * The current active date. This determines which time period is shown and which date is
                 * highlighted when using keyboard navigation.
                 * @return {?}
                 */
                function () {
                    return this._clampedActiveDate;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);
                    this.stateChanges.next();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatCalendar.prototype, "currentView", {
                /** Whether the calendar is in month view. */
                get: /**
                 * Whether the calendar is in month view.
                 * @return {?}
                 */
                function () {
                    return this._currentView;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._currentView = value;
                    this._moveFocusOnNextTick = true;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatCalendar.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                this._calendarHeaderPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__["ComponentPortal"](this.headerComponent || MatCalendarHeader);
                this.activeDate = this.startAt || this._dateAdapter.today();
                // Assign to the private property since we don't want to move focus on init.
                this._currentView = this.startView;
            };
            /**
             * @return {?}
             */
            MatCalendar.prototype.ngAfterViewChecked = /**
             * @return {?}
             */
            function () {
                if (this._moveFocusOnNextTick) {
                    this._moveFocusOnNextTick = false;
                    this.focusActiveCell();
                }
            };
            /**
             * @return {?}
             */
            MatCalendar.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._intlChanges.unsubscribe();
                this.stateChanges.complete();
            };
            /**
             * @param {?} changes
             * @return {?}
             */
            MatCalendar.prototype.ngOnChanges = /**
             * @param {?} changes
             * @return {?}
             */
            function (changes) {
                var /** @type {?} */ change = changes["minDate"] || changes["maxDate"] || changes["dateFilter"];
                if (change && !change.firstChange) {
                    var /** @type {?} */ view = this._getCurrentViewComponent();
                    if (view) {
                        view._init();
                    }
                }
                this.stateChanges.next();
            };
            /**
             * @return {?}
             */
            MatCalendar.prototype.focusActiveCell = /**
             * @return {?}
             */
            function () {
                this._getCurrentViewComponent()._focusActiveCell();
            };
            /** Handles date selection in the month view. */
            /**
             * Handles date selection in the month view.
             * @param {?} date
             * @return {?}
             */
            MatCalendar.prototype._dateSelected = /**
             * Handles date selection in the month view.
             * @param {?} date
             * @return {?}
             */
            function (date) {
                if (!this._dateAdapter.sameDate(date, this.selected)) {
                    this.selectedChange.emit(date);
                }
            };
            /** Handles year selection in the multiyear view. */
            /**
             * Handles year selection in the multiyear view.
             * @param {?} normalizedYear
             * @return {?}
             */
            MatCalendar.prototype._yearSelectedInMultiYearView = /**
             * Handles year selection in the multiyear view.
             * @param {?} normalizedYear
             * @return {?}
             */
            function (normalizedYear) {
                this.yearSelected.emit(normalizedYear);
            };
            /** Handles month selection in the year view. */
            /**
             * Handles month selection in the year view.
             * @param {?} normalizedMonth
             * @return {?}
             */
            MatCalendar.prototype._monthSelectedInYearView = /**
             * Handles month selection in the year view.
             * @param {?} normalizedMonth
             * @return {?}
             */
            function (normalizedMonth) {
                this.monthSelected.emit(normalizedMonth);
            };
            /**
             * @return {?}
             */
            MatCalendar.prototype._userSelected = /**
             * @return {?}
             */
            function () {
                this._userSelection.emit();
            };
            /** Handles year/month selection in the multi-year/year views. */
            /**
             * Handles year/month selection in the multi-year/year views.
             * @param {?} date
             * @param {?} view
             * @return {?}
             */
            MatCalendar.prototype._goToDateInView = /**
             * Handles year/month selection in the multi-year/year views.
             * @param {?} date
             * @param {?} view
             * @return {?}
             */
            function (date, view) {
                this.activeDate = date;
                this.currentView = view;
            };
            /**
             * @param {?} obj The object to check.
             * @return {?} The given object if it is both a date instance and valid, otherwise null.
             */
            MatCalendar.prototype._getValidDateOrNull = /**
             * @param {?} obj The object to check.
             * @return {?} The given object if it is both a date instance and valid, otherwise null.
             */
            function (obj) {
                return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
            };
            /**
             * Returns the component instance that corresponds to the current calendar view.
             * @return {?}
             */
            MatCalendar.prototype._getCurrentViewComponent = /**
             * Returns the component instance that corresponds to the current calendar view.
             * @return {?}
             */
            function () {
                return this.monthView || this.yearView || this.multiYearView;
            };
            MatCalendar.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-calendar',
                        template: "<ng-template [cdkPortalOutlet]=\"_calendarHeaderPortal\"></ng-template><div class=\"mat-calendar-content\" [ngSwitch]=\"currentView\" cdkMonitorSubtreeFocus tabindex=\"-1\"><mat-month-view *ngSwitchCase=\"'month'\" [(activeDate)]=\"activeDate\" [selected]=\"selected\" [dateFilter]=\"dateFilter\" [maxDate]=\"maxDate\" [minDate]=\"minDate\" (selectedChange)=\"_dateSelected($event)\" (_userSelection)=\"_userSelected()\"></mat-month-view><mat-year-view *ngSwitchCase=\"'year'\" [activeDate]=\"activeDate\" [selected]=\"selected\" [dateFilter]=\"dateFilter\" [maxDate]=\"maxDate\" [minDate]=\"minDate\" (monthSelected)=\"_monthSelectedInYearView($event)\" (selectedChange)=\"_goToDateInView($event, 'month')\"></mat-year-view><mat-multi-year-view *ngSwitchCase=\"'multi-year'\" [activeDate]=\"activeDate\" [selected]=\"selected\" [dateFilter]=\"dateFilter\" [maxDate]=\"maxDate\" [minDate]=\"minDate\" (yearSelected)=\"_yearSelectedInMultiYearView($event)\" (selectedChange)=\"_goToDateInView($event, 'year')\"></mat-multi-year-view></div>",
                        styles: [".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:'';margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:'';position:absolute;top:0;left:-8px;right:-8px;height:1px}"],
                        host: {
                            'class': 'mat-calendar',
                        },
                        exportAs: 'matCalendar',
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                    },]
                },
            ];
            /** @nocollapse */
            MatCalendar.ctorParameters = function () {
                return [
                    {type: MatDatepickerIntl,},
                    {
                        type: _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MAT_DATE_FORMATS"],]
                        },]
                    },
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"],},
                ];
            };
            MatCalendar.propDecorators = {
                "headerComponent": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "startAt": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "startView": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selected": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "minDate": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "maxDate": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "dateFilter": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selectedChange": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "yearSelected": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "monthSelected": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "_userSelection": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "monthView": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [MatMonthView,]},],
                "yearView": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [MatYearView,]},],
                "multiYearView": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
                    args: [MatMultiYearView,]
                },],
            };
            return MatCalendar;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Animations used by the Material datepicker.
         */
        var /** @type {?} */ matDatepickerAnimations = {
            /** Transforms the height of the datepicker's calendar. */
            transformPanel: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["trigger"])('transformPanel', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({
                    opacity: 0,
                    transform: 'scale(1, 0)'
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["state"])('enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({
                    opacity: 1,
                    transform: 'scale(1, 1)'
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["transition"])('void => enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["group"])([
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["query"])('@fadeInCalendar', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["animateChild"])()),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["animate"])('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')
                ])),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["transition"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["animate"])('100ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({opacity: 0})))
            ]),
            /** Fades in the content of the calendar. */
            fadeInCalendar: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["trigger"])('fadeInCalendar', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({opacity: 0})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["state"])('enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["style"])({opacity: 1})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["transition"])('void => *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_7__["animate"])('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))
            ])
        };

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Used to generate a unique ID for each datepicker instance.
         */
        var /** @type {?} */ datepickerUid = 0;
        /**
         * Injection token that determines the scroll handling while the calendar is open.
         */
        var /** @type {?} */ MAT_DATEPICKER_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-datepicker-scroll-strategy');

        /**
         * \@docs-private
         * @param {?} overlay
         * @return {?}
         */
        function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {
            return function () {
                return overlay.scrollStrategies.reposition();
            };
        }

        /**
         * \@docs-private
         */
        var /** @type {?} */ MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {
            provide: MAT_DATEPICKER_SCROLL_STRATEGY,
            deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_10__["Overlay"]],
            useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,
        };
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatDatepickerContentBase = /** @class */ (function () {
            function MatDatepickerContentBase(_elementRef) {
                this._elementRef = _elementRef;
            }

            return MatDatepickerContentBase;
        }());
        var /** @type {?} */ _MatDatepickerContentMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["mixinColor"])(MatDatepickerContentBase);
        /**
         * Component used as the content for the datepicker dialog and popup. We use this instead of using
         * MatCalendar directly as the content so we can control the initial focus. This also gives us a
         * place to put additional features of the popup that are not part of the calendar itself in the
         * future. (e.g. confirmation buttons).
         * \@docs-private
         * @template D
         */
        var MatDatepickerContent = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_8__["__extends"])(MatDatepickerContent, _super);

            function MatDatepickerContent(elementRef) {
                return _super.call(this, elementRef) || this;
            }

            /**
             * @return {?}
             */
            MatDatepickerContent.prototype.ngAfterViewInit = /**
             * @return {?}
             */
            function () {
                this._calendar.focusActiveCell();
            };
            MatDatepickerContent.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-datepicker-content',
                        template: "<mat-calendar cdkTrapFocus [id]=\"datepicker.id\" [ngClass]=\"datepicker.panelClass\" [startAt]=\"datepicker.startAt\" [startView]=\"datepicker.startView\" [minDate]=\"datepicker._minDate\" [maxDate]=\"datepicker._maxDate\" [dateFilter]=\"datepicker._dateFilter\" [headerComponent]=\"datepicker.calendarHeaderComponent\" [selected]=\"datepicker._selected\" [@fadeInCalendar]=\"'enter'\" (selectedChange)=\"datepicker._select($event)\" (yearSelected)=\"datepicker._selectYear($event)\" (monthSelected)=\"datepicker._selectMonth($event)\" (_userSelection)=\"datepicker.close()\"></mat-calendar>",
                        styles: [".mat-datepicker-content{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);display:block;border-radius:2px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12);display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation:landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation:portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}"],
                        host: {
                            'class': 'mat-datepicker-content',
                            '[@transformPanel]': '"enter"',
                            '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',
                        },
                        animations: [
                            matDatepickerAnimations.transformPanel,
                            matDatepickerAnimations.fadeInCalendar,
                        ],
                        exportAs: 'matDatepickerContent',
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        inputs: ['color'],
                    },]
                },
            ];
            /** @nocollapse */
            MatDatepickerContent.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                ];
            };
            MatDatepickerContent.propDecorators = {
                "_calendar": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [MatCalendar,]},],
            };
            return MatDatepickerContent;
        }(_MatDatepickerContentMixinBase));
        /**
         * Component responsible for managing the datepicker popup/dialog.
         * @template D
         */
        var MatDatepicker = /** @class */ (function () {
            function MatDatepicker(_dialog, _overlay, _ngZone, _viewContainerRef, _scrollStrategy, _dateAdapter, _dir, _document) {
                this._dialog = _dialog;
                this._overlay = _overlay;
                this._ngZone = _ngZone;
                this._viewContainerRef = _viewContainerRef;
                this._scrollStrategy = _scrollStrategy;
                this._dateAdapter = _dateAdapter;
                this._dir = _dir;
                this._document = _document;
                /**
                 * The view that the calendar should start in.
                 */
                this.startView = 'month';
                this._touchUi = false;
                /**
                 * Emits selected year in multiyear view.
                 * This doesn't imply a change on the selected date.
                 */
                this.yearSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Emits selected month in year view.
                 * This doesn't imply a change on the selected date.
                 */
                this.monthSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Emits when the datepicker has been opened.
                 */
                this.openedStream = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Emits when the datepicker has been closed.
                 */
                this.closedStream = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                this._opened = false;
                /**
                 * The id for the datepicker calendar.
                 */
                this.id = "mat-datepicker-" + datepickerUid++;
                this._validSelected = null;
                /**
                 * The element that was focused before the datepicker was opened.
                 */
                this._focusedElementBeforeOpen = null;
                /**
                 * Subscription to value changes in the associated input element.
                 */
                this._inputSubscription = rxjs__WEBPACK_IMPORTED_MODULE_1__["Subscription"].EMPTY;
                /**
                 * Emits when the datepicker is disabled.
                 */
                this._disabledChange = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                /**
                 * Emits new selected date when selected date changes.
                 */
                this._selectedChanged = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                if (!this._dateAdapter) {
                    throw createMissingDateImplError('DateAdapter');
                }
            }

            Object.defineProperty(MatDatepicker.prototype, "startAt", {
                get: /**
                 * The date to open the calendar to initially.
                 * @return {?}
                 */
                function () {
                    // If an explicit startAt is set we start there, otherwise we start at whatever the currently
                    // selected value is.
                    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatDatepicker.prototype, "color", {
                get: /**
                 * Color palette to use on the datepicker's calendar.
                 * @return {?}
                 */
                function () {
                    return this._color ||
                        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._color = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatDatepicker.prototype, "touchUi", {
                get: /**
                 * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather
                 * than a popup and elements have more padding to allow for bigger touch targets.
                 * @return {?}
                 */
                function () {
                    return this._touchUi;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._touchUi = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatDatepicker.prototype, "disabled", {
                get: /**
                 * Whether the datepicker pop-up should be disabled.
                 * @return {?}
                 */
                function () {
                    return this._disabled === undefined && this._datepickerInput ?
                        this._datepickerInput.disabled : !!this._disabled;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    var /** @type {?} */ newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(value);
                    if (newValue !== this._disabled) {
                        this._disabled = newValue;
                        this._disabledChange.next(newValue);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatDatepicker.prototype, "opened", {
                get: /**
                 * Whether the calendar is open.
                 * @return {?}
                 */
                function () {
                    return this._opened;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    value ? this.open() : this.close();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatDatepicker.prototype, "_selected", {
                /** The currently selected date. */
                get: /**
                 * The currently selected date.
                 * @return {?}
                 */
                function () {
                    return this._validSelected;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._validSelected = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatDatepicker.prototype, "_minDate", {
                /** The minimum selectable date. */
                get: /**
                 * The minimum selectable date.
                 * @return {?}
                 */
                function () {
                    return this._datepickerInput && this._datepickerInput.min;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatDatepicker.prototype, "_maxDate", {
                /** The maximum selectable date. */
                get: /**
                 * The maximum selectable date.
                 * @return {?}
                 */
                function () {
                    return this._datepickerInput && this._datepickerInput.max;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatDatepicker.prototype, "_dateFilter", {
                get: /**
                 * @return {?}
                 */
                function () {
                    return this._datepickerInput && this._datepickerInput._dateFilter;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatDatepicker.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this.close();
                this._inputSubscription.unsubscribe();
                this._disabledChange.complete();
                if (this._popupRef) {
                    this._popupRef.dispose();
                    this._popupComponentRef = null;
                }
            };
            /** Selects the given date */
            /**
             * Selects the given date
             * @param {?} date
             * @return {?}
             */
            MatDatepicker.prototype._select = /**
             * Selects the given date
             * @param {?} date
             * @return {?}
             */
            function (date) {
                var /** @type {?} */ oldValue = this._selected;
                this._selected = date;
                if (!this._dateAdapter.sameDate(oldValue, this._selected)) {
                    this._selectedChanged.next(date);
                }
            };
            /** Emits the selected year in multiyear view */
            /**
             * Emits the selected year in multiyear view
             * @param {?} normalizedYear
             * @return {?}
             */
            MatDatepicker.prototype._selectYear = /**
             * Emits the selected year in multiyear view
             * @param {?} normalizedYear
             * @return {?}
             */
            function (normalizedYear) {
                this.yearSelected.emit(normalizedYear);
            };
            /** Emits selected month in year view */
            /**
             * Emits selected month in year view
             * @param {?} normalizedMonth
             * @return {?}
             */
            MatDatepicker.prototype._selectMonth = /**
             * Emits selected month in year view
             * @param {?} normalizedMonth
             * @return {?}
             */
            function (normalizedMonth) {
                this.monthSelected.emit(normalizedMonth);
            };
            /**
             * Register an input with this datepicker.
             * @param input The datepicker input to register with this datepicker.
             */
            /**
             * Register an input with this datepicker.
             * @param {?} input The datepicker input to register with this datepicker.
             * @return {?}
             */
            MatDatepicker.prototype._registerInput = /**
             * Register an input with this datepicker.
             * @param {?} input The datepicker input to register with this datepicker.
             * @return {?}
             */
            function (input) {
                var _this = this;
                if (this._datepickerInput) {
                    throw Error('A MatDatepicker can only be associated with a single input.');
                }
                this._datepickerInput = input;
                this._inputSubscription =
                    this._datepickerInput._valueChange.subscribe(function (value) {
                        return _this._selected = value;
                    });
            };
            /** Open the calendar. */
            /**
             * Open the calendar.
             * @return {?}
             */
            MatDatepicker.prototype.open = /**
             * Open the calendar.
             * @return {?}
             */
            function () {
                if (this._opened || this.disabled) {
                    return;
                }
                if (!this._datepickerInput) {
                    throw Error('Attempted to open an MatDatepicker with no associated input.');
                }
                if (this._document) {
                    this._focusedElementBeforeOpen = this._document.activeElement;
                }
                this.touchUi ? this._openAsDialog() : this._openAsPopup();
                this._opened = true;
                this.openedStream.emit();
            };
            /** Close the calendar. */
            /**
             * Close the calendar.
             * @return {?}
             */
            MatDatepicker.prototype.close = /**
             * Close the calendar.
             * @return {?}
             */
            function () {
                var _this = this;
                if (!this._opened) {
                    return;
                }
                if (this._popupRef && this._popupRef.hasAttached()) {
                    this._popupRef.detach();
                }
                if (this._dialogRef) {
                    this._dialogRef.close();
                    this._dialogRef = null;
                }
                if (this._calendarPortal && this._calendarPortal.isAttached) {
                    this._calendarPortal.detach();
                }
                var /** @type {?} */ completeClose = function () {
                    // The `_opened` could've been reset already if
                    // we got two events in quick succession.
                    if (_this._opened) {
                        _this._opened = false;
                        _this.closedStream.emit();
                        _this._focusedElementBeforeOpen = null;
                    }
                };
                if (this._focusedElementBeforeOpen &&
                    typeof this._focusedElementBeforeOpen.focus === 'function') {
                    // Because IE moves focus asynchronously, we can't count on it being restored before we've
                    // marked the datepicker as closed. If the event fires out of sequence and the element that
                    // we're refocusing opens the datepicker on focus, the user could be stuck with not being
                    // able to close the calendar at all. We work around it by making the logic, that marks
                    // the datepicker as closed, async as well.
                    this._focusedElementBeforeOpen.focus();
                    setTimeout(completeClose);
                }
                else {
                    completeClose();
                }
            };
            /**
             * Open the calendar as a dialog.
             * @return {?}
             */
            MatDatepicker.prototype._openAsDialog = /**
             * Open the calendar as a dialog.
             * @return {?}
             */
            function () {
                var _this = this;
                this._dialogRef = this._dialog.open(MatDatepickerContent, {
                    direction: this._getDirection(),
                    viewContainerRef: this._viewContainerRef,
                    panelClass: 'mat-datepicker-dialog',
                });
                this._dialogRef.afterClosed().subscribe(function () {
                    return _this.close();
                });
                this._dialogRef.componentInstance.datepicker = this;
                this._setColor();
            };
            /**
             * Open the calendar as a popup.
             * @return {?}
             */
            MatDatepicker.prototype._openAsPopup = /**
             * Open the calendar as a popup.
             * @return {?}
             */
            function () {
                var _this = this;
                if (!this._calendarPortal) {
                    this._calendarPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__["ComponentPortal"](MatDatepickerContent, this._viewContainerRef);
                }
                if (!this._popupRef) {
                    this._createPopup();
                }
                if (!this._popupRef.hasAttached()) {
                    this._popupRef.setDirection(this._getDirection());
                    this._popupComponentRef = this._popupRef.attach(this._calendarPortal);
                    this._popupComponentRef.instance.datepicker = this;
                    this._setColor();
                    // Update the position once the calendar has rendered.
                    this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["take"])(1)).subscribe(function () {
                        _this._popupRef.updatePosition();
                    });
                }
            };
            /**
             * Create the popup.
             * @return {?}
             */
            MatDatepicker.prototype._createPopup = /**
             * Create the popup.
             * @return {?}
             */
            function () {
                var _this = this;
                var /** @type {?} */ overlayConfig = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_10__["OverlayConfig"]({
                    positionStrategy: this._createPopupPositionStrategy(),
                    hasBackdrop: true,
                    backdropClass: 'mat-overlay-transparent-backdrop',
                    direction: this._getDirection(),
                    scrollStrategy: this._scrollStrategy(),
                    panelClass: 'mat-datepicker-popup',
                });
                this._popupRef = this._overlay.create(overlayConfig);
                Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["merge"])(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["filter"])(function (event) {
                    // Closing on alt + up is only valid when there's an input associated with the datepicker.
                    return event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["ESCAPE"] ||
                        (_this._datepickerInput && event.altKey && event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["UP_ARROW"]);
                }))).subscribe(function () {
                    return _this.close();
                });
            };
            /**
             * Create the popup PositionStrategy.
             * @return {?}
             */
            MatDatepicker.prototype._createPopupPositionStrategy = /**
             * Create the popup PositionStrategy.
             * @return {?}
             */
            function () {
                return this._overlay.position()
                    .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())
                    .withTransformOriginOn('.mat-datepicker-content')
                    .withFlexibleDimensions(false)
                    .withViewportMargin(8)
                    .withPush(false)
                    .withPositions([
                        {
                            originX: 'start',
                            originY: 'bottom',
                            overlayX: 'start',
                            overlayY: 'top'
                        },
                        {
                            originX: 'start',
                            originY: 'top',
                            overlayX: 'start',
                            overlayY: 'bottom'
                        },
                        {
                            originX: 'end',
                            originY: 'bottom',
                            overlayX: 'end',
                            overlayY: 'top'
                        },
                        {
                            originX: 'end',
                            originY: 'top',
                            overlayX: 'end',
                            overlayY: 'bottom'
                        }
                    ]);
            };
            /**
             * @param {?} obj The object to check.
             * @return {?} The given object if it is both a date instance and valid, otherwise null.
             */
            MatDatepicker.prototype._getValidDateOrNull = /**
             * @param {?} obj The object to check.
             * @return {?} The given object if it is both a date instance and valid, otherwise null.
             */
            function (obj) {
                return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
            };
            /**
             * Passes the current theme color along to the calendar overlay.
             * @return {?}
             */
            MatDatepicker.prototype._setColor = /**
             * Passes the current theme color along to the calendar overlay.
             * @return {?}
             */
            function () {
                var /** @type {?} */ color = this.color;
                if (this._popupComponentRef) {
                    this._popupComponentRef.instance.color = color;
                }
                if (this._dialogRef) {
                    this._dialogRef.componentInstance.color = color;
                }
            };
            /**
             * Returns the layout direction of the datepicker.
             * @return {?}
             */
            MatDatepicker.prototype._getDirection = /**
             * Returns the layout direction of the datepicker.
             * @return {?}
             */
            function () {
                return this._dir ? this._dir.value : 'ltr';
            };
            MatDatepicker.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-datepicker',
                        template: '',
                        exportAs: 'matDatepicker',
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                    },]
                },
            ];
            /** @nocollapse */
            MatDatepicker.ctorParameters = function () {
                return [
                    {type: _angular_material_dialog__WEBPACK_IMPORTED_MODULE_12__["MatDialog"],},
                    {type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_10__["Overlay"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"],},
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [MAT_DATEPICKER_SCROLL_STRATEGY,]
                        },]
                    },
                    {
                        type: _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                    {
                        type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [_angular_common__WEBPACK_IMPORTED_MODULE_11__["DOCUMENT"],]
                        },]
                    },
                ];
            };
            MatDatepicker.propDecorators = {
                "calendarHeaderComponent": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "startAt": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "startView": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "color": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "touchUi": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "disabled": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "yearSelected": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "monthSelected": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "panelClass": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "openedStream": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"], args: ['opened',]},],
                "closedStream": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"], args: ['closed',]},],
                "opened": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
            };
            return MatDatepicker;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var /** @type {?} */ MAT_DATEPICKER_VALUE_ACCESSOR = {
            provide: _angular_forms__WEBPACK_IMPORTED_MODULE_13__["NG_VALUE_ACCESSOR"],
            useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
                return MatDatepickerInput;
            }),
            multi: true
        };
        var /** @type {?} */ MAT_DATEPICKER_VALIDATORS = {
            provide: _angular_forms__WEBPACK_IMPORTED_MODULE_13__["NG_VALIDATORS"],
            useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
                return MatDatepickerInput;
            }),
            multi: true
        };
        /**
         * An event used for datepicker input and change events. We don't always have access to a native
         * input or change event because the event may have been triggered by the user clicking on the
         * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.
         * @template D
         */
        var /**
         * An event used for datepicker input and change events. We don't always have access to a native
         * input or change event because the event may have been triggered by the user clicking on the
         * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.
         * @template D
         */
        MatDatepickerInputEvent = /** @class */ (function () {
            function MatDatepickerInputEvent(target, targetElement) {
                this.target = target;
                this.targetElement = targetElement;
                this.value = this.target.value;
            }

            return MatDatepickerInputEvent;
        }());
        /**
         * Directive used to connect an input to a MatDatepicker.
         * @template D
         */
        var MatDatepickerInput = /** @class */ (function () {
            function MatDatepickerInput(_elementRef, _dateAdapter, _dateFormats, _formField) {
                var _this = this;
                this._elementRef = _elementRef;
                this._dateAdapter = _dateAdapter;
                this._dateFormats = _dateFormats;
                this._formField = _formField;
                /**
                 * Emits when a `change` event is fired on this `<input>`.
                 */
                this.dateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Emits when an `input` event is fired on this `<input>`.
                 */
                this.dateInput = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Emits when the value changes (either due to user input or programmatic change).
                 */
                this._valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Emits when the disabled state has changed
                 */
                this._disabledChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                this._onTouched = function () {
                };
                this._cvaOnChange = function () {
                };
                this._validatorOnChange = function () {
                };
                this._datepickerSubscription = rxjs__WEBPACK_IMPORTED_MODULE_1__["Subscription"].EMPTY;
                this._localeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_1__["Subscription"].EMPTY;
                /**
                 * The form control validator for whether the input parses.
                 */
                this._parseValidator = function () {
                    return _this._lastValueValid ?
                        null : {'matDatepickerParse': {'text': _this._elementRef.nativeElement.value}};
                };
                /**
                 * The form control validator for the min date.
                 */
                this._minValidator = function (control) {
                    var /** @type {?} */ controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));
                    return (!_this.min || !controlValue ||
                        _this._dateAdapter.compareDate(_this.min, controlValue) <= 0) ?
                        null : {'matDatepickerMin': {'min': _this.min, 'actual': controlValue}};
                };
                /**
                 * The form control validator for the max date.
                 */
                this._maxValidator = function (control) {
                    var /** @type {?} */ controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));
                    return (!_this.max || !controlValue ||
                        _this._dateAdapter.compareDate(_this.max, controlValue) >= 0) ?
                        null : {'matDatepickerMax': {'max': _this.max, 'actual': controlValue}};
                };
                /**
                 * The form control validator for the date filter.
                 */
                this._filterValidator = function (control) {
                    var /** @type {?} */ controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));
                    return !_this._dateFilter || !controlValue || _this._dateFilter(controlValue) ?
                        null : {'matDatepickerFilter': true};
                };
                /**
                 * The combined form control validator for this input.
                 */
                this._validator = _angular_forms__WEBPACK_IMPORTED_MODULE_13__["Validators"].compose([this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);
                /**
                 * Whether the last value set on the input was valid.
                 */
                this._lastValueValid = false;
                if (!this._dateAdapter) {
                    throw createMissingDateImplError('DateAdapter');
                }
                if (!this._dateFormats) {
                    throw createMissingDateImplError('MAT_DATE_FORMATS');
                }
                // Update the displayed date when the locale changes.
                this._localeSubscription = _dateAdapter.localeChanges.subscribe(function () {
                    _this.value = _this.value;
                });
            }

            Object.defineProperty(MatDatepickerInput.prototype, "matDatepicker", {
                set: /**
                 * The datepicker that this input is associated with.
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this.registerDatepicker(value);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @param {?} value
             * @return {?}
             */
            MatDatepickerInput.prototype.registerDatepicker = /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value) {
                    this._datepicker = value;
                    this._datepicker._registerInput(this);
                }
            };
            Object.defineProperty(MatDatepickerInput.prototype, "matDatepickerFilter", {
                set: /**
                 * Function that can be used to filter out dates within the datepicker.
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._dateFilter = value;
                    this._validatorOnChange();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatDatepickerInput.prototype, "value", {
                get: /**
                 * The value of the input.
                 * @return {?}
                 */
                function () {
                    return this._value;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    value = this._dateAdapter.deserialize(value);
                    this._lastValueValid = !value || this._dateAdapter.isValid(value);
                    value = this._getValidDateOrNull(value);
                    var /** @type {?} */ oldDate = this.value;
                    this._value = value;
                    this._formatValue(value);
                    if (!this._dateAdapter.sameDate(oldDate, value)) {
                        this._valueChange.emit(value);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatDatepickerInput.prototype, "min", {
                get: /**
                 * The minimum valid date.
                 * @return {?}
                 */
                function () {
                    return this._min;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    this._validatorOnChange();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatDatepickerInput.prototype, "max", {
                get: /**
                 * The maximum valid date.
                 * @return {?}
                 */
                function () {
                    return this._max;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));
                    this._validatorOnChange();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatDatepickerInput.prototype, "disabled", {
                get: /**
                 * Whether the datepicker-input is disabled.
                 * @return {?}
                 */
                function () {
                    return !!this._disabled;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    var /** @type {?} */ newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(value);
                    var /** @type {?} */ element = this._elementRef.nativeElement;
                    if (this._disabled !== newValue) {
                        this._disabled = newValue;
                        this._disabledChange.emit(newValue);
                    }
                    // We need to null check the `blur` method, because it's undefined during SSR.
                    if (newValue && element.blur) {
                        // Normally, native input elements automatically blur if they turn disabled. This behavior
                        // is problematic, because it would mean that it triggers another change detection cycle,
                        // which then causes a changed after checked error if the input element was focused before.
                        element.blur();
                    }
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatDatepickerInput.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                var _this = this;
                if (this._datepicker) {
                    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe(function (selected) {
                        _this.value = selected;
                        _this._cvaOnChange(selected);
                        _this._onTouched();
                        _this.dateInput.emit(new MatDatepickerInputEvent(_this, _this._elementRef.nativeElement));
                        _this.dateChange.emit(new MatDatepickerInputEvent(_this, _this._elementRef.nativeElement));
                    });
                }
            };
            /**
             * @return {?}
             */
            MatDatepickerInput.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._datepickerSubscription.unsubscribe();
                this._localeSubscription.unsubscribe();
                this._valueChange.complete();
                this._disabledChange.complete();
            };
            /** @docs-private */
            /**
             * \@docs-private
             * @param {?} fn
             * @return {?}
             */
            MatDatepickerInput.prototype.registerOnValidatorChange = /**
             * \@docs-private
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this._validatorOnChange = fn;
            };
            /** @docs-private */
            /**
             * \@docs-private
             * @param {?} c
             * @return {?}
             */
            MatDatepickerInput.prototype.validate = /**
             * \@docs-private
             * @param {?} c
             * @return {?}
             */
            function (c) {
                return this._validator ? this._validator(c) : null;
            };
            /**
             * @deprecated
             * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead
             */
            /**
             * @deprecated
             * \@deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead
             * @return {?}
             */
            MatDatepickerInput.prototype.getPopupConnectionElementRef = /**
             * @deprecated
             * \@deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead
             * @return {?}
             */
            function () {
                return this.getConnectedOverlayOrigin();
            };
            /**
             * Gets the element that the datepicker popup should be connected to.
             * @return The element to connect the popup to.
             */
            /**
             * Gets the element that the datepicker popup should be connected to.
             * @return {?} The element to connect the popup to.
             */
            MatDatepickerInput.prototype.getConnectedOverlayOrigin = /**
             * Gets the element that the datepicker popup should be connected to.
             * @return {?} The element to connect the popup to.
             */
            function () {
                return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;
            };
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} value
             * @return {?}
             */
            MatDatepickerInput.prototype.writeValue = /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.value = value;
            };
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} fn
             * @return {?}
             */
            MatDatepickerInput.prototype.registerOnChange = /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this._cvaOnChange = fn;
            };
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} fn
             * @return {?}
             */
            MatDatepickerInput.prototype.registerOnTouched = /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this._onTouched = fn;
            };
            // Implemented as part of ControlValueAccessor.
            /**
             * @param {?} isDisabled
             * @return {?}
             */
            MatDatepickerInput.prototype.setDisabledState = /**
             * @param {?} isDisabled
             * @return {?}
             */
            function (isDisabled) {
                this.disabled = isDisabled;
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatDatepickerInput.prototype._onKeydown = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event.altKey && event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__["DOWN_ARROW"]) {
                    this._datepicker.open();
                    event.preventDefault();
                }
            };
            /**
             * @param {?} value
             * @return {?}
             */
            MatDatepickerInput.prototype._onInput = /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                var /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);
                this._lastValueValid = !date || this._dateAdapter.isValid(date);
                date = this._getValidDateOrNull(date);
                if (!this._dateAdapter.sameDate(date, this._value)) {
                    this._value = date;
                    this._cvaOnChange(date);
                    this._valueChange.emit(date);
                    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));
                }
            };
            /**
             * @return {?}
             */
            MatDatepickerInput.prototype._onChange = /**
             * @return {?}
             */
            function () {
                this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));
            };
            /** Returns the palette used by the input's form field, if any. */
            /**
             * Returns the palette used by the input's form field, if any.
             * @return {?}
             */
            MatDatepickerInput.prototype._getThemePalette = /**
             * Returns the palette used by the input's form field, if any.
             * @return {?}
             */
            function () {
                return this._formField ? this._formField.color : undefined;
            };
            /** Handles blur events on the input. */
            /**
             * Handles blur events on the input.
             * @return {?}
             */
            MatDatepickerInput.prototype._onBlur = /**
             * Handles blur events on the input.
             * @return {?}
             */
            function () {
                // Reformat the input only if we have a valid value.
                if (this.value) {
                    this._formatValue(this.value);
                }
                this._onTouched();
            };
            /**
             * Formats a value and sets it on the input element.
             * @param {?} value
             * @return {?}
             */
            MatDatepickerInput.prototype._formatValue = /**
             * Formats a value and sets it on the input element.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._elementRef.nativeElement.value =
                    value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';
            };
            /**
             * @param {?} obj The object to check.
             * @return {?} The given object if it is both a date instance and valid, otherwise null.
             */
            MatDatepickerInput.prototype._getValidDateOrNull = /**
             * @param {?} obj The object to check.
             * @return {?} The given object if it is both a date instance and valid, otherwise null.
             */
            function (obj) {
                return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;
            };
            MatDatepickerInput.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: 'input[matDatepicker]',
                        providers: [
                            MAT_DATEPICKER_VALUE_ACCESSOR,
                            MAT_DATEPICKER_VALIDATORS,
                            {
                                provide: _angular_material_input__WEBPACK_IMPORTED_MODULE_15__["MAT_INPUT_VALUE_ACCESSOR"],
                                useExisting: MatDatepickerInput
                            },
                        ],
                        host: {
                            '[attr.aria-haspopup]': 'true',
                            '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',
                            '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',
                            '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',
                            '[disabled]': 'disabled',
                            '(input)': '_onInput($event.target.value)',
                            '(change)': '_onChange()',
                            '(blur)': '_onBlur()',
                            '(keydown)': '_onKeydown($event)',
                        },
                        exportAs: 'matDatepickerInput',
                    },]
                },
            ];
            /** @nocollapse */
            MatDatepickerInput.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {
                        type: _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MAT_DATE_FORMATS"],]
                        },]
                    },
                    {
                        type: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["MatFormField"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                ];
            };
            MatDatepickerInput.propDecorators = {
                "matDatepicker": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "matDatepickerFilter": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "value": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "min": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "max": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "disabled": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "dateChange": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "dateInput": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
            };
            return MatDatepickerInput;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Can be used to override the icon of a `matDatepickerToggle`.
         */
        var MatDatepickerToggleIcon = /** @class */ (function () {
            function MatDatepickerToggleIcon() {
            }

            MatDatepickerToggleIcon.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[matDatepickerToggleIcon]'
                    },]
                },
            ];
            return MatDatepickerToggleIcon;
        }());
        /**
         * @template D
         */
        var MatDatepickerToggle = /** @class */ (function () {
            function MatDatepickerToggle(_intl, _changeDetectorRef) {
                this._intl = _intl;
                this._changeDetectorRef = _changeDetectorRef;
                this._stateChanges = rxjs__WEBPACK_IMPORTED_MODULE_1__["Subscription"].EMPTY;
            }

            Object.defineProperty(MatDatepickerToggle.prototype, "disabled", {
                get: /**
                 * Whether the toggle button is disabled.
                 * @return {?}
                 */
                function () {
                    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_9__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @param {?} changes
             * @return {?}
             */
            MatDatepickerToggle.prototype.ngOnChanges = /**
             * @param {?} changes
             * @return {?}
             */
            function (changes) {
                if (changes["datepicker"]) {
                    this._watchStateChanges();
                }
            };
            /**
             * @return {?}
             */
            MatDatepickerToggle.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._stateChanges.unsubscribe();
            };
            /**
             * @return {?}
             */
            MatDatepickerToggle.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                this._watchStateChanges();
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatDatepickerToggle.prototype._open = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (this.datepicker && !this.disabled) {
                    this.datepicker.open();
                    event.stopPropagation();
                }
            };
            /**
             * @return {?}
             */
            MatDatepickerToggle.prototype._watchStateChanges = /**
             * @return {?}
             */
            function () {
                var _this = this;
                var /** @type {?} */ datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])();
                var /** @type {?} */ inputDisabled = this.datepicker && this.datepicker._datepickerInput ?
                    this.datepicker._datepickerInput._disabledChange : Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])();
                var /** @type {?} */ datepickerToggled = this.datepicker ?
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["merge"])(this.datepicker.openedStream, this.datepicker.closedStream) :
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])();
                this._stateChanges.unsubscribe();
                this._stateChanges = Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["merge"])(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe(function () {
                    return _this._changeDetectorRef.markForCheck();
                });
            };
            MatDatepickerToggle.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-datepicker-toggle',
                        template: "<button mat-icon-button type=\"button\" [attr.aria-label]=\"_intl.openCalendarLabel\" [disabled]=\"disabled\" (click)=\"_open($event)\"><svg *ngIf=\"!_customIcon\" class=\"mat-datepicker-toggle-default-icon\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" fill=\"currentColor\" focusable=\"false\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"/></svg><ng-content select=\"[matDatepickerToggleIcon]\"></ng-content></button>",
                        styles: [".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}"],
                        host: {
                            'class': 'mat-datepicker-toggle',
                            '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',
                            '[class.mat-accent]': 'datepicker && datepicker.color === "accent"',
                            '[class.mat-warn]': 'datepicker && datepicker.color === "warn"',
                        },
                        exportAs: 'matDatepickerToggle',
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                    },]
                },
            ];
            /** @nocollapse */
            MatDatepickerToggle.ctorParameters = function () {
                return [
                    {type: MatDatepickerIntl,},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"],},
                ];
            };
            MatDatepickerToggle.propDecorators = {
                "datepicker": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['for',]},],
                "disabled": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "_customIcon": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
                    args: [MatDatepickerToggleIcon,]
                },],
            };
            return MatDatepickerToggle;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatDatepickerModule = /** @class */ (function () {
            function MatDatepickerModule() {
            }

            MatDatepickerModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                        imports: [
                            _angular_common__WEBPACK_IMPORTED_MODULE_11__["CommonModule"],
                            _angular_material_button__WEBPACK_IMPORTED_MODULE_17__["MatButtonModule"],
                            _angular_material_dialog__WEBPACK_IMPORTED_MODULE_12__["MatDialogModule"],
                            _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_10__["OverlayModule"],
                            _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_16__["A11yModule"],
                            _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__["PortalModule"],
                        ],
                        exports: [
                            MatCalendar,
                            MatCalendarBody,
                            MatDatepicker,
                            MatDatepickerContent,
                            MatDatepickerInput,
                            MatDatepickerToggle,
                            MatDatepickerToggleIcon,
                            MatMonthView,
                            MatYearView,
                            MatMultiYearView,
                            MatCalendarHeader,
                        ],
                        declarations: [
                            MatCalendar,
                            MatCalendarBody,
                            MatDatepicker,
                            MatDatepickerContent,
                            MatDatepickerInput,
                            MatDatepickerToggle,
                            MatDatepickerToggleIcon,
                            MatMonthView,
                            MatYearView,
                            MatMultiYearView,
                            MatCalendarHeader,
                        ],
                        providers: [
                            MatDatepickerIntl,
                            MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,
                        ],
                        entryComponents: [
                            MatDatepickerContent,
                            MatCalendarHeader,
                        ]
                    },]
                },
            ];
            return MatDatepickerModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=datepicker.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/dialog.es5.js":
    /*!***********************************************************!*\
  !*** ./node_modules/@angular/material/esm5/dialog.es5.js ***!
  \***********************************************************/
    /*! exports provided: MatDialogModule, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDialogModule", function () {
            return MatDialogModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_DATA", function () {
            return MAT_DIALOG_DATA;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_DEFAULT_OPTIONS", function () {
            return MAT_DIALOG_DEFAULT_OPTIONS;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY", function () {
            return MAT_DIALOG_SCROLL_STRATEGY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY_FACTORY", function () {
            return MAT_DIALOG_SCROLL_STRATEGY_FACTORY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY", function () {
            return MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY_PROVIDER", function () {
            return MAT_DIALOG_SCROLL_STRATEGY_PROVIDER;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDialog", function () {
            return MatDialog;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "throwMatDialogContentAlreadyAttachedError", function () {
            return throwMatDialogContentAlreadyAttachedError;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDialogContainer", function () {
            return MatDialogContainer;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDialogClose", function () {
            return MatDialogClose;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDialogTitle", function () {
            return MatDialogTitle;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDialogContent", function () {
            return MatDialogContent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDialogActions", function () {
            return MatDialogActions;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDialogConfig", function () {
            return MatDialogConfig;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatDialogRef", function () {
            return MatDialogRef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "matDialogAnimations", function () {
            return matDialogAnimations;
        });
        /* harmony import */
        var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm5/animations.js");
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm5/portal.es5.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm5/keycodes.es5.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Configuration for opening a modal dialog with the MatDialog service.
         * @template D
         */
        var /**
         * Configuration for opening a modal dialog with the MatDialog service.
         * @template D
         */
        MatDialogConfig = /** @class */ (function () {
            function MatDialogConfig() {
                /**
                 * The ARIA role of the dialog element.
                 */
                this.role = 'dialog';
                /**
                 * Custom class for the overlay pane.
                 */
                this.panelClass = '';
                /**
                 * Whether the dialog has a backdrop.
                 */
                this.hasBackdrop = true;
                /**
                 * Custom class for the backdrop,
                 */
                this.backdropClass = '';
                /**
                 * Whether the user can use escape or clicking outside to close a modal.
                 */
                this.disableClose = false;
                /**
                 * Width of the dialog.
                 */
                this.width = '';
                /**
                 * Height of the dialog.
                 */
                this.height = '';
                /**
                 * Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw
                 */
                this.maxWidth = '80vw';
                /**
                 * Data being injected into the child component.
                 */
                this.data = null;
                /**
                 * ID of the element that describes the dialog.
                 */
                this.ariaDescribedBy = null;
                /**
                 * Aria label to assign to the dialog element
                 */
                this.ariaLabel = null;
                /**
                 * Whether the dialog should focus the first focusable element on open.
                 */
                this.autoFocus = true;
                /**
                 * Whether the dialog should close when the user goes backwards/forwards in history.
                 */
                this.closeOnNavigation = true;
            }

            return MatDialogConfig;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Animations used by MatDialog.
         */
        var /** @type {?} */ matDialogAnimations = {
            /** Animation that slides the dialog in and out of view and fades the opacity. */
            slideDialog: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["trigger"])('slideDialog', [
                // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)
                // scale(1)`, because for some reason specifying the transform explicitly, causes IE both
                // to blur the dialog content and decimate the animation performance. Leaving it as `none`
                // solves both issues.
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
                    transform: 'none',
                    opacity: 1
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
                    transform: 'translate3d(0, 25%, 0) scale(0.9)',
                    opacity: 0
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('exit', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({
                    transform: 'translate3d(0, 25%, 0)',
                    opacity: 0
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('* => *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),
            ])
        };

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Throws an exception for the case when a ComponentPortal is
         * attached to a DomPortalOutlet without an origin.
         * \@docs-private
         * @return {?}
         */
        function throwMatDialogContentAlreadyAttachedError() {
            throw Error('Attempting to attach dialog content after content is already attached');
        }

        /**
         * Internal component that wraps user-provided dialog content.
         * Animation is based on https://material.io/guidelines/motion/choreography.html.
         * \@docs-private
         */
        var MatDialogContainer = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatDialogContainer, _super);

            function MatDialogContainer(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {
                var _this = _super.call(this) || this;
                _this._elementRef = _elementRef;
                _this._focusTrapFactory = _focusTrapFactory;
                _this._changeDetectorRef = _changeDetectorRef;
                _this._document = _document;
                _this._config = _config;
                /**
                 * Element that was focused before the dialog was opened. Save this to restore upon close.
                 */
                _this._elementFocusedBeforeDialogWasOpened = null;
                /**
                 * State of the dialog animation.
                 */
                _this._state = 'enter';
                /**
                 * Emits when an animation state changes.
                 */
                _this._animationStateChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
                /**
                 * ID of the element that should be considered as the dialog's label.
                 */
                _this._ariaLabelledBy = null;
                return _this;
            }

            /**
             * Attach a ComponentPortal as content to this dialog container.
             * @param portal Portal to be attached as the dialog content.
             */
            /**
             * Attach a ComponentPortal as content to this dialog container.
             * @template T
             * @param {?} portal Portal to be attached as the dialog content.
             * @return {?}
             */
            MatDialogContainer.prototype.attachComponentPortal = /**
             * Attach a ComponentPortal as content to this dialog container.
             * @template T
             * @param {?} portal Portal to be attached as the dialog content.
             * @return {?}
             */
            function (portal) {
                if (this._portalOutlet.hasAttached()) {
                    throwMatDialogContentAlreadyAttachedError();
                }
                this._savePreviouslyFocusedElement();
                return this._portalOutlet.attachComponentPortal(portal);
            };
            /**
             * Attach a TemplatePortal as content to this dialog container.
             * @param portal Portal to be attached as the dialog content.
             */
            /**
             * Attach a TemplatePortal as content to this dialog container.
             * @template C
             * @param {?} portal Portal to be attached as the dialog content.
             * @return {?}
             */
            MatDialogContainer.prototype.attachTemplatePortal = /**
             * Attach a TemplatePortal as content to this dialog container.
             * @template C
             * @param {?} portal Portal to be attached as the dialog content.
             * @return {?}
             */
            function (portal) {
                if (this._portalOutlet.hasAttached()) {
                    throwMatDialogContentAlreadyAttachedError();
                }
                this._savePreviouslyFocusedElement();
                return this._portalOutlet.attachTemplatePortal(portal);
            };
            /**
             * Moves the focus inside the focus trap.
             * @return {?}
             */
            MatDialogContainer.prototype._trapFocus = /**
             * Moves the focus inside the focus trap.
             * @return {?}
             */
            function () {
                if (!this._focusTrap) {
                    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);
                }
                // If were to attempt to focus immediately, then the content of the dialog would not yet be
                // ready in instances where change detection has to run first. To deal with this, we simply
                // wait for the microtask queue to be empty.
                if (this._config.autoFocus) {
                    this._focusTrap.focusInitialElementWhenReady();
                }
            };
            /**
             * Restores focus to the element that was focused before the dialog opened.
             * @return {?}
             */
            MatDialogContainer.prototype._restoreFocus = /**
             * Restores focus to the element that was focused before the dialog opened.
             * @return {?}
             */
            function () {
                var /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;
                // We need the extra check, because IE can set the `activeElement` to null in some cases.
                if (toFocus && typeof toFocus.focus === 'function') {
                    toFocus.focus();
                }
                if (this._focusTrap) {
                    this._focusTrap.destroy();
                }
            };
            /**
             * Saves a reference to the element that was focused before the dialog was opened.
             * @return {?}
             */
            MatDialogContainer.prototype._savePreviouslyFocusedElement = /**
             * Saves a reference to the element that was focused before the dialog was opened.
             * @return {?}
             */
            function () {
                var _this = this;
                if (this._document) {
                    this._elementFocusedBeforeDialogWasOpened = /** @type {?} */ (this._document.activeElement);
                    // Note that there is no focus method when rendering on the server.
                    if (this._elementRef.nativeElement.focus) {
                        // Move focus onto the dialog immediately in order to prevent the user from accidentally
                        // opening multiple dialogs at the same time. Needs to be async, because the element
                        // may not be focusable immediately.
                        Promise.resolve().then(function () {
                            return _this._elementRef.nativeElement.focus();
                        });
                    }
                }
            };
            /** Callback, invoked whenever an animation on the host completes. */
            /**
             * Callback, invoked whenever an animation on the host completes.
             * @param {?} event
             * @return {?}
             */
            MatDialogContainer.prototype._onAnimationDone = /**
             * Callback, invoked whenever an animation on the host completes.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event.toState === 'enter') {
                    this._trapFocus();
                }
                else if (event.toState === 'exit') {
                    this._restoreFocus();
                }
                this._animationStateChanged.emit(event);
            };
            /** Callback, invoked when an animation on the host starts. */
            /**
             * Callback, invoked when an animation on the host starts.
             * @param {?} event
             * @return {?}
             */
            MatDialogContainer.prototype._onAnimationStart = /**
             * Callback, invoked when an animation on the host starts.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this._animationStateChanged.emit(event);
            };
            /** Starts the dialog exit animation. */
            /**
             * Starts the dialog exit animation.
             * @return {?}
             */
            MatDialogContainer.prototype._startExitAnimation = /**
             * Starts the dialog exit animation.
             * @return {?}
             */
            function () {
                this._state = 'exit';
                // Mark the container for check so it can react if the
                // view container is using OnPush change detection.
                this._changeDetectorRef.markForCheck();
            };
            MatDialogContainer.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"], args: [{
                        selector: 'mat-dialog-container',
                        template: "<ng-template cdkPortalOutlet></ng-template>",
                        styles: [".mat-dialog-container{box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12);display:block;padding:24px;border-radius:2px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media screen and (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:12px 0;display:flex;flex-wrap:wrap;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button+.mat-button,.mat-dialog-actions .mat-button+.mat-raised-button,.mat-dialog-actions .mat-raised-button+.mat-button,.mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-button+.mat-raised-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:0;margin-right:8px}"],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewEncapsulation"].None,
                        // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.
                        // tslint:disable-next-line:validate-decorators
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].Default,
                        animations: [matDialogAnimations.slideDialog],
                        host: {
                            'class': 'mat-dialog-container',
                            'tabindex': '-1',
                            '[attr.id]': '_id',
                            '[attr.role]': '_config.role',
                            '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',
                            '[attr.aria-label]': '_config.ariaLabel',
                            '[attr.aria-describedby]': '_config.ariaDescribedBy || null',
                            '[@slideDialog]': '_state',
                            '(@slideDialog.start)': '_onAnimationStart($event)',
                            '(@slideDialog.done)': '_onAnimationDone($event)',
                        },
                    },]
                },
            ];
            /** @nocollapse */
            MatDialogContainer.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"],},
                    {type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__["FocusTrapFactory"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"],},
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
                            args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"],]
                        },]
                    },
                    {type: MatDialogConfig,},
                ];
            };
            MatDialogContainer.propDecorators = {
                "_portalOutlet": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChild"],
                    args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__["CdkPortalOutlet"],]
                },],
            };
            return MatDialogContainer;
        }(_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__["BasePortalOutlet"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
// TODO(jelbourn): resizing
// Counter for unique dialog ids.
        var /** @type {?} */ uniqueId = 0;
        /**
         * Reference to a dialog opened via the MatDialog service.
         * @template T, R
         */
        var /**
         * Reference to a dialog opened via the MatDialog service.
         * @template T, R
         */
        MatDialogRef = /** @class */ (function () {
            function MatDialogRef(_overlayRef, _containerInstance, location, id) {
                if (id === void 0) {
                    id = "mat-dialog-" + uniqueId++;
                }
                var _this = this;
                this._overlayRef = _overlayRef;
                this._containerInstance = _containerInstance;
                this.id = id;
                /**
                 * Whether the user is allowed to close the dialog.
                 */
                this.disableClose = this._containerInstance._config.disableClose;
                /**
                 * Subject for notifying the user that the dialog has finished opening.
                 */
                this._afterOpen = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
                /**
                 * Subject for notifying the user that the dialog has finished closing.
                 */
                this._afterClosed = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
                /**
                 * Subject for notifying the user that the dialog has started closing.
                 */
                this._beforeClose = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
                /**
                 * Subscription to changes in the user's location.
                 */
                this._locationChanges = rxjs__WEBPACK_IMPORTED_MODULE_7__["Subscription"].EMPTY;
                // Pass the id along to the container.
                _containerInstance._id = id;
                // Emit when opening animation completes
                _containerInstance._animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["filter"])(function (event) {
                    return event.phaseName === 'done' && event.toState === 'enter';
                }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["take"])(1))
                    .subscribe(function () {
                        _this._afterOpen.next();
                        _this._afterOpen.complete();
                    });
                // Dispose overlay when closing animation is complete
                _containerInstance._animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["filter"])(function (event) {
                    return event.phaseName === 'done' && event.toState === 'exit';
                }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["take"])(1))
                    .subscribe(function () {
                        _this._overlayRef.dispose();
                        _this._locationChanges.unsubscribe();
                        _this._afterClosed.next(_this._result);
                        _this._afterClosed.complete();
                        _this.componentInstance = /** @type {?} */ ((null));
                    });
                _overlayRef.keydownEvents()
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["filter"])(function (event) {
                        return event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_6__["ESCAPE"] && !_this.disableClose;
                    }))
                    .subscribe(function () {
                        return _this.close();
                    });
                if (location) {
                    // Close the dialog when the user goes forwards/backwards in history or when the location
                    // hash changes. Note that this usually doesn't include clicking on links (unless the user
                    // is using the `HashLocationStrategy`).
                    this._locationChanges = location.subscribe(function () {
                        if (_this._containerInstance._config.closeOnNavigation) {
                            _this.close();
                        }
                    });
                }
            }

            /**
             * Close the dialog.
             * @param dialogResult Optional result to return to the dialog opener.
             */
            /**
             * Close the dialog.
             * @param {?=} dialogResult Optional result to return to the dialog opener.
             * @return {?}
             */
            MatDialogRef.prototype.close = /**
             * Close the dialog.
             * @param {?=} dialogResult Optional result to return to the dialog opener.
             * @return {?}
             */
            function (dialogResult) {
                var _this = this;
                this._result = dialogResult;
                // Transition the backdrop in parallel to the dialog.
                this._containerInstance._animationStateChanged.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["filter"])(function (event) {
                    return event.phaseName === 'start';
                }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["take"])(1))
                    .subscribe(function () {
                        _this._beforeClose.next(dialogResult);
                        _this._beforeClose.complete();
                        _this._overlayRef.detachBackdrop();
                    });
                this._containerInstance._startExitAnimation();
            };
            /**
             * Gets an observable that is notified when the dialog is finished opening.
             */
            /**
             * Gets an observable that is notified when the dialog is finished opening.
             * @return {?}
             */
            MatDialogRef.prototype.afterOpen = /**
             * Gets an observable that is notified when the dialog is finished opening.
             * @return {?}
             */
            function () {
                return this._afterOpen.asObservable();
            };
            /**
             * Gets an observable that is notified when the dialog is finished closing.
             */
            /**
             * Gets an observable that is notified when the dialog is finished closing.
             * @return {?}
             */
            MatDialogRef.prototype.afterClosed = /**
             * Gets an observable that is notified when the dialog is finished closing.
             * @return {?}
             */
            function () {
                return this._afterClosed.asObservable();
            };
            /**
             * Gets an observable that is notified when the dialog has started closing.
             */
            /**
             * Gets an observable that is notified when the dialog has started closing.
             * @return {?}
             */
            MatDialogRef.prototype.beforeClose = /**
             * Gets an observable that is notified when the dialog has started closing.
             * @return {?}
             */
            function () {
                return this._beforeClose.asObservable();
            };
            /**
             * Gets an observable that emits when the overlay's backdrop has been clicked.
             */
            /**
             * Gets an observable that emits when the overlay's backdrop has been clicked.
             * @return {?}
             */
            MatDialogRef.prototype.backdropClick = /**
             * Gets an observable that emits when the overlay's backdrop has been clicked.
             * @return {?}
             */
            function () {
                return this._overlayRef.backdropClick();
            };
            /**
             * Gets an observable that emits when keydown events are targeted on the overlay.
             */
            /**
             * Gets an observable that emits when keydown events are targeted on the overlay.
             * @return {?}
             */
            MatDialogRef.prototype.keydownEvents = /**
             * Gets an observable that emits when keydown events are targeted on the overlay.
             * @return {?}
             */
            function () {
                return this._overlayRef.keydownEvents();
            };
            /**
             * Updates the dialog's position.
             * @param position New dialog position.
             */
            /**
             * Updates the dialog's position.
             * @param {?=} position New dialog position.
             * @return {?}
             */
            MatDialogRef.prototype.updatePosition = /**
             * Updates the dialog's position.
             * @param {?=} position New dialog position.
             * @return {?}
             */
            function (position) {
                var /** @type {?} */ strategy = this._getPositionStrategy();
                if (position && (position.left || position.right)) {
                    position.left ? strategy.left(position.left) : strategy.right(position.right);
                }
                else {
                    strategy.centerHorizontally();
                }
                if (position && (position.top || position.bottom)) {
                    position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);
                }
                else {
                    strategy.centerVertically();
                }
                this._overlayRef.updatePosition();
                return this;
            };
            /**
             * Updates the dialog's width and height.
             * @param width New width of the dialog.
             * @param height New height of the dialog.
             */
            /**
             * Updates the dialog's width and height.
             * @param {?=} width New width of the dialog.
             * @param {?=} height New height of the dialog.
             * @return {?}
             */
            MatDialogRef.prototype.updateSize = /**
             * Updates the dialog's width and height.
             * @param {?=} width New width of the dialog.
             * @param {?=} height New height of the dialog.
             * @return {?}
             */
            function (width, height) {
                if (width === void 0) {
                    width = 'auto';
                }
                if (height === void 0) {
                    height = 'auto';
                }
                this._getPositionStrategy().width(width).height(height);
                this._overlayRef.updatePosition();
                return this;
            };
            /**
             * Fetches the position strategy object from the overlay ref.
             * @return {?}
             */
            MatDialogRef.prototype._getPositionStrategy = /**
             * Fetches the position strategy object from the overlay ref.
             * @return {?}
             */
            function () {
                return /** @type {?} */ (this._overlayRef.getConfig().positionStrategy);
            };
            return MatDialogRef;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Injection token that can be used to access the data that was passed in to a dialog.
         */
        var /** @type {?} */ MAT_DIALOG_DATA = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('MatDialogData');
        /**
         * Injection token that can be used to specify default dialog options.
         */
        var /** @type {?} */ MAT_DIALOG_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('mat-dialog-default-options');
        /**
         * Injection token that determines the scroll handling while the dialog is open.
         */
        var /** @type {?} */ MAT_DIALOG_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["InjectionToken"]('mat-dialog-scroll-strategy');

        /**
         * \@docs-private
         * @param {?} overlay
         * @return {?}
         */
        function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {
            return function () {
                return overlay.scrollStrategies.block();
            };
        }

        /**
         * \@docs-private
         * @param {?} overlay
         * @return {?}
         */
        function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
            return function () {
                return overlay.scrollStrategies.block();
            };
        }

        /**
         * \@docs-private
         */
        var /** @type {?} */ MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {
            provide: MAT_DIALOG_SCROLL_STRATEGY,
            deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_10__["Overlay"]],
            useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,
        };
        /**
         * Service to open Material Design modal dialogs.
         */
        var MatDialog = /** @class */ (function () {
            function MatDialog(_overlay, _injector, _location, _defaultOptions, _scrollStrategy, _parentDialog, _overlayContainer) {
                var _this = this;
                this._overlay = _overlay;
                this._injector = _injector;
                this._location = _location;
                this._defaultOptions = _defaultOptions;
                this._scrollStrategy = _scrollStrategy;
                this._parentDialog = _parentDialog;
                this._overlayContainer = _overlayContainer;
                this._openDialogsAtThisLevel = [];
                this._afterAllClosedAtThisLevel = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
                this._afterOpenAtThisLevel = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
                this._ariaHiddenElements = new Map();
                /**
                 * Stream that emits when all open dialog have finished closing.
                 * Will emit on subscribe if there are no open dialogs to begin with.
                 */
                this.afterAllClosed = Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["defer"])(function () {
                    return _this.openDialogs.length ?
                        _this._afterAllClosed :
                        _this._afterAllClosed.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["startWith"])(undefined));
                });
            }

            Object.defineProperty(MatDialog.prototype, "openDialogs", {
                /** Keeps track of the currently-open dialogs. */
                get: /**
                 * Keeps track of the currently-open dialogs.
                 * @return {?}
                 */
                function () {
                    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatDialog.prototype, "afterOpen", {
                /** Stream that emits when a dialog has been opened. */
                get: /**
                 * Stream that emits when a dialog has been opened.
                 * @return {?}
                 */
                function () {
                    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatDialog.prototype, "_afterAllClosed", {
                get: /**
                 * @return {?}
                 */
                function () {
                    var /** @type {?} */ parent = this._parentDialog;
                    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Opens a modal dialog containing the given component.
             * @param componentOrTemplateRef Type of the component to load into the dialog,
             *     or a TemplateRef to instantiate as the dialog content.
             * @param config Extra configuration options.
             * @returns Reference to the newly-opened dialog.
             */
            /**
             * Opens a modal dialog containing the given component.
             * @template T, D, R
             * @param {?} componentOrTemplateRef Type of the component to load into the dialog,
             *     or a TemplateRef to instantiate as the dialog content.
             * @param {?=} config Extra configuration options.
             * @return {?} Reference to the newly-opened dialog.
             */
            MatDialog.prototype.open = /**
             * Opens a modal dialog containing the given component.
             * @template T, D, R
             * @param {?} componentOrTemplateRef Type of the component to load into the dialog,
             *     or a TemplateRef to instantiate as the dialog content.
             * @param {?=} config Extra configuration options.
             * @return {?} Reference to the newly-opened dialog.
             */
            function (componentOrTemplateRef, config) {
                var _this = this;
                config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());
                if (config.id && this.getDialogById(config.id)) {
                    throw Error("Dialog with id \"" + config.id + "\" exists already. The dialog id must be unique.");
                }
                var /** @type {?} */ overlayRef = this._createOverlay(config);
                var /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);
                var /** @type {?} */ dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);
                // If this is the first dialog that we're opening, hide all the non-overlay content.
                if (!this.openDialogs.length) {
                    this._hideNonDialogContentFromAssistiveTechnology();
                }
                this.openDialogs.push(dialogRef);
                dialogRef.afterClosed().subscribe(function () {
                    return _this._removeOpenDialog(dialogRef);
                });
                this.afterOpen.next(dialogRef);
                return dialogRef;
            };
            /**
             * Closes all of the currently-open dialogs.
             */
            /**
             * Closes all of the currently-open dialogs.
             * @return {?}
             */
            MatDialog.prototype.closeAll = /**
             * Closes all of the currently-open dialogs.
             * @return {?}
             */
            function () {
                var /** @type {?} */ i = this.openDialogs.length;
                while (i--) {
                    // The `_openDialogs` property isn't updated after close until the rxjs subscription
                    // runs on the next microtask, in addition to modifying the array as we're going
                    // through it. We loop through all of them and call close without assuming that
                    // they'll be removed from the list instantaneously.
                    this.openDialogs[i].close();
                }
            };
            /**
             * Finds an open dialog by its id.
             * @param id ID to use when looking up the dialog.
             */
            /**
             * Finds an open dialog by its id.
             * @param {?} id ID to use when looking up the dialog.
             * @return {?}
             */
            MatDialog.prototype.getDialogById = /**
             * Finds an open dialog by its id.
             * @param {?} id ID to use when looking up the dialog.
             * @return {?}
             */
            function (id) {
                return this.openDialogs.find(function (dialog) {
                    return dialog.id === id;
                });
            };
            /**
             * Creates the overlay into which the dialog will be loaded.
             * @param {?} config The dialog configuration.
             * @return {?} A promise resolving to the OverlayRef for the created overlay.
             */
            MatDialog.prototype._createOverlay = /**
             * Creates the overlay into which the dialog will be loaded.
             * @param {?} config The dialog configuration.
             * @return {?} A promise resolving to the OverlayRef for the created overlay.
             */
            function (config) {
                var /** @type {?} */ overlayConfig = this._getOverlayConfig(config);
                return this._overlay.create(overlayConfig);
            };
            /**
             * Creates an overlay config from a dialog config.
             * @param {?} dialogConfig The dialog configuration.
             * @return {?} The overlay configuration.
             */
            MatDialog.prototype._getOverlayConfig = /**
             * Creates an overlay config from a dialog config.
             * @param {?} dialogConfig The dialog configuration.
             * @return {?} The overlay configuration.
             */
            function (dialogConfig) {
                var /** @type {?} */ state$$1 = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_10__["OverlayConfig"]({
                    positionStrategy: this._overlay.position().global(),
                    scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),
                    panelClass: dialogConfig.panelClass,
                    hasBackdrop: dialogConfig.hasBackdrop,
                    direction: dialogConfig.direction,
                    minWidth: dialogConfig.minWidth,
                    minHeight: dialogConfig.minHeight,
                    maxWidth: dialogConfig.maxWidth,
                    maxHeight: dialogConfig.maxHeight
                });
                if (dialogConfig.backdropClass) {
                    state$$1.backdropClass = dialogConfig.backdropClass;
                }
                return state$$1;
            };
            /**
             * Attaches an MatDialogContainer to a dialog's already-created overlay.
             * @param {?} overlay Reference to the dialog's underlying overlay.
             * @param {?} config The dialog configuration.
             * @return {?} A promise resolving to a ComponentRef for the attached container.
             */
            MatDialog.prototype._attachDialogContainer = /**
             * Attaches an MatDialogContainer to a dialog's already-created overlay.
             * @param {?} overlay Reference to the dialog's underlying overlay.
             * @param {?} config The dialog configuration.
             * @return {?} A promise resolving to a ComponentRef for the attached container.
             */
            function (overlay, config) {
                var /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
                var /** @type {?} */ injector = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__["PortalInjector"](userInjector || this._injector, new WeakMap([
                    [MatDialogConfig, config]
                ]));
                var /** @type {?} */ containerPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__["ComponentPortal"](MatDialogContainer, config.viewContainerRef, injector);
                var /** @type {?} */ containerRef = overlay.attach(containerPortal);
                return containerRef.instance;
            };
            /**
             * Attaches the user-provided component to the already-created MatDialogContainer.
             * @template T, R
             * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,
             *     or a TemplateRef to instantiate as the content.
             * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.
             * @param {?} overlayRef Reference to the overlay in which the dialog resides.
             * @param {?} config The dialog configuration.
             * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.
             */
            MatDialog.prototype._attachDialogContent = /**
             * Attaches the user-provided component to the already-created MatDialogContainer.
             * @template T, R
             * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,
             *     or a TemplateRef to instantiate as the content.
             * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.
             * @param {?} overlayRef Reference to the overlay in which the dialog resides.
             * @param {?} config The dialog configuration.
             * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.
             */
            function (componentOrTemplateRef, dialogContainer, overlayRef, config) {
                // Create a reference to the dialog we're creating in order to give the user a handle
                // to modify and close it.
                var /** @type {?} */ dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id);
                // When the dialog backdrop is clicked, we want to close it.
                if (config.hasBackdrop) {
                    overlayRef.backdropClick().subscribe(function () {
                        if (!dialogRef.disableClose) {
                            dialogRef.close();
                        }
                    });
                }
                if (componentOrTemplateRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_2__["TemplateRef"]) {
                    dialogContainer.attachTemplatePortal(new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__["TemplatePortal"](componentOrTemplateRef, /** @type {?} */ ((null)), /** @type {?} */ ({
                        $implicit: config.data,
                        dialogRef: dialogRef
                    })));
                }
                else {
                    var /** @type {?} */ injector = this._createInjector(config, dialogRef, dialogContainer);
                    var /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__["ComponentPortal"](componentOrTemplateRef, undefined, injector));
                    dialogRef.componentInstance = contentRef.instance;
                }
                dialogRef
                    .updateSize(config.width, config.height)
                    .updatePosition(config.position);
                return dialogRef;
            };
            /**
             * Creates a custom injector to be used inside the dialog. This allows a component loaded inside
             * of a dialog to close itself and, optionally, to return a value.
             * @template T
             * @param {?} config Config object that is used to construct the dialog.
             * @param {?} dialogRef Reference to the dialog.
             * @param {?} dialogContainer
             * @return {?} The custom injector that can be used inside the dialog.
             */
            MatDialog.prototype._createInjector = /**
             * Creates a custom injector to be used inside the dialog. This allows a component loaded inside
             * of a dialog to close itself and, optionally, to return a value.
             * @template T
             * @param {?} config Config object that is used to construct the dialog.
             * @param {?} dialogRef Reference to the dialog.
             * @param {?} dialogContainer
             * @return {?} The custom injector that can be used inside the dialog.
             */
            function (config, dialogRef, dialogContainer) {
                var /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
                // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's
                // content are created out of the same ViewContainerRef and as such, are siblings for injector
                // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly
                // added to the injection tokens.
                var /** @type {?} */ injectionTokens = new WeakMap([
                    [MatDialogContainer, dialogContainer],
                    [MAT_DIALOG_DATA, config.data],
                    [MatDialogRef, dialogRef]
                ]);
                if (config.direction &&
                    (!userInjector || !userInjector.get(_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_9__["Directionality"], null))) {
                    injectionTokens.set(_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_9__["Directionality"], {
                        value: config.direction,
                        change: Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["of"])()
                    });
                }
                return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__["PortalInjector"](userInjector || this._injector, injectionTokens);
            };
            /**
             * Removes a dialog from the array of open dialogs.
             * @param {?} dialogRef Dialog to be removed.
             * @return {?}
             */
            MatDialog.prototype._removeOpenDialog = /**
             * Removes a dialog from the array of open dialogs.
             * @param {?} dialogRef Dialog to be removed.
             * @return {?}
             */
            function (dialogRef) {
                var /** @type {?} */ index = this.openDialogs.indexOf(dialogRef);
                if (index > -1) {
                    this.openDialogs.splice(index, 1);
                    // If all the dialogs were closed, remove/restore the `aria-hidden`
                    // to a the siblings and emit to the `afterAllClosed` stream.
                    if (!this.openDialogs.length) {
                        this._ariaHiddenElements.forEach(function (previousValue, element) {
                            if (previousValue) {
                                element.setAttribute('aria-hidden', previousValue);
                            }
                            else {
                                element.removeAttribute('aria-hidden');
                            }
                        });
                        this._ariaHiddenElements.clear();
                        this._afterAllClosed.next();
                    }
                }
            };
            /**
             * Hides all of the content that isn't an overlay from assistive technology.
             * @return {?}
             */
            MatDialog.prototype._hideNonDialogContentFromAssistiveTechnology = /**
             * Hides all of the content that isn't an overlay from assistive technology.
             * @return {?}
             */
            function () {
                var /** @type {?} */ overlayContainer = this._overlayContainer.getContainerElement();
                // Ensure that the overlay container is attached to the DOM.
                if (overlayContainer.parentElement) {
                    var /** @type {?} */ siblings = overlayContainer.parentElement.children;
                    for (var /** @type {?} */ i = siblings.length - 1; i > -1; i--) {
                        var /** @type {?} */ sibling = siblings[i];
                        if (sibling !== overlayContainer &&
                            sibling.nodeName !== 'SCRIPT' &&
                            sibling.nodeName !== 'STYLE' &&
                            !sibling.hasAttribute('aria-live')) {
                            this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));
                            sibling.setAttribute('aria-hidden', 'true');
                        }
                    }
                }
            };
            MatDialog.decorators = [
                {type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"]},
            ];
            /** @nocollapse */
            MatDialog.ctorParameters = function () {
                return [
                    {type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_10__["Overlay"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Injector"],},
                    {
                        type: _angular_common__WEBPACK_IMPORTED_MODULE_3__["Location"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]},]
                    },
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
                            args: [MAT_DIALOG_DEFAULT_OPTIONS,]
                        },]
                    },
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Inject"],
                            args: [MAT_DIALOG_SCROLL_STRATEGY,]
                        },]
                    },
                    {
                        type: MatDialog,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]}, {type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["SkipSelf"]},]
                    },
                    {type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_10__["OverlayContainer"],},
                ];
            };
            return MatDialog;
        }());

        /**
         * Applies default options to the dialog config.
         * @param {?=} config Config to be modified.
         * @param {?=} defaultOptions Default options provided.
         * @return {?} The new configuration object.
         */
        function _applyConfigDefaults(config, defaultOptions) {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__assign"])({}, defaultOptions, config);
        }

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Counter used to generate unique IDs for dialog elements.
         */
        var /** @type {?} */ dialogElementUid = 0;
        /**
         * Button that will close the current dialog.
         */
        var MatDialogClose = /** @class */ (function () {
            function MatDialogClose(dialogRef, _elementRef, _dialog) {
                this.dialogRef = dialogRef;
                this._elementRef = _elementRef;
                this._dialog = _dialog;
                /**
                 * Screenreader label for the button.
                 */
                this.ariaLabel = 'Close dialog';
            }

            /**
             * @return {?}
             */
            MatDialogClose.prototype.ngOnInit = /**
             * @return {?}
             */
            function () {
                if (!this.dialogRef) {
                    // When this directive is included in a dialog via TemplateRef (rather than being
                    // in a Component), the DialogRef isn't available via injection because embedded
                    // views cannot be given a custom injector. Instead, we look up the DialogRef by
                    // ID. This must occur in `onInit`, as the ID binding for the dialog container won't
                    // be resolved at constructor time.
                    this.dialogRef = /** @type {?} */ ((getClosestDialog(this._elementRef, this._dialog.openDialogs)));
                }
            };
            /**
             * @param {?} changes
             * @return {?}
             */
            MatDialogClose.prototype.ngOnChanges = /**
             * @param {?} changes
             * @return {?}
             */
            function (changes) {
                var /** @type {?} */ proxiedChange = changes["_matDialogClose"] || changes["_matDialogCloseResult"];
                if (proxiedChange) {
                    this.dialogResult = proxiedChange.currentValue;
                }
            };
            MatDialogClose.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                        selector: "button[mat-dialog-close], button[matDialogClose]",
                        exportAs: 'matDialogClose',
                        host: {
                            '(click)': 'dialogRef.close(dialogResult)',
                            '[attr.aria-label]': 'ariaLabel',
                            'type': 'button',
                        }
                    },]
                },
            ];
            /** @nocollapse */
            MatDialogClose.ctorParameters = function () {
                return [
                    {type: MatDialogRef, decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]},]},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"],},
                    {type: MatDialog,},
                ];
            };
            MatDialogClose.propDecorators = {
                "ariaLabel": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"], args: ['aria-label',]},],
                "dialogResult": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
                    args: ['mat-dialog-close',]
                },],
                "_matDialogClose": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"],
                    args: ['matDialogClose',]
                },],
            };
            return MatDialogClose;
        }());
        /**
         * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.
         */
        var MatDialogTitle = /** @class */ (function () {
            function MatDialogTitle(_dialogRef, _elementRef, _dialog) {
                this._dialogRef = _dialogRef;
                this._elementRef = _elementRef;
                this._dialog = _dialog;
                this.id = "mat-dialog-title-" + dialogElementUid++;
            }

            /**
             * @return {?}
             */
            MatDialogTitle.prototype.ngOnInit = /**
             * @return {?}
             */
            function () {
                var _this = this;
                if (!this._dialogRef) {
                    this._dialogRef = /** @type {?} */ ((getClosestDialog(this._elementRef, this._dialog.openDialogs)));
                }
                if (this._dialogRef) {
                    Promise.resolve().then(function () {
                        var /** @type {?} */ container = _this._dialogRef._containerInstance;
                        if (container && !container._ariaLabelledBy) {
                            container._ariaLabelledBy = _this.id;
                        }
                    });
                }
            };
            MatDialogTitle.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                        selector: '[mat-dialog-title], [matDialogTitle]',
                        exportAs: 'matDialogTitle',
                        host: {
                            'class': 'mat-dialog-title',
                            '[id]': 'id',
                        },
                    },]
                },
            ];
            /** @nocollapse */
            MatDialogTitle.ctorParameters = function () {
                return [
                    {type: MatDialogRef, decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Optional"]},]},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"],},
                    {type: MatDialog,},
                ];
            };
            MatDialogTitle.propDecorators = {
                "id": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]},],
            };
            return MatDialogTitle;
        }());
        /**
         * Scrollable content container of a dialog.
         */
        var MatDialogContent = /** @class */ (function () {
            function MatDialogContent() {
            }

            MatDialogContent.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                        selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]",
                        host: {'class': 'mat-dialog-content'}
                    },]
                },
            ];
            return MatDialogContent;
        }());
        /**
         * Container for the bottom action buttons in a dialog.
         * Stays fixed to the bottom when scrolling.
         */
        var MatDialogActions = /** @class */ (function () {
            function MatDialogActions() {
            }

            MatDialogActions.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Directive"], args: [{
                        selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]",
                        host: {'class': 'mat-dialog-actions'}
                    },]
                },
            ];
            return MatDialogActions;
        }());

        /**
         * Finds the closest MatDialogRef to an element by looking at the DOM.
         * @param {?} element Element relative to which to look for a dialog.
         * @param {?} openDialogs References to the currently-open dialogs.
         * @return {?}
         */
        function getClosestDialog(element, openDialogs) {
            var /** @type {?} */ parent = element.nativeElement.parentElement;
            while (parent && !parent.classList.contains('mat-dialog-container')) {
                parent = parent.parentElement;
            }
            return parent ? openDialogs.find(function (dialog) {
                return dialog.id === /** @type {?} */ ((parent)).id;
            }) : null;
        }

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatDialogModule = /** @class */ (function () {
            function MatDialogModule() {
            }

            MatDialogModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"], args: [{
                        imports: [
                            _angular_common__WEBPACK_IMPORTED_MODULE_3__["CommonModule"],
                            _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_10__["OverlayModule"],
                            _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_4__["PortalModule"],
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_11__["MatCommonModule"],
                        ],
                        exports: [
                            MatDialogContainer,
                            MatDialogClose,
                            MatDialogTitle,
                            MatDialogContent,
                            MatDialogActions,
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_11__["MatCommonModule"],
                        ],
                        declarations: [
                            MatDialogContainer,
                            MatDialogClose,
                            MatDialogTitle,
                            MatDialogActions,
                            MatDialogContent,
                        ],
                        providers: [
                            MatDialog,
                            MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,
                        ],
                        entryComponents: [MatDialogContainer],
                    },]
                },
            ];
            return MatDialogModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=dialog.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/expansion.es5.js":
    /*!**************************************************************!*\
  !*** ./node_modules/@angular/material/esm5/expansion.es5.js ***!
  \**************************************************************/
    /*! exports provided: MatExpansionModule, MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle, MatExpansionPanelContent, EXPANSION_PANEL_ANIMATION_TIMING, matExpansionAnimations */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatExpansionModule", function () {
            return MatExpansionModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatAccordion", function () {
            return MatAccordion;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatExpansionPanel", function () {
            return MatExpansionPanel;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatExpansionPanelActionRow", function () {
            return MatExpansionPanelActionRow;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatExpansionPanelHeader", function () {
            return MatExpansionPanelHeader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatExpansionPanelDescription", function () {
            return MatExpansionPanelDescription;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatExpansionPanelTitle", function () {
            return MatExpansionPanelTitle;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatExpansionPanelContent", function () {
            return MatExpansionPanelContent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "EXPANSION_PANEL_ANIMATION_TIMING", function () {
            return EXPANSION_PANEL_ANIMATION_TIMING;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "matExpansionAnimations", function () {
            return matExpansionAnimations;
        });
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/accordion */ "./node_modules/@angular/cdk/esm5/accordion.es5.js");
        /* harmony import */
        var _angular_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm5/animations.js");
        /* harmony import */
        var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm5/collections.es5.js");
        /* harmony import */
        var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm5/portal.es5.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm5/keycodes.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Directive for a Material Design Accordion.
         */
        var MatAccordion = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatAccordion, _super);

            function MatAccordion() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this._hideToggle = false;
                /**
                 * The display mode used for all expansion panels in the accordion. Currently two display
                 * modes exist:
                 *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded
                 *     panel at a different elevation from the reset of the accordion.
                 *  flat - no spacing is placed around expanded panels, showing all panels at the same
                 *     elevation.
                 */
                _this.displayMode = 'default';
                return _this;
            }

            Object.defineProperty(MatAccordion.prototype, "hideToggle", {
                get: /**
                 * Whether the expansion indicator should be hidden.
                 * @return {?}
                 */
                function () {
                    return this._hideToggle;
                },
                set: /**
                 * @param {?} show
                 * @return {?}
                 */
                function (show) {
                    this._hideToggle = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(show);
                },
                enumerable: true,
                configurable: true
            });
            MatAccordion.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: 'mat-accordion',
                        exportAs: 'matAccordion',
                        host: {
                            class: 'mat-accordion'
                        }
                    },]
                },
            ];
            /** @nocollapse */
            MatAccordion.propDecorators = {
                "hideToggle": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "displayMode": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
            };
            return MatAccordion;
        }(_angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_3__["CdkAccordion"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Time and timing curve for expansion panel animations.
         */
        var /** @type {?} */ EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';
        /**
         * Animations used by the Material expansion panel.
         */
        var /** @type {?} */ matExpansionAnimations = {
            /** Animation that rotates the indicator arrow. */
            indicatorRotate: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('indicatorRotate', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({transform: 'rotate(0deg)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('expanded', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({transform: 'rotate(180deg)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('expanded <=> collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])(EXPANSION_PANEL_ANIMATION_TIMING)),
            ]),
            /** Animation that expands and collapses the panel header height. */
            expansionHeaderHeight: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('expansionHeight', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({
                    height: '{{collapsedHeight}}',
                }), {
                    params: {collapsedHeight: '48px'},
                }),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('expanded', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({
                    height: '{{expandedHeight}}'
                }), {
                    params: {expandedHeight: '64px'}
                }),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('expanded <=> collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["group"])([
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["query"])('@indicatorRotate', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animateChild"])(), {optional: true}),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])(EXPANSION_PANEL_ANIMATION_TIMING),
                ])),
            ]),
            /** Animation that expands and collapses the panel content. */
            bodyExpansion: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["trigger"])('bodyExpansion', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({
                    height: '0px',
                    visibility: 'hidden'
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["state"])('expanded', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["style"])({
                    height: '*',
                    visibility: 'visible'
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["transition"])('expanded <=> collapsed', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_4__["animate"])(EXPANSION_PANEL_ANIMATION_TIMING)),
            ])
        };

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Expansion panel content that will be rendered lazily
         * after the panel is opened for the first time.
         */
        var MatExpansionPanelContent = /** @class */ (function () {
            function MatExpansionPanelContent(_template) {
                this._template = _template;
            }

            MatExpansionPanelContent.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: 'ng-template[matExpansionPanelContent]'
                    },]
                },
            ];
            /** @nocollapse */
            MatExpansionPanelContent.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],},
                ];
            };
            return MatExpansionPanelContent;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Counter for generating unique element ids.
         */
        var /** @type {?} */ uniqueId = 0;
        /**
         * `<mat-expansion-panel>`
         *
         * This component can be used as a single element to show expandable content, or as one of
         * multiple children of an element with the MatAccordion directive attached.
         */
        var MatExpansionPanel = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatExpansionPanel, _super);

            function MatExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef) {
                var _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;
                _this._viewContainerRef = _viewContainerRef;
                _this._hideToggle = false;
                /**
                 * Stream that emits for changes in `\@Input` properties.
                 */
                _this._inputChanges = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
                /**
                 * ID for the associated header element. Used for a11y labelling.
                 */
                _this._headerId = "mat-expansion-panel-header-" + uniqueId++;
                _this.accordion = accordion;
                return _this;
            }

            Object.defineProperty(MatExpansionPanel.prototype, "hideToggle", {
                get: /**
                 * Whether the toggle indicator should be hidden.
                 * @return {?}
                 */
                function () {
                    return this._hideToggle;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._hideToggle = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            /** Whether the expansion indicator should be hidden. */
            /**
             * Whether the expansion indicator should be hidden.
             * @return {?}
             */
            MatExpansionPanel.prototype._getHideToggle = /**
             * Whether the expansion indicator should be hidden.
             * @return {?}
             */
            function () {
                if (this.accordion) {
                    return this.accordion.hideToggle;
                }
                return this.hideToggle;
            };
            /** Determines whether the expansion panel should have spacing between it and its siblings. */
            /**
             * Determines whether the expansion panel should have spacing between it and its siblings.
             * @return {?}
             */
            MatExpansionPanel.prototype._hasSpacing = /**
             * Determines whether the expansion panel should have spacing between it and its siblings.
             * @return {?}
             */
            function () {
                if (this.accordion) {
                    return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';
                }
                return false;
            };
            /** Gets the expanded state string. */
            /**
             * Gets the expanded state string.
             * @return {?}
             */
            MatExpansionPanel.prototype._getExpandedState = /**
             * Gets the expanded state string.
             * @return {?}
             */
            function () {
                return this.expanded ? 'expanded' : 'collapsed';
            };
            /**
             * @return {?}
             */
            MatExpansionPanel.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                var _this = this;
                if (this._lazyContent) {
                    // Render the content as soon as the panel becomes open.
                    this.opened.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["startWith"])(/** @type {?} */ ((null))), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["filter"])(function () {
                        return _this.expanded && !_this._portal;
                    }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["take"])(1)).subscribe(function () {
                        _this._portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__["TemplatePortal"](_this._lazyContent._template, _this._viewContainerRef);
                    });
                }
            };
            /**
             * @param {?} changes
             * @return {?}
             */
            MatExpansionPanel.prototype.ngOnChanges = /**
             * @param {?} changes
             * @return {?}
             */
            function (changes) {
                this._inputChanges.next(changes);
            };
            /**
             * @return {?}
             */
            MatExpansionPanel.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                _super.prototype.ngOnDestroy.call(this);
                this._inputChanges.complete();
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatExpansionPanel.prototype._bodyAnimation = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                var /** @type {?} */ classList = event.element.classList;
                var /** @type {?} */ cssClass = 'mat-expanded';
                var phaseName = event.phaseName, toState = event.toState;
                // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in
                // order to prevent the cases where switching too early would cause the animation to jump.
                // Note that we do it directly on the DOM element to avoid the slight delay that comes
                // with doing it via change detection.
                if (phaseName === 'done' && toState === 'expanded') {
                    classList.add(cssClass);
                }
                else if (phaseName === 'start' && toState === 'collapsed') {
                    classList.remove(cssClass);
                }
            };
            MatExpansionPanel.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        styles: [".mat-expansion-panel{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);box-sizing:content-box;display:block;margin:0;transition:margin 225ms cubic-bezier(.4,0,.2,1)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-expansion-panel-content{overflow:hidden}.mat-expansion-panel-content.mat-expanded{overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button{margin-left:0;margin-right:8px}"],
                        selector: 'mat-expansion-panel',
                        exportAs: 'matExpansionPanel',
                        template: "<ng-content select=\"mat-expansion-panel-header\"></ng-content><div class=\"mat-expansion-panel-content\" role=\"region\" [@bodyExpansion]=\"_getExpandedState()\" (@bodyExpansion.done)=\"_bodyAnimation($event)\" (@bodyExpansion.start)=\"_bodyAnimation($event)\" [attr.aria-labelledby]=\"_headerId\" [id]=\"id\" #body><div class=\"mat-expansion-panel-body\"><ng-content></ng-content><ng-template [cdkPortalOutlet]=\"_portal\"></ng-template></div><ng-content select=\"mat-action-row\"></ng-content></div>",
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        inputs: ['disabled', 'expanded'],
                        outputs: ['opened', 'closed', 'expandedChange'],
                        animations: [matExpansionAnimations.bodyExpansion],
                        host: {
                            'class': 'mat-expansion-panel',
                            '[class.mat-expanded]': 'expanded',
                            '[class.mat-expansion-panel-spacing]': '_hasSpacing()',
                        }
                    },]
                },
            ];
            /** @nocollapse */
            MatExpansionPanel.ctorParameters = function () {
                return [
                    {type: MatAccordion, decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]},]},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],},
                    {type: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__["UniqueSelectionDispatcher"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"],},
                ];
            };
            MatExpansionPanel.propDecorators = {
                "hideToggle": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "_lazyContent": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
                    args: [MatExpansionPanelContent,]
                },],
            };
            return MatExpansionPanel;
        }(_angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_3__["CdkAccordionItem"]));
        var MatExpansionPanelActionRow = /** @class */ (function () {
            function MatExpansionPanelActionRow() {
            }

            MatExpansionPanelActionRow.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: 'mat-action-row',
                        host: {
                            class: 'mat-action-row'
                        }
                    },]
                },
            ];
            return MatExpansionPanelActionRow;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * `<mat-expansion-panel-header>`
         *
         * This component corresponds to the header element of an `<mat-expansion-panel>`.
         */
        var MatExpansionPanelHeader = /** @class */ (function () {
            function MatExpansionPanelHeader(panel, _element, _focusMonitor, _changeDetectorRef) {
                var _this = this;
                this.panel = panel;
                this._element = _element;
                this._focusMonitor = _focusMonitor;
                this._changeDetectorRef = _changeDetectorRef;
                this._parentChangeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_7__["Subscription"].EMPTY;
                // Since the toggle state depends on an @Input on the panel, we
                // need to  subscribe and trigger change detection manually.
                this._parentChangeSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["merge"])(panel.opened, panel.closed, panel._inputChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["filter"])(function (changes) {
                    return !!(changes["hideToggle"] || changes["disabled"]);
                })))
                    .subscribe(function () {
                        return _this._changeDetectorRef.markForCheck();
                    });
                _focusMonitor.monitor(_element.nativeElement);
            }

            /** Toggles the expanded state of the panel. */
            /**
             * Toggles the expanded state of the panel.
             * @return {?}
             */
            MatExpansionPanelHeader.prototype._toggle = /**
             * Toggles the expanded state of the panel.
             * @return {?}
             */
            function () {
                this.panel.toggle();
            };
            /** Gets whether the panel is expanded. */
            /**
             * Gets whether the panel is expanded.
             * @return {?}
             */
            MatExpansionPanelHeader.prototype._isExpanded = /**
             * Gets whether the panel is expanded.
             * @return {?}
             */
            function () {
                return this.panel.expanded;
            };
            /** Gets the expanded state string of the panel. */
            /**
             * Gets the expanded state string of the panel.
             * @return {?}
             */
            MatExpansionPanelHeader.prototype._getExpandedState = /**
             * Gets the expanded state string of the panel.
             * @return {?}
             */
            function () {
                return this.panel._getExpandedState();
            };
            /** Gets the panel id. */
            /**
             * Gets the panel id.
             * @return {?}
             */
            MatExpansionPanelHeader.prototype._getPanelId = /**
             * Gets the panel id.
             * @return {?}
             */
            function () {
                return this.panel.id;
            };
            /** Gets whether the expand indicator should be shown. */
            /**
             * Gets whether the expand indicator should be shown.
             * @return {?}
             */
            MatExpansionPanelHeader.prototype._showToggle = /**
             * Gets whether the expand indicator should be shown.
             * @return {?}
             */
            function () {
                return !this.panel.hideToggle && !this.panel.disabled;
            };
            /** Handle keydown event calling to toggle() if appropriate. */
            /**
             * Handle keydown event calling to toggle() if appropriate.
             * @param {?} event
             * @return {?}
             */
            MatExpansionPanelHeader.prototype._keydown = /**
             * Handle keydown event calling to toggle() if appropriate.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                switch (event.keyCode) {
                    // Toggle for space and enter keys.
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["SPACE"]:
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_10__["ENTER"]:
                        event.preventDefault();
                        this._toggle();
                        break;
                    default:
                        return;
                }
            };
            /**
             * @return {?}
             */
            MatExpansionPanelHeader.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._parentChangeSubscription.unsubscribe();
                this._focusMonitor.stopMonitoring(this._element.nativeElement);
            };
            MatExpansionPanelHeader.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'mat-expansion-panel-header',
                        styles: [".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}"],
                        template: "<span class=\"mat-content\"><ng-content select=\"mat-panel-title\"></ng-content><ng-content select=\"mat-panel-description\"></ng-content><ng-content></ng-content></span><span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"_showToggle()\" class=\"mat-expansion-indicator\"></span>",
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        animations: [
                            matExpansionAnimations.indicatorRotate,
                            matExpansionAnimations.expansionHeaderHeight
                        ],
                        host: {
                            'class': 'mat-expansion-panel-header',
                            'role': 'button',
                            '[attr.id]': 'panel._headerId',
                            '[attr.tabindex]': 'panel.disabled ? -1 : 0',
                            '[attr.aria-controls]': '_getPanelId()',
                            '[attr.aria-expanded]': '_isExpanded()',
                            '[attr.aria-disabled]': 'panel.disabled',
                            '[class.mat-expanded]': '_isExpanded()',
                            '(click)': '_toggle()',
                            '(keydown)': '_keydown($event)',
                            '[@expansionHeight]': "{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }",
                        },
                    },]
                },
            ];
            /** @nocollapse */
            MatExpansionPanelHeader.ctorParameters = function () {
                return [
                    {
                        type: MatExpansionPanel,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Host"]},]
                    },
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                    {type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_9__["FocusMonitor"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],},
                ];
            };
            MatExpansionPanelHeader.propDecorators = {
                "expandedHeight": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "collapsedHeight": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
            };
            return MatExpansionPanelHeader;
        }());
        /**
         * `<mat-panel-description>`
         *
         * This directive is to be used inside of the MatExpansionPanelHeader component.
         */
        var MatExpansionPanelDescription = /** @class */ (function () {
            function MatExpansionPanelDescription() {
            }

            MatExpansionPanelDescription.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: 'mat-panel-description',
                        host: {
                            class: 'mat-expansion-panel-header-description'
                        }
                    },]
                },
            ];
            return MatExpansionPanelDescription;
        }());
        /**
         * `<mat-panel-title>`
         *
         * This directive is to be used inside of the MatExpansionPanelHeader component.
         */
        var MatExpansionPanelTitle = /** @class */ (function () {
            function MatExpansionPanelTitle() {
            }

            MatExpansionPanelTitle.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: 'mat-panel-title',
                        host: {
                            class: 'mat-expansion-panel-header-title'
                        }
                    },]
                },
            ];
            return MatExpansionPanelTitle;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatExpansionModule = /** @class */ (function () {
            function MatExpansionModule() {
            }

            MatExpansionModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_11__["CommonModule"], _angular_cdk_accordion__WEBPACK_IMPORTED_MODULE_3__["CdkAccordionModule"], _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__["PortalModule"]],
                        exports: [
                            MatAccordion,
                            MatExpansionPanel,
                            MatExpansionPanelActionRow,
                            MatExpansionPanelHeader,
                            MatExpansionPanelTitle,
                            MatExpansionPanelDescription,
                            MatExpansionPanelContent,
                        ],
                        declarations: [
                            MatAccordion,
                            MatExpansionPanel,
                            MatExpansionPanelActionRow,
                            MatExpansionPanelHeader,
                            MatExpansionPanelTitle,
                            MatExpansionPanelDescription,
                            MatExpansionPanelContent,
                        ],
                    },]
                },
            ];
            return MatExpansionModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=expansion.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/grid-list.es5.js":
    /*!**************************************************************!*\
  !*** ./node_modules/@angular/material/esm5/grid-list.es5.js ***!
  \**************************************************************/
    /*! exports provided: MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatGridListModule", function () {
            return MatGridListModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatGridList", function () {
            return MatGridList;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatGridTile", function () {
            return MatGridTile;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatGridTileText", function () {
            return MatGridTileText;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatGridAvatarCssMatStyler", function () {
            return MatGridAvatarCssMatStyler;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatGridTileHeaderCssMatStyler", function () {
            return MatGridTileHeaderCssMatStyler;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatGridTileFooterCssMatStyler", function () {
            return MatGridTileFooterCssMatStyler;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * Converts values into strings. Falsy values become empty strings.
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        function coerceToString(value) {
            return "" + (value || '');
        }

        /**
         * Converts a value that might be a string into a number.
         * \@docs-private
         * @param {?} value
         * @return {?}
         */
        function coerceToNumber(value) {
            return typeof value === 'string' ? parseInt(value, 10) : value;
        }

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatGridTile = /** @class */ (function () {
            function MatGridTile(_element) {
                this._element = _element;
                this._rowspan = 1;
                this._colspan = 1;
            }

            Object.defineProperty(MatGridTile.prototype, "rowspan", {
                get: /**
                 * Amount of rows that the grid tile takes up.
                 * @return {?}
                 */
                function () {
                    return this._rowspan;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._rowspan = coerceToNumber(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatGridTile.prototype, "colspan", {
                get: /**
                 * Amount of columns that the grid tile takes up.
                 * @return {?}
                 */
                function () {
                    return this._colspan;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._colspan = coerceToNumber(value);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Sets the style of the grid-tile element.  Needs to be set manually to avoid
             * "Changed after checked" errors that would occur with HostBinding.
             */
            /**
             * Sets the style of the grid-tile element.  Needs to be set manually to avoid
             * "Changed after checked" errors that would occur with HostBinding.
             * @param {?} property
             * @param {?} value
             * @return {?}
             */
            MatGridTile.prototype._setStyle = /**
             * Sets the style of the grid-tile element.  Needs to be set manually to avoid
             * "Changed after checked" errors that would occur with HostBinding.
             * @param {?} property
             * @param {?} value
             * @return {?}
             */
            function (property, value) {
                this._element.nativeElement.style[property] = value;
            };
            MatGridTile.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-grid-tile',
                        exportAs: 'matGridTile',
                        host: {
                            'class': 'mat-grid-tile',
                        },
                        template: "<figure class=\"mat-figure\"><ng-content></ng-content></figure>",
                        styles: [".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}"],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                    },]
                },
            ];
            /** @nocollapse */
            MatGridTile.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                ];
            };
            MatGridTile.propDecorators = {
                "rowspan": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "colspan": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
            };
            return MatGridTile;
        }());
        var MatGridTileText = /** @class */ (function () {
            function MatGridTileText(_element) {
                this._element = _element;
            }

            /**
             * @return {?}
             */
            MatGridTileText.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                this._lineSetter = new _angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatLineSetter"](this._lines, this._element);
            };
            MatGridTileText.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-grid-tile-header, mat-grid-tile-footer',
                        template: "<ng-content select=\"[mat-grid-avatar], [matGridAvatar]\"></ng-content><div class=\"mat-grid-list-text\"><ng-content select=\"[mat-line], [matLine]\"></ng-content></div><ng-content></ng-content>",
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                    },]
                },
            ];
            /** @nocollapse */
            MatGridTileText.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                ];
            };
            MatGridTileText.propDecorators = {
                "_lines": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"],
                    args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatLine"],]
                },],
            };
            return MatGridTileText;
        }());
        /**
         * Directive whose purpose is to add the mat- CSS styling to this selector.
         * \@docs-private
         */
        var MatGridAvatarCssMatStyler = /** @class */ (function () {
            function MatGridAvatarCssMatStyler() {
            }

            MatGridAvatarCssMatStyler.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[mat-grid-avatar], [matGridAvatar]',
                        host: {'class': 'mat-grid-avatar'}
                    },]
                },
            ];
            return MatGridAvatarCssMatStyler;
        }());
        /**
         * Directive whose purpose is to add the mat- CSS styling to this selector.
         * \@docs-private
         */
        var MatGridTileHeaderCssMatStyler = /** @class */ (function () {
            function MatGridTileHeaderCssMatStyler() {
            }

            MatGridTileHeaderCssMatStyler.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: 'mat-grid-tile-header',
                        host: {'class': 'mat-grid-tile-header'}
                    },]
                },
            ];
            return MatGridTileHeaderCssMatStyler;
        }());
        /**
         * Directive whose purpose is to add the mat- CSS styling to this selector.
         * \@docs-private
         */
        var MatGridTileFooterCssMatStyler = /** @class */ (function () {
            function MatGridTileFooterCssMatStyler() {
            }

            MatGridTileFooterCssMatStyler.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: 'mat-grid-tile-footer',
                        host: {'class': 'mat-grid-tile-footer'}
                    },]
                },
            ];
            return MatGridTileFooterCssMatStyler;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * Class for determining, from a list of tiles, the (row, col) position of each of those tiles
         * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)
         * because the tiles can have a rowspan.
         *
         * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid
         * large enough to accommodate it so that the tiles still render in the same order in which they
         * are given.
         *
         * The basis of the algorithm is the use of an array to track the already placed tiles. Each
         * element of the array corresponds to a column, and the value indicates how many cells in that
         * column are already occupied; zero indicates an empty cell. Moving "down" to the next row
         * decrements each value in the tracking array (indicating that the column is one cell closer to
         * being free).
         *
         * \@docs-private
         */
        var /**
         * Class for determining, from a list of tiles, the (row, col) position of each of those tiles
         * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)
         * because the tiles can have a rowspan.
         *
         * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid
         * large enough to accommodate it so that the tiles still render in the same order in which they
         * are given.
         *
         * The basis of the algorithm is the use of an array to track the already placed tiles. Each
         * element of the array corresponds to a column, and the value indicates how many cells in that
         * column are already occupied; zero indicates an empty cell. Moving "down" to the next row
         * decrements each value in the tracking array (indicating that the column is one cell closer to
         * being free).
         *
         * \@docs-private
         */
        TileCoordinator = /** @class */ (function () {
            function TileCoordinator(numColumns, tiles) {
                var _this = this;
                /**
                 * Index at which the search for the next gap will start.
                 */
                this.columnIndex = 0;
                /**
                 * The current row index.
                 */
                this.rowIndex = 0;
                this.tracker = new Array(numColumns);
                this.tracker.fill(0, 0, this.tracker.length);
                this.positions = tiles.map(function (tile) {
                    return _this._trackTile(tile);
                });
            }

            Object.defineProperty(TileCoordinator.prototype, "rowCount", {
                /** Gets the total number of rows occupied by tiles */
                get: /**
                 * Gets the total number of rows occupied by tiles
                 * @return {?}
                 */
                function () {
                    return this.rowIndex + 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TileCoordinator.prototype, "rowspan", {
                /**
                 * Gets the total span of rows occupied by tiles.
                 * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.
                 */
                get: /**
                 * Gets the total span of rows occupied by tiles.
                 * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.
                 * @return {?}
                 */
                function () {
                    var /** @type {?} */ lastRowMax = Math.max.apply(Math, this.tracker);
                    // if any of the tiles has a rowspan that pushes it beyond the total row count,
                    // add the difference to the rowcount
                    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Calculates the row and col position of a tile.
             * @param {?} tile
             * @return {?}
             */
            TileCoordinator.prototype._trackTile = /**
             * Calculates the row and col position of a tile.
             * @param {?} tile
             * @return {?}
             */
            function (tile) {
                // Find a gap large enough for this tile.
                var /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);
                // Place tile in the resulting gap.
                this._markTilePosition(gapStartIndex, tile);
                // The next time we look for a gap, the search will start at columnIndex, which should be
                // immediately after the tile that has just been placed.
                this.columnIndex = gapStartIndex + tile.colspan;
                return new TilePosition(this.rowIndex, gapStartIndex);
            };
            /**
             * Finds the next available space large enough to fit the tile.
             * @param {?} tileCols
             * @return {?}
             */
            TileCoordinator.prototype._findMatchingGap = /**
             * Finds the next available space large enough to fit the tile.
             * @param {?} tileCols
             * @return {?}
             */
            function (tileCols) {
                if (tileCols > this.tracker.length) {
                    throw Error("mat-grid-list: tile with colspan " + tileCols + " is wider than " +
                        ("grid with cols=\"" + this.tracker.length + "\"."));
                }
                // Start index is inclusive, end index is exclusive.
                var /** @type {?} */ gapStartIndex = -1;
                var /** @type {?} */ gapEndIndex = -1;
                // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.
                do {
                    // If we've reached the end of the row, go to the next row.
                    if (this.columnIndex + tileCols > this.tracker.length) {
                        this._nextRow();
                        continue;
                    }
                    gapStartIndex = this.tracker.indexOf(0, this.columnIndex);
                    // If there are no more empty spaces in this row at all, move on to the next row.
                    if (gapStartIndex == -1) {
                        this._nextRow();
                        continue;
                    }
                    gapEndIndex = this._findGapEndIndex(gapStartIndex);
                    // If a gap large enough isn't found, we want to start looking immediately after the current
                    // gap on the next iteration.
                    this.columnIndex = gapStartIndex + 1;
                    // Continue iterating until we find a gap wide enough for this tile.
                } while (gapEndIndex - gapStartIndex < tileCols);
                // If we still didn't manage to find a gap, ensure that the index is
                // at least zero so the tile doesn't get pulled out of the grid.
                return Math.max(gapStartIndex, 0);
            };
            /**
             * Move "down" to the next row.
             * @return {?}
             */
            TileCoordinator.prototype._nextRow = /**
             * Move "down" to the next row.
             * @return {?}
             */
            function () {
                this.columnIndex = 0;
                this.rowIndex++;
                // Decrement all spaces by one to reflect moving down one row.
                for (var /** @type {?} */ i = 0; i < this.tracker.length; i++) {
                    this.tracker[i] = Math.max(0, this.tracker[i] - 1);
                }
            };
            /**
             * Finds the end index (exclusive) of a gap given the index from which to start looking.
             * The gap ends when a non-zero value is found.
             * @param {?} gapStartIndex
             * @return {?}
             */
            TileCoordinator.prototype._findGapEndIndex = /**
             * Finds the end index (exclusive) of a gap given the index from which to start looking.
             * The gap ends when a non-zero value is found.
             * @param {?} gapStartIndex
             * @return {?}
             */
            function (gapStartIndex) {
                for (var /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {
                    if (this.tracker[i] != 0) {
                        return i;
                    }
                }
                // The gap ends with the end of the row.
                return this.tracker.length;
            };
            /**
             * Update the tile tracker to account for the given tile in the given space.
             * @param {?} start
             * @param {?} tile
             * @return {?}
             */
            TileCoordinator.prototype._markTilePosition = /**
             * Update the tile tracker to account for the given tile in the given space.
             * @param {?} start
             * @param {?} tile
             * @return {?}
             */
            function (start, tile) {
                for (var /** @type {?} */ i = 0; i < tile.colspan; i++) {
                    this.tracker[start + i] = tile.rowspan;
                }
            };
            return TileCoordinator;
        }());
        /**
         * Simple data structure for tile position (row, col).
         * \@docs-private
         */
        var /**
         * Simple data structure for tile position (row, col).
         * \@docs-private
         */
        TilePosition = /** @class */ (function () {
            function TilePosition(row, col) {
                this.row = row;
                this.col = col;
            }

            return TilePosition;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Sets the style properties for an individual tile, given the position calculated by the
         * Tile Coordinator.
         * \@docs-private
         * @abstract
         */
        var /**
         * Sets the style properties for an individual tile, given the position calculated by the
         * Tile Coordinator.
         * \@docs-private
         * @abstract
         */
        TileStyler = /** @class */ (function () {
            function TileStyler() {
                this._rows = 0;
                this._rowspan = 0;
            }

            /**
             * Adds grid-list layout info once it is available. Cannot be processed in the constructor
             * because these properties haven't been calculated by that point.
             *
             * @param gutterSize Size of the grid's gutter.
             * @param tracker Instance of the TileCoordinator.
             * @param cols Amount of columns in the grid.
             * @param direction Layout direction of the grid.
             */
            /**
             * Adds grid-list layout info once it is available. Cannot be processed in the constructor
             * because these properties haven't been calculated by that point.
             *
             * @param {?} gutterSize Size of the grid's gutter.
             * @param {?} tracker Instance of the TileCoordinator.
             * @param {?} cols Amount of columns in the grid.
             * @param {?} direction Layout direction of the grid.
             * @return {?}
             */
            TileStyler.prototype.init = /**
             * Adds grid-list layout info once it is available. Cannot be processed in the constructor
             * because these properties haven't been calculated by that point.
             *
             * @param {?} gutterSize Size of the grid's gutter.
             * @param {?} tracker Instance of the TileCoordinator.
             * @param {?} cols Amount of columns in the grid.
             * @param {?} direction Layout direction of the grid.
             * @return {?}
             */
            function (gutterSize, tracker, cols, direction) {
                this._gutterSize = normalizeUnits(gutterSize);
                this._rows = tracker.rowCount;
                this._rowspan = tracker.rowspan;
                this._cols = cols;
                this._direction = direction;
            };
            /**
             * Computes the amount of space a single 1x1 tile would take up (width or height).
             * Used as a basis for other calculations.
             * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.
             * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.
             * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().
             */
            /**
             * Computes the amount of space a single 1x1 tile would take up (width or height).
             * Used as a basis for other calculations.
             * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.
             * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.
             * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().
             */
            TileStyler.prototype.getBaseTileSize = /**
             * Computes the amount of space a single 1x1 tile would take up (width or height).
             * Used as a basis for other calculations.
             * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.
             * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.
             * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().
             */
            function (sizePercent, gutterFraction) {
                // Take the base size percent (as would be if evenly dividing the size between cells),
                // and then subtracting the size of one gutter. However, since there are no gutters on the
                // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter
                // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the
                // edge evenly among the cells).
                return "(" + sizePercent + "% - (" + this._gutterSize + " * " + gutterFraction + "))";
            };
            /**
             * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.
             * @param offset Number of tiles that have already been rendered in the row/column.
             * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).
             * @return Position of the tile as a CSS calc() expression.
             */
            /**
             * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.
             * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).
             * @param {?} offset Number of tiles that have already been rendered in the row/column.
             * @return {?} Position of the tile as a CSS calc() expression.
             */
            TileStyler.prototype.getTilePosition = /**
             * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.
             * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).
             * @param {?} offset Number of tiles that have already been rendered in the row/column.
             * @return {?} Position of the tile as a CSS calc() expression.
             */
            function (baseSize, offset) {
                // The position comes the size of a 1x1 tile plus gutter for each previous tile in the
                // row/column (offset).
                return offset === 0 ? '0' : calc("(" + baseSize + " + " + this._gutterSize + ") * " + offset);
            };
            /**
             * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.
             * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).
             * @param span The tile's rowspan or colspan.
             * @return Size of the tile as a CSS calc() expression.
             */
            /**
             * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.
             * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).
             * @param {?} span The tile's rowspan or colspan.
             * @return {?} Size of the tile as a CSS calc() expression.
             */
            TileStyler.prototype.getTileSize = /**
             * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.
             * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).
             * @param {?} span The tile's rowspan or colspan.
             * @return {?} Size of the tile as a CSS calc() expression.
             */
            function (baseSize, span) {
                return "(" + baseSize + " * " + span + ") + (" + (span - 1) + " * " + this._gutterSize + ")";
            };
            /**
             * Sets the style properties to be applied to a tile for the given row and column index.
             * @param tile Tile to which to apply the styling.
             * @param rowIndex Index of the tile's row.
             * @param colIndex Index of the tile's column.
             */
            /**
             * Sets the style properties to be applied to a tile for the given row and column index.
             * @param {?} tile Tile to which to apply the styling.
             * @param {?} rowIndex Index of the tile's row.
             * @param {?} colIndex Index of the tile's column.
             * @return {?}
             */
            TileStyler.prototype.setStyle = /**
             * Sets the style properties to be applied to a tile for the given row and column index.
             * @param {?} tile Tile to which to apply the styling.
             * @param {?} rowIndex Index of the tile's row.
             * @param {?} colIndex Index of the tile's column.
             * @return {?}
             */
            function (tile, rowIndex, colIndex) {
                // Percent of the available horizontal space that one column takes up.
                var /** @type {?} */ percentWidthPerTile = 100 / this._cols;
                // Fraction of the vertical gutter size that each column takes up.
                // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.
                var /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;
                this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);
                this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);
            };
            /** Sets the horizontal placement of the tile in the list. */
            /**
             * Sets the horizontal placement of the tile in the list.
             * @param {?} tile
             * @param {?} colIndex
             * @param {?} percentWidth
             * @param {?} gutterWidth
             * @return {?}
             */
            TileStyler.prototype.setColStyles = /**
             * Sets the horizontal placement of the tile in the list.
             * @param {?} tile
             * @param {?} colIndex
             * @param {?} percentWidth
             * @param {?} gutterWidth
             * @return {?}
             */
            function (tile, colIndex, percentWidth, gutterWidth) {
                // Base horizontal size of a column.
                var /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);
                // The width and horizontal position of each tile is always calculated the same way, but the
                // height and vertical position depends on the rowMode.
                var /** @type {?} */ side = this._direction === 'rtl' ? 'right' : 'left';
                tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));
                tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));
            };
            /**
             * Calculates the total size taken up by gutters across one axis of a list.
             */
            /**
             * Calculates the total size taken up by gutters across one axis of a list.
             * @return {?}
             */
            TileStyler.prototype.getGutterSpan = /**
             * Calculates the total size taken up by gutters across one axis of a list.
             * @return {?}
             */
            function () {
                return this._gutterSize + " * (" + this._rowspan + " - 1)";
            };
            /**
             * Calculates the total size taken up by tiles across one axis of a list.
             * @param tileHeight Height of the tile.
             */
            /**
             * Calculates the total size taken up by tiles across one axis of a list.
             * @param {?} tileHeight Height of the tile.
             * @return {?}
             */
            TileStyler.prototype.getTileSpan = /**
             * Calculates the total size taken up by tiles across one axis of a list.
             * @param {?} tileHeight Height of the tile.
             * @return {?}
             */
            function (tileHeight) {
                return this._rowspan + " * " + this.getTileSize(tileHeight, 1);
            };
            /**
             * Calculates the computed height and returns the correct style property to set.
             * This method can be implemented by each type of TileStyler.
             * @docs-private
             */
            /**
             * Calculates the computed height and returns the correct style property to set.
             * This method can be implemented by each type of TileStyler.
             * \@docs-private
             * @return {?}
             */
            TileStyler.prototype.getComputedHeight = /**
             * Calculates the computed height and returns the correct style property to set.
             * This method can be implemented by each type of TileStyler.
             * \@docs-private
             * @return {?}
             */
            function () {
                return null;
            };
            return TileStyler;
        }());
        /**
         * This type of styler is instantiated when the user passes in a fixed row height.
         * Example `<mat-grid-list cols="3" rowHeight="100px">`
         * \@docs-private
         */
        var /**
         * This type of styler is instantiated when the user passes in a fixed row height.
         * Example `<mat-grid-list cols="3" rowHeight="100px">`
         * \@docs-private
         */
        FixedTileStyler = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(FixedTileStyler, _super);

            function FixedTileStyler(fixedRowHeight) {
                var _this = _super.call(this) || this;
                _this.fixedRowHeight = fixedRowHeight;
                return _this;
            }

            /**
             * @param {?} gutterSize
             * @param {?} tracker
             * @param {?} cols
             * @param {?} direction
             * @return {?}
             */
            FixedTileStyler.prototype.init = /**
             * @param {?} gutterSize
             * @param {?} tracker
             * @param {?} cols
             * @param {?} direction
             * @return {?}
             */
            function (gutterSize, tracker, cols, direction) {
                _super.prototype.init.call(this, gutterSize, tracker, cols, direction);
                this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);
            };
            /**
             * @param {?} tile
             * @param {?} rowIndex
             * @return {?}
             */
            FixedTileStyler.prototype.setRowStyles = /**
             * @param {?} tile
             * @param {?} rowIndex
             * @return {?}
             */
            function (tile, rowIndex) {
                tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));
                tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));
            };
            /**
             * @return {?}
             */
            FixedTileStyler.prototype.getComputedHeight = /**
             * @return {?}
             */
            function () {
                return [
                    'height', calc(this.getTileSpan(this.fixedRowHeight) + " + " + this.getGutterSpan())
                ];
            };
            /**
             * @param {?} list
             * @return {?}
             */
            FixedTileStyler.prototype.reset = /**
             * @param {?} list
             * @return {?}
             */
            function (list) {
                list._setListStyle(['height', null]);
                list._tiles.forEach(function (tile) {
                    tile._setStyle('top', null);
                    tile._setStyle('height', null);
                });
            };
            return FixedTileStyler;
        }(TileStyler));
        /**
         * This type of styler is instantiated when the user passes in a width:height ratio
         * for the row height.  Example `<mat-grid-list cols="3" rowHeight="3:1">`
         * \@docs-private
         */
        var /**
         * This type of styler is instantiated when the user passes in a width:height ratio
         * for the row height.  Example `<mat-grid-list cols="3" rowHeight="3:1">`
         * \@docs-private
         */
        RatioTileStyler = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(RatioTileStyler, _super);

            function RatioTileStyler(value) {
                var _this = _super.call(this) || this;
                _this._parseRatio(value);
                return _this;
            }

            /**
             * @param {?} tile
             * @param {?} rowIndex
             * @param {?} percentWidth
             * @param {?} gutterWidth
             * @return {?}
             */
            RatioTileStyler.prototype.setRowStyles = /**
             * @param {?} tile
             * @param {?} rowIndex
             * @param {?} percentWidth
             * @param {?} gutterWidth
             * @return {?}
             */
            function (tile, rowIndex, percentWidth, gutterWidth) {
                var /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;
                this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);
                // Use padding-top and margin-top to maintain the given aspect ratio, as
                // a percentage-based value for these properties is applied versus the *width* of the
                // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties
                tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));
                tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));
            };
            /**
             * @return {?}
             */
            RatioTileStyler.prototype.getComputedHeight = /**
             * @return {?}
             */
            function () {
                return [
                    'paddingBottom', calc(this.getTileSpan(this.baseTileHeight) + " + " + this.getGutterSpan())
                ];
            };
            /**
             * @param {?} list
             * @return {?}
             */
            RatioTileStyler.prototype.reset = /**
             * @param {?} list
             * @return {?}
             */
            function (list) {
                list._setListStyle(['paddingBottom', null]);
                list._tiles.forEach(function (tile) {
                    tile._setStyle('marginTop', null);
                    tile._setStyle('paddingTop', null);
                });
            };
            /**
             * @param {?} value
             * @return {?}
             */
            RatioTileStyler.prototype._parseRatio = /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                var /** @type {?} */ ratioParts = value.split(':');
                if (ratioParts.length !== 2) {
                    throw Error("mat-grid-list: invalid ratio given for row-height: \"" + value + "\"");
                }
                this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);
            };
            return RatioTileStyler;
        }(TileStyler));
        /**
         * This type of styler is instantiated when the user selects a "fit" row height mode.
         * In other words, the row height will reflect the total height of the container divided
         * by the number of rows.  Example `<mat-grid-list cols="3" rowHeight="fit">`
         *
         * \@docs-private
         */
        var /**
         * This type of styler is instantiated when the user selects a "fit" row height mode.
         * In other words, the row height will reflect the total height of the container divided
         * by the number of rows.  Example `<mat-grid-list cols="3" rowHeight="fit">`
         *
         * \@docs-private
         */
        FitTileStyler = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(FitTileStyler, _super);

            function FitTileStyler() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            /**
             * @param {?} tile
             * @param {?} rowIndex
             * @return {?}
             */
            FitTileStyler.prototype.setRowStyles = /**
             * @param {?} tile
             * @param {?} rowIndex
             * @return {?}
             */
            function (tile, rowIndex) {
                // Percent of the available vertical space that one row takes up.
                var /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;
                // Fraction of the horizontal gutter size that each column takes up.
                var /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;
                // Base vertical size of a column.
                var /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);
                tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));
                tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));
            };
            /**
             * @param {?} list
             * @return {?}
             */
            FitTileStyler.prototype.reset = /**
             * @param {?} list
             * @return {?}
             */
            function (list) {
                list._tiles.forEach(function (tile) {
                    tile._setStyle('top', null);
                    tile._setStyle('height', null);
                });
            };
            return FitTileStyler;
        }(TileStyler));

        /**
         * Wraps a CSS string in a calc function
         * @param {?} exp
         * @return {?}
         */
        function calc(exp) {
            return "calc(" + exp + ")";
        }

        /**
         * Appends pixels to a CSS string if no units are given.
         * @param {?} value
         * @return {?}
         */
        function normalizeUnits(value) {
            return (value.match(/px|em|rem/)) ? value : value + 'px';
        }

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
// TODO(kara): Conditional (responsive) column count / row size.
// TODO(kara): Re-layout on window resize / media change (debounced).
// TODO(kara): gridTileHeader and gridTileFooter.
        var /** @type {?} */ MAT_FIT_MODE = 'fit';
        var MatGridList = /** @class */ (function () {
            function MatGridList(_element, _dir) {
                this._element = _element;
                this._dir = _dir;
                /**
                 * The amount of space between tiles. This will be something like '5px' or '2em'.
                 */
                this._gutter = '1px';
            }

            Object.defineProperty(MatGridList.prototype, "cols", {
                get: /**
                 * Amount of columns in the grid list.
                 * @return {?}
                 */
                function () {
                    return this._cols;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._cols = coerceToNumber(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatGridList.prototype, "gutterSize", {
                get: /**
                 * Size of the grid list's gutter in pixels.
                 * @return {?}
                 */
                function () {
                    return this._gutter;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._gutter = coerceToString(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatGridList.prototype, "rowHeight", {
                set: /**
                 * Set internal representation of row height from the user-provided value.
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    var /** @type {?} */ newValue = coerceToString(value);
                    if (newValue !== this._rowHeight) {
                        this._rowHeight = newValue;
                        this._setTileStyler(this._rowHeight);
                    }
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatGridList.prototype.ngOnInit = /**
             * @return {?}
             */
            function () {
                this._checkCols();
                this._checkRowHeight();
            };
            /**
             * The layout calculation is fairly cheap if nothing changes, so there's little cost
             * to run it frequently.
             */
            /**
             * The layout calculation is fairly cheap if nothing changes, so there's little cost
             * to run it frequently.
             * @return {?}
             */
            MatGridList.prototype.ngAfterContentChecked = /**
             * The layout calculation is fairly cheap if nothing changes, so there's little cost
             * to run it frequently.
             * @return {?}
             */
            function () {
                this._layoutTiles();
            };
            /**
             * Throw a friendly error if cols property is missing
             * @return {?}
             */
            MatGridList.prototype._checkCols = /**
             * Throw a friendly error if cols property is missing
             * @return {?}
             */
            function () {
                if (!this.cols) {
                    throw Error("mat-grid-list: must pass in number of columns. " +
                        "Example: <mat-grid-list cols=\"3\">");
                }
            };
            /**
             * Default to equal width:height if rowHeight property is missing
             * @return {?}
             */
            MatGridList.prototype._checkRowHeight = /**
             * Default to equal width:height if rowHeight property is missing
             * @return {?}
             */
            function () {
                if (!this._rowHeight) {
                    this._setTileStyler('1:1');
                }
            };
            /**
             * Creates correct Tile Styler subtype based on rowHeight passed in by user
             * @param {?} rowHeight
             * @return {?}
             */
            MatGridList.prototype._setTileStyler = /**
             * Creates correct Tile Styler subtype based on rowHeight passed in by user
             * @param {?} rowHeight
             * @return {?}
             */
            function (rowHeight) {
                if (this._tileStyler) {
                    this._tileStyler.reset(this);
                }
                if (rowHeight === MAT_FIT_MODE) {
                    this._tileStyler = new FitTileStyler();
                }
                else if (rowHeight && rowHeight.indexOf(':') > -1) {
                    this._tileStyler = new RatioTileStyler(rowHeight);
                }
                else {
                    this._tileStyler = new FixedTileStyler(rowHeight);
                }
            };
            /**
             * Computes and applies the size and position for all children grid tiles.
             * @return {?}
             */
            MatGridList.prototype._layoutTiles = /**
             * Computes and applies the size and position for all children grid tiles.
             * @return {?}
             */
            function () {
                var _this = this;
                var /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);
                var /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';
                this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);
                this._tiles.forEach(function (tile, index) {
                    var /** @type {?} */ pos = tracker.positions[index];
                    _this._tileStyler.setStyle(tile, pos.row, pos.col);
                });
                this._setListStyle(this._tileStyler.getComputedHeight());
            };
            /** Sets style on the main grid-list element, given the style name and value. */
            /**
             * Sets style on the main grid-list element, given the style name and value.
             * @param {?} style
             * @return {?}
             */
            MatGridList.prototype._setListStyle = /**
             * Sets style on the main grid-list element, given the style name and value.
             * @param {?} style
             * @return {?}
             */
            function (style) {
                if (style) {
                    this._element.nativeElement.style[style[0]] = style[1];
                }
            };
            MatGridList.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-grid-list',
                        exportAs: 'matGridList',
                        template: "<div><ng-content></ng-content></div>",
                        styles: [".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}"],
                        host: {
                            'class': 'mat-grid-list',
                        },
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                    },]
                },
            ];
            /** @nocollapse */
            MatGridList.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {
                        type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_3__["Directionality"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                ];
            };
            MatGridList.propDecorators = {
                "_tiles": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"],
                    args: [MatGridTile,]
                },],
                "cols": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "gutterSize": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "rowHeight": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
            };
            return MatGridList;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatGridListModule = /** @class */ (function () {
            function MatGridListModule() {
            }

            MatGridListModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                        imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatLineModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatCommonModule"]],
                        exports: [
                            MatGridList,
                            MatGridTile,
                            MatGridTileText,
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatLineModule"],
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_1__["MatCommonModule"],
                            MatGridTileHeaderCssMatStyler,
                            MatGridTileFooterCssMatStyler,
                            MatGridAvatarCssMatStyler
                        ],
                        declarations: [
                            MatGridList,
                            MatGridTile,
                            MatGridTileText,
                            MatGridTileHeaderCssMatStyler,
                            MatGridTileFooterCssMatStyler,
                            MatGridAvatarCssMatStyler
                        ],
                    },]
                },
            ];
            return MatGridListModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=grid-list.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/material.es5.js":
    /*!*************************************************************!*\
  !*** ./node_modules/@angular/material/esm5/material.es5.js ***!
  \*************************************************************/
    /*! exports provided: ɵa28, MatAutocompleteSelectedEvent, MatAutocompleteBase, _MatAutocompleteMixinBase, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocomplete, MatAutocompleteModule, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, getMatAutocompleteMissingPanelError, MatAutocompleteTrigger, MatBadgeModule, MatBadge, MatBottomSheetModule, MatBottomSheet, MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig, MatBottomSheetContainer, matBottomSheetAnimations, MatBottomSheetRef, MatButtonModule, MatButtonBase, _MatButtonMixinBase, MatButton, MatAnchor, MatButtonToggleGroupBase, _MatButtonToggleGroupMixinBase, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleBase, _MatButtonToggleMixinBase, MatButtonToggle, MatButtonToggleModule, MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardImage, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardXlImage, MatCardAvatar, MatCard, MatCardHeader, MatCardTitleGroup, MatCardModule, MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckboxBase, _MatCheckboxMixinBase, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator, MatChipsModule, MatChipListBase, _MatChipListMixinBase, MatChipListChange, MatChipList, MatChipSelectionChange, MatChipBase, _MatChipMixinBase, MatChipAvatar, MatChipTrailingIcon, MatChip, MatChipRemove, MatChipInput, MAT_CHIPS_DEFAULT_OPTIONS, ɵa1, AnimationCurves, AnimationDurations, MatCommonModule, MATERIAL_SANITY_CHECKS, mixinDisabled, mixinColor, mixinDisableRipple, mixinTabIndex, mixinErrorState, mixinInitialized, NativeDateModule, MatNativeDateModule, MAT_DATE_LOCALE, MAT_DATE_LOCALE_FACTORY, MAT_DATE_LOCALE_PROVIDER, DateAdapter, MAT_DATE_FORMATS, NativeDateAdapter, MAT_NATIVE_DATE_FORMATS, ShowOnDirtyErrorStateMatcher, ErrorStateMatcher, MAT_HAMMER_OPTIONS, GestureConfig, MatLine, MatLineSetter, MatLineModule, MatOptionModule, MatOptionSelectionChange, MAT_OPTION_PARENT_COMPONENT, MatOption, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptgroupBase, _MatOptgroupMixinBase, MatOptgroup, MAT_LABEL_GLOBAL_OPTIONS, MatRippleModule, MAT_RIPPLE_GLOBAL_OPTIONS, MatRipple, RippleState, RippleRef, defaultRippleAnimationConfig, RippleRenderer, MatPseudoCheckboxModule, MatPseudoCheckbox, JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC, ɵa34, MatDatepickerModule, MatCalendarHeader, MatCalendar, MatCalendarCell, MatCalendarBody, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MatDatepickerContentBase, _MatDatepickerContentMixinBase, MatDatepickerContent, MatDatepicker, matDatepickerAnimations, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, MatDatepickerInputEvent, MatDatepickerInput, MatDatepickerIntl, MatDatepickerToggleIcon, MatDatepickerToggle, MatMonthView, MatYearView, MatDialogModule, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations, MatDivider, MatDividerModule, MatExpansionModule, MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle, MatExpansionPanelContent, EXPANSION_PANEL_ANIMATION_TIMING, matExpansionAnimations, MatFormFieldModule, MatError, MatFormFieldBase, _MatFormFieldMixinBase, MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormField, MatFormFieldControl, getMatFormFieldPlaceholderConflictError, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, MatHint, MatPlaceholder, MatPrefix, MatSuffix, MatLabel, matFormFieldAnimations, MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatIconModule, MatIconBase, _MatIconMixinBase, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, MatIconRegistry, ICON_REGISTRY_PROVIDER_FACTORY, ICON_REGISTRY_PROVIDER, MatTextareaAutosize, MatInputBase, _MatInputMixinBase, MatInput, getMatInputUnsupportedTypeError, MatInputModule, MAT_INPUT_VALUE_ACCESSOR, MatListModule, MatListBase, _MatListMixinBase, MatListItemBase, _MatListItemMixinBase, MatNavList, MatList, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatListItem, MatSelectionListBase, _MatSelectionListMixinBase, MatListOptionBase, _MatListOptionMixinBase, MAT_SELECTION_LIST_VALUE_ACCESSOR, MatSelectionListChange, MatListOption, MatSelectionList, ɵa24, ɵb24, ɵc24, ɵf24, ɵd24, ɵe24, MAT_MENU_SCROLL_STRATEGY, MatMenuModule, MatMenu, MAT_MENU_DEFAULT_OPTIONS, MatMenuItem, MatMenuTrigger, matMenuAnimations, fadeInItems, transformMenu, MatMenuContent, MatPaginatorModule, PageEvent, MatPaginatorBase, _MatPaginatorBase, MatPaginator, MatPaginatorIntl, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MAT_PAGINATOR_INTL_PROVIDER, MatProgressBarModule, MatProgressBarBase, _MatProgressBarMixinBase, MatProgressBar, MatProgressSpinnerModule, MatProgressSpinnerBase, _MatProgressSpinnerMixinBase, MatProgressSpinner, MatSpinner, MatRadioModule, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioChange, MatRadioGroupBase, _MatRadioGroupMixinBase, MatRadioGroup, MatRadioButtonBase, _MatRadioButtonMixinBase, MatRadioButton, MatSelectModule, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectBase, _MatSelectMixinBase, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent, MatSidenavModule, throwMatDuplicatedDrawerError, MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawerContent, MatDrawer, MatDrawerContainer, MatSidenavContent, MatSidenav, MatSidenavContainer, matDrawerAnimations, MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggleBase, _MatSlideToggleMixinBase, MatSlideToggle, MatSliderModule, MAT_SLIDER_VALUE_ACCESSOR, MatSliderChange, MatSliderBase, _MatSliderMixinBase, MatSlider, MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations, MatSortModule, MatSortHeaderBase, _MatSortHeaderMixinBase, MatSortHeader, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MAT_SORT_HEADER_INTL_PROVIDER, MatSortBase, _MatSortMixinBase, MatSort, matSortAnimations, MatStepperModule, MatStepLabel, MatStep, MatStepper, MatHorizontalStepper, MatVerticalStepper, MatStepperNext, MatStepperPrevious, MatStepHeader, MatStepperIntl, matStepperAnimations, MatStepperIcon, MatTableModule, MatCellDef, MatHeaderCellDef, MatFooterCellDef, MatColumnDef, MatHeaderCell, MatFooterCell, MatCell, MatTable, MatHeaderRowDef, MatFooterRowDef, MatRowDef, MatHeaderRow, MatFooterRow, MatRow, MatTableDataSource, ɵa23, ɵf23, ɵg23, ɵb23, ɵc23, ɵd23, ɵe23, ɵj23, ɵh23, ɵk23, ɵi23, MatInkBar, _MAT_INK_BAR_POSITIONER, MatTabBody, MatTabBodyPortal, MatTabHeader, MatTabLabelWrapper, MatTab, MatTabLabel, MatTabNav, MatTabLink, MatTabContent, MatTabsModule, MatTabChangeEvent, MatTabGroupBase, _MatTabGroupMixinBase, MatTabGroup, matTabsAnimations, MatToolbarModule, MatToolbarBase, _MatToolbarMixinBase, MatToolbarRow, MatToolbar, throwToolbarMixedModesError, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, getMatTooltipInvalidPositionError, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MatTooltip, TooltipComponent, matTooltipAnimations, _MatTreeNodeMixinBase, _MatNestedTreeNodeMixinBase, MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource, VERSION */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "VERSION", function () {
            return VERSION;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material/autocomplete */ "./node_modules/@angular/material/esm5/autocomplete.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵa28", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["ɵa28"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatAutocompleteSelectedEvent", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["MatAutocompleteSelectedEvent"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatAutocompleteBase", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["MatAutocompleteBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatAutocompleteMixinBase", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["_MatAutocompleteMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_DEFAULT_OPTIONS", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["MAT_AUTOCOMPLETE_DEFAULT_OPTIONS"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatAutocomplete", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["MatAutocomplete"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatAutocompleteModule", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["MatAutocompleteModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "AUTOCOMPLETE_OPTION_HEIGHT", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["AUTOCOMPLETE_OPTION_HEIGHT"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "AUTOCOMPLETE_PANEL_HEIGHT", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["AUTOCOMPLETE_PANEL_HEIGHT"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_SCROLL_STRATEGY", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["MAT_AUTOCOMPLETE_SCROLL_STRATEGY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_AUTOCOMPLETE_VALUE_ACCESSOR", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["MAT_AUTOCOMPLETE_VALUE_ACCESSOR"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "getMatAutocompleteMissingPanelError", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["getMatAutocompleteMissingPanelError"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatAutocompleteTrigger", function () {
            return _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_1__["MatAutocompleteTrigger"];
        });

        /* harmony import */
        var _angular_material_badge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/badge */ "./node_modules/@angular/material/esm5/badge.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatBadgeModule", function () {
            return _angular_material_badge__WEBPACK_IMPORTED_MODULE_2__["MatBadgeModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatBadge", function () {
            return _angular_material_badge__WEBPACK_IMPORTED_MODULE_2__["MatBadge"];
        });

        /* harmony import */
        var _angular_material_bottom_sheet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/bottom-sheet */ "./node_modules/@angular/material/esm5/bottom-sheet.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatBottomSheetModule", function () {
            return _angular_material_bottom_sheet__WEBPACK_IMPORTED_MODULE_3__["MatBottomSheetModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatBottomSheet", function () {
            return _angular_material_bottom_sheet__WEBPACK_IMPORTED_MODULE_3__["MatBottomSheet"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_BOTTOM_SHEET_DATA", function () {
            return _angular_material_bottom_sheet__WEBPACK_IMPORTED_MODULE_3__["MAT_BOTTOM_SHEET_DATA"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatBottomSheetConfig", function () {
            return _angular_material_bottom_sheet__WEBPACK_IMPORTED_MODULE_3__["MatBottomSheetConfig"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatBottomSheetContainer", function () {
            return _angular_material_bottom_sheet__WEBPACK_IMPORTED_MODULE_3__["MatBottomSheetContainer"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "matBottomSheetAnimations", function () {
            return _angular_material_bottom_sheet__WEBPACK_IMPORTED_MODULE_3__["matBottomSheetAnimations"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatBottomSheetRef", function () {
            return _angular_material_bottom_sheet__WEBPACK_IMPORTED_MODULE_3__["MatBottomSheetRef"];
        });

        /* harmony import */
        var _angular_material_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm5/button.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatButtonModule", function () {
            return _angular_material_button__WEBPACK_IMPORTED_MODULE_4__["MatButtonModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatButtonBase", function () {
            return _angular_material_button__WEBPACK_IMPORTED_MODULE_4__["MatButtonBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatButtonMixinBase", function () {
            return _angular_material_button__WEBPACK_IMPORTED_MODULE_4__["_MatButtonMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatButton", function () {
            return _angular_material_button__WEBPACK_IMPORTED_MODULE_4__["MatButton"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatAnchor", function () {
            return _angular_material_button__WEBPACK_IMPORTED_MODULE_4__["MatAnchor"];
        });

        /* harmony import */
        var _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/button-toggle */ "./node_modules/@angular/material/esm5/button-toggle.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatButtonToggleGroupBase", function () {
            return _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_5__["MatButtonToggleGroupBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatButtonToggleGroupMixinBase", function () {
            return _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_5__["_MatButtonToggleGroupMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR", function () {
            return _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_5__["MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatButtonToggleGroupMultiple", function () {
            return _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_5__["MatButtonToggleGroupMultiple"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatButtonToggleChange", function () {
            return _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_5__["MatButtonToggleChange"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatButtonToggleGroup", function () {
            return _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_5__["MatButtonToggleGroup"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatButtonToggleBase", function () {
            return _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_5__["MatButtonToggleBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatButtonToggleMixinBase", function () {
            return _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_5__["_MatButtonToggleMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatButtonToggle", function () {
            return _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_5__["MatButtonToggle"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatButtonToggleModule", function () {
            return _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_5__["MatButtonToggleModule"];
        });

        /* harmony import */
        var _angular_material_card__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/card */ "./node_modules/@angular/material/esm5/card.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCardContent", function () {
            return _angular_material_card__WEBPACK_IMPORTED_MODULE_6__["MatCardContent"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCardTitle", function () {
            return _angular_material_card__WEBPACK_IMPORTED_MODULE_6__["MatCardTitle"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCardSubtitle", function () {
            return _angular_material_card__WEBPACK_IMPORTED_MODULE_6__["MatCardSubtitle"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCardActions", function () {
            return _angular_material_card__WEBPACK_IMPORTED_MODULE_6__["MatCardActions"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCardFooter", function () {
            return _angular_material_card__WEBPACK_IMPORTED_MODULE_6__["MatCardFooter"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCardImage", function () {
            return _angular_material_card__WEBPACK_IMPORTED_MODULE_6__["MatCardImage"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCardSmImage", function () {
            return _angular_material_card__WEBPACK_IMPORTED_MODULE_6__["MatCardSmImage"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCardMdImage", function () {
            return _angular_material_card__WEBPACK_IMPORTED_MODULE_6__["MatCardMdImage"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCardLgImage", function () {
            return _angular_material_card__WEBPACK_IMPORTED_MODULE_6__["MatCardLgImage"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCardXlImage", function () {
            return _angular_material_card__WEBPACK_IMPORTED_MODULE_6__["MatCardXlImage"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCardAvatar", function () {
            return _angular_material_card__WEBPACK_IMPORTED_MODULE_6__["MatCardAvatar"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCard", function () {
            return _angular_material_card__WEBPACK_IMPORTED_MODULE_6__["MatCard"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCardHeader", function () {
            return _angular_material_card__WEBPACK_IMPORTED_MODULE_6__["MatCardHeader"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCardTitleGroup", function () {
            return _angular_material_card__WEBPACK_IMPORTED_MODULE_6__["MatCardTitleGroup"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCardModule", function () {
            return _angular_material_card__WEBPACK_IMPORTED_MODULE_6__["MatCardModule"];
        });

        /* harmony import */
        var _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/checkbox */ "./node_modules/@angular/material/esm5/checkbox.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR", function () {
            return _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_7__["MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "TransitionCheckState", function () {
            return _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_7__["TransitionCheckState"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCheckboxChange", function () {
            return _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_7__["MatCheckboxChange"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCheckboxBase", function () {
            return _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_7__["MatCheckboxBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatCheckboxMixinBase", function () {
            return _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_7__["_MatCheckboxMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCheckbox", function () {
            return _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_7__["MatCheckbox"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_CHECKBOX_CLICK_ACTION", function () {
            return _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_7__["MAT_CHECKBOX_CLICK_ACTION"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCheckboxModule", function () {
            return _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_7__["MatCheckboxModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_CHECKBOX_REQUIRED_VALIDATOR", function () {
            return _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_7__["MAT_CHECKBOX_REQUIRED_VALIDATOR"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCheckboxRequiredValidator", function () {
            return _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_7__["MatCheckboxRequiredValidator"];
        });

        /* harmony import */
        var _angular_material_chips__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/chips */ "./node_modules/@angular/material/esm5/chips.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatChipsModule", function () {
            return _angular_material_chips__WEBPACK_IMPORTED_MODULE_8__["MatChipsModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatChipListBase", function () {
            return _angular_material_chips__WEBPACK_IMPORTED_MODULE_8__["MatChipListBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatChipListMixinBase", function () {
            return _angular_material_chips__WEBPACK_IMPORTED_MODULE_8__["_MatChipListMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatChipListChange", function () {
            return _angular_material_chips__WEBPACK_IMPORTED_MODULE_8__["MatChipListChange"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatChipList", function () {
            return _angular_material_chips__WEBPACK_IMPORTED_MODULE_8__["MatChipList"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatChipSelectionChange", function () {
            return _angular_material_chips__WEBPACK_IMPORTED_MODULE_8__["MatChipSelectionChange"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatChipBase", function () {
            return _angular_material_chips__WEBPACK_IMPORTED_MODULE_8__["MatChipBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatChipMixinBase", function () {
            return _angular_material_chips__WEBPACK_IMPORTED_MODULE_8__["_MatChipMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatChipAvatar", function () {
            return _angular_material_chips__WEBPACK_IMPORTED_MODULE_8__["MatChipAvatar"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatChipTrailingIcon", function () {
            return _angular_material_chips__WEBPACK_IMPORTED_MODULE_8__["MatChipTrailingIcon"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatChip", function () {
            return _angular_material_chips__WEBPACK_IMPORTED_MODULE_8__["MatChip"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatChipRemove", function () {
            return _angular_material_chips__WEBPACK_IMPORTED_MODULE_8__["MatChipRemove"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatChipInput", function () {
            return _angular_material_chips__WEBPACK_IMPORTED_MODULE_8__["MatChipInput"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_CHIPS_DEFAULT_OPTIONS", function () {
            return _angular_material_chips__WEBPACK_IMPORTED_MODULE_8__["MAT_CHIPS_DEFAULT_OPTIONS"];
        });

        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵa1", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["ɵa1"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "AnimationCurves", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["AnimationCurves"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "AnimationDurations", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["AnimationDurations"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCommonModule", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatCommonModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MATERIAL_SANITY_CHECKS", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MATERIAL_SANITY_CHECKS"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "mixinDisabled", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["mixinDisabled"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "mixinColor", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["mixinColor"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "mixinDisableRipple", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["mixinDisableRipple"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "mixinTabIndex", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["mixinTabIndex"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "mixinErrorState", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["mixinErrorState"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "mixinInitialized", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["mixinInitialized"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "NativeDateModule", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["NativeDateModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatNativeDateModule", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatNativeDateModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DATE_LOCALE", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MAT_DATE_LOCALE"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DATE_LOCALE_FACTORY", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MAT_DATE_LOCALE_FACTORY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DATE_LOCALE_PROVIDER", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MAT_DATE_LOCALE_PROVIDER"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "DateAdapter", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["DateAdapter"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DATE_FORMATS", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MAT_DATE_FORMATS"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "NativeDateAdapter", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["NativeDateAdapter"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_NATIVE_DATE_FORMATS", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MAT_NATIVE_DATE_FORMATS"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ShowOnDirtyErrorStateMatcher", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["ShowOnDirtyErrorStateMatcher"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ErrorStateMatcher", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["ErrorStateMatcher"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_HAMMER_OPTIONS", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MAT_HAMMER_OPTIONS"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "GestureConfig", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["GestureConfig"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatLine", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatLine"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatLineSetter", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatLineSetter"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatLineModule", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatLineModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatOptionModule", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatOptionModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatOptionSelectionChange", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatOptionSelectionChange"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_OPTION_PARENT_COMPONENT", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MAT_OPTION_PARENT_COMPONENT"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatOption", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatOption"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_countGroupLabelsBeforeOption", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["_countGroupLabelsBeforeOption"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_getOptionScrollPosition", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["_getOptionScrollPosition"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatOptgroupBase", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatOptgroupBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatOptgroupMixinBase", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["_MatOptgroupMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatOptgroup", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatOptgroup"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_LABEL_GLOBAL_OPTIONS", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MAT_LABEL_GLOBAL_OPTIONS"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatRippleModule", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatRippleModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_RIPPLE_GLOBAL_OPTIONS", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MAT_RIPPLE_GLOBAL_OPTIONS"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatRipple", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatRipple"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "RippleState", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["RippleState"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "RippleRef", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["RippleRef"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "defaultRippleAnimationConfig", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["defaultRippleAnimationConfig"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "RippleRenderer", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["RippleRenderer"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatPseudoCheckboxModule", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatPseudoCheckboxModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatPseudoCheckbox", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatPseudoCheckbox"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "JAN", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["JAN"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "FEB", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["FEB"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAR", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MAR"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "APR", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["APR"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAY", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MAY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "JUN", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["JUN"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "JUL", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["JUL"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "AUG", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["AUG"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "SEP", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["SEP"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "OCT", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["OCT"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "NOV", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["NOV"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "DEC", function () {
            return _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["DEC"];
        });

        /* harmony import */
        var _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/datepicker */ "./node_modules/@angular/material/esm5/datepicker.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵa34", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["ɵa34"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerModule", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MatDatepickerModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCalendarHeader", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MatCalendarHeader"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCalendar", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MatCalendar"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCalendarCell", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MatCalendarCell"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCalendarBody", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MatCalendarBody"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DATEPICKER_SCROLL_STRATEGY", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MAT_DATEPICKER_SCROLL_STRATEGY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerContentBase", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MatDatepickerContentBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatDatepickerContentMixinBase", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["_MatDatepickerContentMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerContent", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MatDatepickerContent"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDatepicker", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MatDatepicker"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "matDatepickerAnimations", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["matDatepickerAnimations"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DATEPICKER_VALUE_ACCESSOR", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MAT_DATEPICKER_VALUE_ACCESSOR"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DATEPICKER_VALIDATORS", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MAT_DATEPICKER_VALIDATORS"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerInputEvent", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MatDatepickerInputEvent"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerInput", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MatDatepickerInput"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerIntl", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MatDatepickerIntl"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerToggleIcon", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MatDatepickerToggleIcon"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDatepickerToggle", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MatDatepickerToggle"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatMonthView", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MatMonthView"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatYearView", function () {
            return _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_10__["MatYearView"];
        });

        /* harmony import */
        var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/dialog */ "./node_modules/@angular/material/esm5/dialog.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDialogModule", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MatDialogModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_DATA", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MAT_DIALOG_DATA"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_DEFAULT_OPTIONS", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MAT_DIALOG_DEFAULT_OPTIONS"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MAT_DIALOG_SCROLL_STRATEGY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY_FACTORY", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MAT_DIALOG_SCROLL_STRATEGY_FACTORY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DIALOG_SCROLL_STRATEGY_PROVIDER", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MAT_DIALOG_SCROLL_STRATEGY_PROVIDER"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDialog", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MatDialog"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "throwMatDialogContentAlreadyAttachedError", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["throwMatDialogContentAlreadyAttachedError"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDialogContainer", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MatDialogContainer"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDialogClose", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MatDialogClose"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDialogTitle", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MatDialogTitle"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDialogContent", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MatDialogContent"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDialogActions", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MatDialogActions"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDialogConfig", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MatDialogConfig"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDialogRef", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["MatDialogRef"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "matDialogAnimations", function () {
            return _angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__["matDialogAnimations"];
        });

        /* harmony import */
        var _angular_material_divider__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/divider */ "./node_modules/@angular/material/esm5/divider.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDivider", function () {
            return _angular_material_divider__WEBPACK_IMPORTED_MODULE_12__["MatDivider"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDividerModule", function () {
            return _angular_material_divider__WEBPACK_IMPORTED_MODULE_12__["MatDividerModule"];
        });

        /* harmony import */
        var _angular_material_expansion__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/expansion */ "./node_modules/@angular/material/esm5/expansion.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatExpansionModule", function () {
            return _angular_material_expansion__WEBPACK_IMPORTED_MODULE_13__["MatExpansionModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatAccordion", function () {
            return _angular_material_expansion__WEBPACK_IMPORTED_MODULE_13__["MatAccordion"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatExpansionPanel", function () {
            return _angular_material_expansion__WEBPACK_IMPORTED_MODULE_13__["MatExpansionPanel"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatExpansionPanelActionRow", function () {
            return _angular_material_expansion__WEBPACK_IMPORTED_MODULE_13__["MatExpansionPanelActionRow"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatExpansionPanelHeader", function () {
            return _angular_material_expansion__WEBPACK_IMPORTED_MODULE_13__["MatExpansionPanelHeader"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatExpansionPanelDescription", function () {
            return _angular_material_expansion__WEBPACK_IMPORTED_MODULE_13__["MatExpansionPanelDescription"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatExpansionPanelTitle", function () {
            return _angular_material_expansion__WEBPACK_IMPORTED_MODULE_13__["MatExpansionPanelTitle"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatExpansionPanelContent", function () {
            return _angular_material_expansion__WEBPACK_IMPORTED_MODULE_13__["MatExpansionPanelContent"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "EXPANSION_PANEL_ANIMATION_TIMING", function () {
            return _angular_material_expansion__WEBPACK_IMPORTED_MODULE_13__["EXPANSION_PANEL_ANIMATION_TIMING"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "matExpansionAnimations", function () {
            return _angular_material_expansion__WEBPACK_IMPORTED_MODULE_13__["matExpansionAnimations"];
        });

        /* harmony import */
        var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/form-field */ "./node_modules/@angular/material/esm5/form-field.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatFormFieldModule", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["MatFormFieldModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatError", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["MatError"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatFormFieldBase", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["MatFormFieldBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatFormFieldMixinBase", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["_MatFormFieldMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_FORM_FIELD_DEFAULT_OPTIONS", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["MAT_FORM_FIELD_DEFAULT_OPTIONS"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatFormField", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["MatFormField"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatFormFieldControl", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["MatFormFieldControl"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "getMatFormFieldPlaceholderConflictError", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["getMatFormFieldPlaceholderConflictError"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "getMatFormFieldDuplicatedHintError", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["getMatFormFieldDuplicatedHintError"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "getMatFormFieldMissingControlError", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["getMatFormFieldMissingControlError"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatHint", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["MatHint"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatPlaceholder", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["MatPlaceholder"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatPrefix", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["MatPrefix"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSuffix", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["MatSuffix"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatLabel", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["MatLabel"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "matFormFieldAnimations", function () {
            return _angular_material_form_field__WEBPACK_IMPORTED_MODULE_14__["matFormFieldAnimations"];
        });

        /* harmony import */
        var _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/material/grid-list */ "./node_modules/@angular/material/esm5/grid-list.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatGridListModule", function () {
            return _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_15__["MatGridListModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatGridList", function () {
            return _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_15__["MatGridList"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatGridTile", function () {
            return _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_15__["MatGridTile"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatGridTileText", function () {
            return _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_15__["MatGridTileText"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatGridAvatarCssMatStyler", function () {
            return _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_15__["MatGridAvatarCssMatStyler"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatGridTileHeaderCssMatStyler", function () {
            return _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_15__["MatGridTileHeaderCssMatStyler"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatGridTileFooterCssMatStyler", function () {
            return _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_15__["MatGridTileFooterCssMatStyler"];
        });

        /* harmony import */
        var _angular_material_icon__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/material/icon */ "./node_modules/@angular/material/esm5/icon.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatIconModule", function () {
            return _angular_material_icon__WEBPACK_IMPORTED_MODULE_16__["MatIconModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatIconBase", function () {
            return _angular_material_icon__WEBPACK_IMPORTED_MODULE_16__["MatIconBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatIconMixinBase", function () {
            return _angular_material_icon__WEBPACK_IMPORTED_MODULE_16__["_MatIconMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatIcon", function () {
            return _angular_material_icon__WEBPACK_IMPORTED_MODULE_16__["MatIcon"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "getMatIconNameNotFoundError", function () {
            return _angular_material_icon__WEBPACK_IMPORTED_MODULE_16__["getMatIconNameNotFoundError"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "getMatIconNoHttpProviderError", function () {
            return _angular_material_icon__WEBPACK_IMPORTED_MODULE_16__["getMatIconNoHttpProviderError"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "getMatIconFailedToSanitizeUrlError", function () {
            return _angular_material_icon__WEBPACK_IMPORTED_MODULE_16__["getMatIconFailedToSanitizeUrlError"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "getMatIconFailedToSanitizeLiteralError", function () {
            return _angular_material_icon__WEBPACK_IMPORTED_MODULE_16__["getMatIconFailedToSanitizeLiteralError"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatIconRegistry", function () {
            return _angular_material_icon__WEBPACK_IMPORTED_MODULE_16__["MatIconRegistry"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ICON_REGISTRY_PROVIDER_FACTORY", function () {
            return _angular_material_icon__WEBPACK_IMPORTED_MODULE_16__["ICON_REGISTRY_PROVIDER_FACTORY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ICON_REGISTRY_PROVIDER", function () {
            return _angular_material_icon__WEBPACK_IMPORTED_MODULE_16__["ICON_REGISTRY_PROVIDER"];
        });

        /* harmony import */
        var _angular_material_input__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/material/input */ "./node_modules/@angular/material/esm5/input.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTextareaAutosize", function () {
            return _angular_material_input__WEBPACK_IMPORTED_MODULE_17__["MatTextareaAutosize"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatInputBase", function () {
            return _angular_material_input__WEBPACK_IMPORTED_MODULE_17__["MatInputBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatInputMixinBase", function () {
            return _angular_material_input__WEBPACK_IMPORTED_MODULE_17__["_MatInputMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatInput", function () {
            return _angular_material_input__WEBPACK_IMPORTED_MODULE_17__["MatInput"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "getMatInputUnsupportedTypeError", function () {
            return _angular_material_input__WEBPACK_IMPORTED_MODULE_17__["getMatInputUnsupportedTypeError"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatInputModule", function () {
            return _angular_material_input__WEBPACK_IMPORTED_MODULE_17__["MatInputModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_INPUT_VALUE_ACCESSOR", function () {
            return _angular_material_input__WEBPACK_IMPORTED_MODULE_17__["MAT_INPUT_VALUE_ACCESSOR"];
        });

        /* harmony import */
        var _angular_material_list__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/material/list */ "./node_modules/@angular/material/esm5/list.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatListModule", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["MatListModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatListBase", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["MatListBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatListMixinBase", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["_MatListMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatListItemBase", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["MatListItemBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatListItemMixinBase", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["_MatListItemMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatNavList", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["MatNavList"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatList", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["MatList"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatListAvatarCssMatStyler", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["MatListAvatarCssMatStyler"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatListIconCssMatStyler", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["MatListIconCssMatStyler"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatListSubheaderCssMatStyler", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["MatListSubheaderCssMatStyler"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatListItem", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["MatListItem"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSelectionListBase", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["MatSelectionListBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatSelectionListMixinBase", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["_MatSelectionListMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatListOptionBase", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["MatListOptionBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatListOptionMixinBase", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["_MatListOptionMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_SELECTION_LIST_VALUE_ACCESSOR", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["MAT_SELECTION_LIST_VALUE_ACCESSOR"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSelectionListChange", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["MatSelectionListChange"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatListOption", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["MatListOption"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSelectionList", function () {
            return _angular_material_list__WEBPACK_IMPORTED_MODULE_18__["MatSelectionList"];
        });

        /* harmony import */
        var _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/material/menu */ "./node_modules/@angular/material/esm5/menu.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵa24", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["ɵa24"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵb24", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["ɵb24"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵc24", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["ɵc24"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵf24", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["ɵf24"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵd24", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["ɵd24"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵe24", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["ɵe24"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_MENU_SCROLL_STRATEGY", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["MAT_MENU_SCROLL_STRATEGY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatMenuModule", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["MatMenuModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatMenu", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["MatMenu"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_MENU_DEFAULT_OPTIONS", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["MAT_MENU_DEFAULT_OPTIONS"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatMenuItem", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["MatMenuItem"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatMenuTrigger", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["MatMenuTrigger"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "matMenuAnimations", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["matMenuAnimations"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "fadeInItems", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["fadeInItems"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "transformMenu", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["transformMenu"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatMenuContent", function () {
            return _angular_material_menu__WEBPACK_IMPORTED_MODULE_19__["MatMenuContent"];
        });

        /* harmony import */
        var _angular_material_paginator__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/material/paginator */ "./node_modules/@angular/material/esm5/paginator.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatPaginatorModule", function () {
            return _angular_material_paginator__WEBPACK_IMPORTED_MODULE_20__["MatPaginatorModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "PageEvent", function () {
            return _angular_material_paginator__WEBPACK_IMPORTED_MODULE_20__["PageEvent"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatPaginatorBase", function () {
            return _angular_material_paginator__WEBPACK_IMPORTED_MODULE_20__["MatPaginatorBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatPaginatorBase", function () {
            return _angular_material_paginator__WEBPACK_IMPORTED_MODULE_20__["_MatPaginatorBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatPaginator", function () {
            return _angular_material_paginator__WEBPACK_IMPORTED_MODULE_20__["MatPaginator"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatPaginatorIntl", function () {
            return _angular_material_paginator__WEBPACK_IMPORTED_MODULE_20__["MatPaginatorIntl"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_PAGINATOR_INTL_PROVIDER_FACTORY", function () {
            return _angular_material_paginator__WEBPACK_IMPORTED_MODULE_20__["MAT_PAGINATOR_INTL_PROVIDER_FACTORY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_PAGINATOR_INTL_PROVIDER", function () {
            return _angular_material_paginator__WEBPACK_IMPORTED_MODULE_20__["MAT_PAGINATOR_INTL_PROVIDER"];
        });

        /* harmony import */
        var _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/material/progress-bar */ "./node_modules/@angular/material/esm5/progress-bar.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatProgressBarModule", function () {
            return _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_21__["MatProgressBarModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatProgressBarBase", function () {
            return _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_21__["MatProgressBarBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatProgressBarMixinBase", function () {
            return _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_21__["_MatProgressBarMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatProgressBar", function () {
            return _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_21__["MatProgressBar"];
        });

        /* harmony import */
        var _angular_material_progress_spinner__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @angular/material/progress-spinner */ "./node_modules/@angular/material/esm5/progress-spinner.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatProgressSpinnerModule", function () {
            return _angular_material_progress_spinner__WEBPACK_IMPORTED_MODULE_22__["MatProgressSpinnerModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatProgressSpinnerBase", function () {
            return _angular_material_progress_spinner__WEBPACK_IMPORTED_MODULE_22__["MatProgressSpinnerBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatProgressSpinnerMixinBase", function () {
            return _angular_material_progress_spinner__WEBPACK_IMPORTED_MODULE_22__["_MatProgressSpinnerMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatProgressSpinner", function () {
            return _angular_material_progress_spinner__WEBPACK_IMPORTED_MODULE_22__["MatProgressSpinner"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSpinner", function () {
            return _angular_material_progress_spinner__WEBPACK_IMPORTED_MODULE_22__["MatSpinner"];
        });

        /* harmony import */
        var _angular_material_radio__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @angular/material/radio */ "./node_modules/@angular/material/esm5/radio.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatRadioModule", function () {
            return _angular_material_radio__WEBPACK_IMPORTED_MODULE_23__["MatRadioModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR", function () {
            return _angular_material_radio__WEBPACK_IMPORTED_MODULE_23__["MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatRadioChange", function () {
            return _angular_material_radio__WEBPACK_IMPORTED_MODULE_23__["MatRadioChange"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatRadioGroupBase", function () {
            return _angular_material_radio__WEBPACK_IMPORTED_MODULE_23__["MatRadioGroupBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatRadioGroupMixinBase", function () {
            return _angular_material_radio__WEBPACK_IMPORTED_MODULE_23__["_MatRadioGroupMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatRadioGroup", function () {
            return _angular_material_radio__WEBPACK_IMPORTED_MODULE_23__["MatRadioGroup"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatRadioButtonBase", function () {
            return _angular_material_radio__WEBPACK_IMPORTED_MODULE_23__["MatRadioButtonBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatRadioButtonMixinBase", function () {
            return _angular_material_radio__WEBPACK_IMPORTED_MODULE_23__["_MatRadioButtonMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatRadioButton", function () {
            return _angular_material_radio__WEBPACK_IMPORTED_MODULE_23__["MatRadioButton"];
        });

        /* harmony import */
        var _angular_material_select__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/material/select */ "./node_modules/@angular/material/esm5/select.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSelectModule", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["MatSelectModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_MAX_HEIGHT", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["SELECT_PANEL_MAX_HEIGHT"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_PADDING_X", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["SELECT_PANEL_PADDING_X"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_INDENT_PADDING_X", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["SELECT_PANEL_INDENT_PADDING_X"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "SELECT_ITEM_HEIGHT_EM", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["SELECT_ITEM_HEIGHT_EM"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "SELECT_MULTIPLE_PANEL_PADDING_X", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["SELECT_MULTIPLE_PANEL_PADDING_X"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "SELECT_PANEL_VIEWPORT_PADDING", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["SELECT_PANEL_VIEWPORT_PADDING"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_SELECT_SCROLL_STRATEGY", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["MAT_SELECT_SCROLL_STRATEGY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_SELECT_SCROLL_STRATEGY_PROVIDER", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["MAT_SELECT_SCROLL_STRATEGY_PROVIDER"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSelectChange", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["MatSelectChange"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSelectBase", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["MatSelectBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatSelectMixinBase", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["_MatSelectMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSelectTrigger", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["MatSelectTrigger"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSelect", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["MatSelect"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "matSelectAnimations", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["matSelectAnimations"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "transformPanel", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["transformPanel"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "fadeInContent", function () {
            return _angular_material_select__WEBPACK_IMPORTED_MODULE_24__["fadeInContent"];
        });

        /* harmony import */
        var _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @angular/material/sidenav */ "./node_modules/@angular/material/esm5/sidenav.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSidenavModule", function () {
            return _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_25__["MatSidenavModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "throwMatDuplicatedDrawerError", function () {
            return _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_25__["throwMatDuplicatedDrawerError"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DRAWER_DEFAULT_AUTOSIZE", function () {
            return _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_25__["MAT_DRAWER_DEFAULT_AUTOSIZE"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY", function () {
            return _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_25__["MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDrawerContent", function () {
            return _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_25__["MatDrawerContent"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDrawer", function () {
            return _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_25__["MatDrawer"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatDrawerContainer", function () {
            return _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_25__["MatDrawerContainer"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSidenavContent", function () {
            return _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_25__["MatSidenavContent"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSidenav", function () {
            return _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_25__["MatSidenav"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSidenavContainer", function () {
            return _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_25__["MatSidenavContainer"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "matDrawerAnimations", function () {
            return _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_25__["matDrawerAnimations"];
        });

        /* harmony import */
        var _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @angular/material/slide-toggle */ "./node_modules/@angular/material/esm5/slide-toggle.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSlideToggleModule", function () {
            return _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_26__["MatSlideToggleModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_SLIDE_TOGGLE_VALUE_ACCESSOR", function () {
            return _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_26__["MAT_SLIDE_TOGGLE_VALUE_ACCESSOR"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSlideToggleChange", function () {
            return _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_26__["MatSlideToggleChange"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSlideToggleBase", function () {
            return _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_26__["MatSlideToggleBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatSlideToggleMixinBase", function () {
            return _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_26__["_MatSlideToggleMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSlideToggle", function () {
            return _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_26__["MatSlideToggle"];
        });

        /* harmony import */
        var _angular_material_slider__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @angular/material/slider */ "./node_modules/@angular/material/esm5/slider.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSliderModule", function () {
            return _angular_material_slider__WEBPACK_IMPORTED_MODULE_27__["MatSliderModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_SLIDER_VALUE_ACCESSOR", function () {
            return _angular_material_slider__WEBPACK_IMPORTED_MODULE_27__["MAT_SLIDER_VALUE_ACCESSOR"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSliderChange", function () {
            return _angular_material_slider__WEBPACK_IMPORTED_MODULE_27__["MatSliderChange"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSliderBase", function () {
            return _angular_material_slider__WEBPACK_IMPORTED_MODULE_27__["MatSliderBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatSliderMixinBase", function () {
            return _angular_material_slider__WEBPACK_IMPORTED_MODULE_27__["_MatSliderMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSlider", function () {
            return _angular_material_slider__WEBPACK_IMPORTED_MODULE_27__["MatSlider"];
        });

        /* harmony import */
        var _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @angular/material/snack-bar */ "./node_modules/@angular/material/esm5/snack-bar.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSnackBarModule", function () {
            return _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_28__["MatSnackBarModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_SNACK_BAR_DEFAULT_OPTIONS", function () {
            return _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_28__["MAT_SNACK_BAR_DEFAULT_OPTIONS"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY", function () {
            return _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_28__["MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSnackBar", function () {
            return _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_28__["MatSnackBar"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSnackBarContainer", function () {
            return _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_28__["MatSnackBarContainer"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_SNACK_BAR_DATA", function () {
            return _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_28__["MAT_SNACK_BAR_DATA"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSnackBarConfig", function () {
            return _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_28__["MatSnackBarConfig"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSnackBarRef", function () {
            return _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_28__["MatSnackBarRef"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "SimpleSnackBar", function () {
            return _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_28__["SimpleSnackBar"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "matSnackBarAnimations", function () {
            return _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_28__["matSnackBarAnimations"];
        });

        /* harmony import */
        var _angular_material_sort__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @angular/material/sort */ "./node_modules/@angular/material/esm5/sort.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSortModule", function () {
            return _angular_material_sort__WEBPACK_IMPORTED_MODULE_29__["MatSortModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSortHeaderBase", function () {
            return _angular_material_sort__WEBPACK_IMPORTED_MODULE_29__["MatSortHeaderBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatSortHeaderMixinBase", function () {
            return _angular_material_sort__WEBPACK_IMPORTED_MODULE_29__["_MatSortHeaderMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSortHeader", function () {
            return _angular_material_sort__WEBPACK_IMPORTED_MODULE_29__["MatSortHeader"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSortHeaderIntl", function () {
            return _angular_material_sort__WEBPACK_IMPORTED_MODULE_29__["MatSortHeaderIntl"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_SORT_HEADER_INTL_PROVIDER_FACTORY", function () {
            return _angular_material_sort__WEBPACK_IMPORTED_MODULE_29__["MAT_SORT_HEADER_INTL_PROVIDER_FACTORY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_SORT_HEADER_INTL_PROVIDER", function () {
            return _angular_material_sort__WEBPACK_IMPORTED_MODULE_29__["MAT_SORT_HEADER_INTL_PROVIDER"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSortBase", function () {
            return _angular_material_sort__WEBPACK_IMPORTED_MODULE_29__["MatSortBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatSortMixinBase", function () {
            return _angular_material_sort__WEBPACK_IMPORTED_MODULE_29__["_MatSortMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatSort", function () {
            return _angular_material_sort__WEBPACK_IMPORTED_MODULE_29__["MatSort"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "matSortAnimations", function () {
            return _angular_material_sort__WEBPACK_IMPORTED_MODULE_29__["matSortAnimations"];
        });

        /* harmony import */
        var _angular_material_stepper__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @angular/material/stepper */ "./node_modules/@angular/material/esm5/stepper.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatStepperModule", function () {
            return _angular_material_stepper__WEBPACK_IMPORTED_MODULE_30__["MatStepperModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatStepLabel", function () {
            return _angular_material_stepper__WEBPACK_IMPORTED_MODULE_30__["MatStepLabel"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatStep", function () {
            return _angular_material_stepper__WEBPACK_IMPORTED_MODULE_30__["MatStep"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatStepper", function () {
            return _angular_material_stepper__WEBPACK_IMPORTED_MODULE_30__["MatStepper"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatHorizontalStepper", function () {
            return _angular_material_stepper__WEBPACK_IMPORTED_MODULE_30__["MatHorizontalStepper"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatVerticalStepper", function () {
            return _angular_material_stepper__WEBPACK_IMPORTED_MODULE_30__["MatVerticalStepper"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatStepperNext", function () {
            return _angular_material_stepper__WEBPACK_IMPORTED_MODULE_30__["MatStepperNext"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatStepperPrevious", function () {
            return _angular_material_stepper__WEBPACK_IMPORTED_MODULE_30__["MatStepperPrevious"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatStepHeader", function () {
            return _angular_material_stepper__WEBPACK_IMPORTED_MODULE_30__["MatStepHeader"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatStepperIntl", function () {
            return _angular_material_stepper__WEBPACK_IMPORTED_MODULE_30__["MatStepperIntl"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "matStepperAnimations", function () {
            return _angular_material_stepper__WEBPACK_IMPORTED_MODULE_30__["matStepperAnimations"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatStepperIcon", function () {
            return _angular_material_stepper__WEBPACK_IMPORTED_MODULE_30__["MatStepperIcon"];
        });

        /* harmony import */
        var _angular_material_table__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @angular/material/table */ "./node_modules/@angular/material/esm5/table.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTableModule", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatTableModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCellDef", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatCellDef"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatHeaderCellDef", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatHeaderCellDef"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatFooterCellDef", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatFooterCellDef"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatColumnDef", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatColumnDef"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatHeaderCell", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatHeaderCell"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatFooterCell", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatFooterCell"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatCell", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatCell"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTable", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatTable"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatHeaderRowDef", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatHeaderRowDef"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatFooterRowDef", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatFooterRowDef"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatRowDef", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatRowDef"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatHeaderRow", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatHeaderRow"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatFooterRow", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatFooterRow"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatRow", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatRow"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTableDataSource", function () {
            return _angular_material_table__WEBPACK_IMPORTED_MODULE_31__["MatTableDataSource"];
        });

        /* harmony import */
        var _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @angular/material/tabs */ "./node_modules/@angular/material/esm5/tabs.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵa23", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["ɵa23"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵf23", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["ɵf23"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵg23", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["ɵg23"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵb23", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["ɵb23"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵc23", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["ɵc23"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵd23", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["ɵd23"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵe23", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["ɵe23"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵj23", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["ɵj23"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵh23", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["ɵh23"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵk23", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["ɵk23"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ɵi23", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["ɵi23"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatInkBar", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["MatInkBar"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MAT_INK_BAR_POSITIONER", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["_MAT_INK_BAR_POSITIONER"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTabBody", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["MatTabBody"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTabBodyPortal", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["MatTabBodyPortal"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTabHeader", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["MatTabHeader"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTabLabelWrapper", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["MatTabLabelWrapper"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTab", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["MatTab"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTabLabel", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["MatTabLabel"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTabNav", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["MatTabNav"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTabLink", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["MatTabLink"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTabContent", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["MatTabContent"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTabsModule", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["MatTabsModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTabChangeEvent", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["MatTabChangeEvent"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTabGroupBase", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["MatTabGroupBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatTabGroupMixinBase", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["_MatTabGroupMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTabGroup", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["MatTabGroup"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "matTabsAnimations", function () {
            return _angular_material_tabs__WEBPACK_IMPORTED_MODULE_32__["matTabsAnimations"];
        });

        /* harmony import */
        var _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @angular/material/toolbar */ "./node_modules/@angular/material/esm5/toolbar.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatToolbarModule", function () {
            return _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_33__["MatToolbarModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatToolbarBase", function () {
            return _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_33__["MatToolbarBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatToolbarMixinBase", function () {
            return _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_33__["_MatToolbarMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatToolbarRow", function () {
            return _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_33__["MatToolbarRow"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatToolbar", function () {
            return _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_33__["MatToolbar"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "throwToolbarMixedModesError", function () {
            return _angular_material_toolbar__WEBPACK_IMPORTED_MODULE_33__["throwToolbarMixedModesError"];
        });

        /* harmony import */
        var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @angular/material/tooltip */ "./node_modules/@angular/material/esm5/tooltip.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTooltipModule", function () {
            return _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_34__["MatTooltipModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "SCROLL_THROTTLE_MS", function () {
            return _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_34__["SCROLL_THROTTLE_MS"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "TOOLTIP_PANEL_CLASS", function () {
            return _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_34__["TOOLTIP_PANEL_CLASS"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "getMatTooltipInvalidPositionError", function () {
            return _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_34__["getMatTooltipInvalidPositionError"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_SCROLL_STRATEGY", function () {
            return _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_34__["MAT_TOOLTIP_SCROLL_STRATEGY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY", function () {
            return _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_34__["MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER", function () {
            return _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_34__["MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_DEFAULT_OPTIONS", function () {
            return _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_34__["MAT_TOOLTIP_DEFAULT_OPTIONS"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY", function () {
            return _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_34__["MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTooltip", function () {
            return _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_34__["MatTooltip"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "TooltipComponent", function () {
            return _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_34__["TooltipComponent"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "matTooltipAnimations", function () {
            return _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_34__["matTooltipAnimations"];
        });

        /* harmony import */
        var _angular_material_tree__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @angular/material/tree */ "./node_modules/@angular/material/esm5/tree.es5.js");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatTreeNodeMixinBase", function () {
            return _angular_material_tree__WEBPACK_IMPORTED_MODULE_35__["_MatTreeNodeMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "_MatNestedTreeNodeMixinBase", function () {
            return _angular_material_tree__WEBPACK_IMPORTED_MODULE_35__["_MatNestedTreeNodeMixinBase"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTreeNode", function () {
            return _angular_material_tree__WEBPACK_IMPORTED_MODULE_35__["MatTreeNode"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTreeNodeDef", function () {
            return _angular_material_tree__WEBPACK_IMPORTED_MODULE_35__["MatTreeNodeDef"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatNestedTreeNode", function () {
            return _angular_material_tree__WEBPACK_IMPORTED_MODULE_35__["MatNestedTreeNode"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTreeNodePadding", function () {
            return _angular_material_tree__WEBPACK_IMPORTED_MODULE_35__["MatTreeNodePadding"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTree", function () {
            return _angular_material_tree__WEBPACK_IMPORTED_MODULE_35__["MatTree"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTreeModule", function () {
            return _angular_material_tree__WEBPACK_IMPORTED_MODULE_35__["MatTreeModule"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTreeNodeToggle", function () {
            return _angular_material_tree__WEBPACK_IMPORTED_MODULE_35__["MatTreeNodeToggle"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTreeNodeOutlet", function () {
            return _angular_material_tree__WEBPACK_IMPORTED_MODULE_35__["MatTreeNodeOutlet"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTreeFlattener", function () {
            return _angular_material_tree__WEBPACK_IMPORTED_MODULE_35__["MatTreeFlattener"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTreeFlatDataSource", function () {
            return _angular_material_tree__WEBPACK_IMPORTED_MODULE_35__["MatTreeFlatDataSource"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "MatTreeNestedDataSource", function () {
            return _angular_material_tree__WEBPACK_IMPORTED_MODULE_35__["MatTreeNestedDataSource"];
        });

        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Current version of Angular Material.
         */
        var /** @type {?} */ VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('6.1.0');

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=material.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/menu.es5.js":
    /*!*********************************************************!*\
  !*** ./node_modules/@angular/material/esm5/menu.es5.js ***!
  \*********************************************************/
    /*! exports provided: MAT_MENU_SCROLL_STRATEGY, MatMenuModule, MatMenu, MAT_MENU_DEFAULT_OPTIONS, MatMenuItem, MatMenuTrigger, matMenuAnimations, fadeInItems, transformMenu, MatMenuContent, ɵa24, ɵb24, ɵc24, ɵf24, ɵd24, ɵe24 */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_MENU_SCROLL_STRATEGY", function () {
            return MAT_MENU_SCROLL_STRATEGY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatMenuModule", function () {
            return MatMenuModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatMenu", function () {
            return MatMenu;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_MENU_DEFAULT_OPTIONS", function () {
            return MAT_MENU_DEFAULT_OPTIONS;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatMenuItem", function () {
            return MatMenuItem;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatMenuTrigger", function () {
            return MatMenuTrigger;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "matMenuAnimations", function () {
            return matMenuAnimations;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "fadeInItems", function () {
            return fadeInItems;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "transformMenu", function () {
            return transformMenu;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatMenuContent", function () {
            return MatMenuContent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵa24", function () {
            return MAT_MENU_DEFAULT_OPTIONS_FACTORY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵb24", function () {
            return MatMenuItemBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵc24", function () {
            return _MatMenuItemMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵf24", function () {
            return MAT_MENU_PANEL;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵd24", function () {
            return MAT_MENU_SCROLL_STRATEGY_FACTORY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵe24", function () {
            return MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm5/portal.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_animations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm5/animations.js");
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm5/keycodes.es5.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Menu content that will be rendered lazily once the menu is opened.
         */
        var MatMenuContent = /** @class */ (function () {
            function MatMenuContent(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document) {
                this._template = _template;
                this._componentFactoryResolver = _componentFactoryResolver;
                this._appRef = _appRef;
                this._injector = _injector;
                this._viewContainerRef = _viewContainerRef;
                this._document = _document;
            }

            /**
             * Attaches the content with a particular context.
             * @docs-private
             */
            /**
             * Attaches the content with a particular context.
             * \@docs-private
             * @param {?=} context
             * @return {?}
             */
            MatMenuContent.prototype.attach = /**
             * Attaches the content with a particular context.
             * \@docs-private
             * @param {?=} context
             * @return {?}
             */
            function (context) {
                if (context === void 0) {
                    context = {};
                }
                if (!this._portal) {
                    this._portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["TemplatePortal"](this._template, this._viewContainerRef);
                }
                this.detach();
                if (!this._outlet) {
                    this._outlet = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["DomPortalOutlet"](this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);
                }
                var /** @type {?} */ element = this._template.elementRef.nativeElement;
                /** @type {?} */
                ((
                    // Because we support opening the same menu from different triggers (which in turn have their
                    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we
                    // risk it staying attached to a pane that's no longer in the DOM.
                    element.parentNode)).insertBefore(this._outlet.outletElement, element);
                this._portal.attach(this._outlet, context);
            };
            /**
             * Detaches the content.
             * @docs-private
             */
            /**
             * Detaches the content.
             * \@docs-private
             * @return {?}
             */
            MatMenuContent.prototype.detach = /**
             * Detaches the content.
             * \@docs-private
             * @return {?}
             */
            function () {
                if (this._portal.isAttached) {
                    this._portal.detach();
                }
            };
            /**
             * @return {?}
             */
            MatMenuContent.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                if (this._outlet) {
                    this._outlet.dispose();
                }
            };
            MatMenuContent.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: 'ng-template[matMenuContent]'
                    },]
                },
            ];
            /** @nocollapse */
            MatMenuContent.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ApplicationRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"],},
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],]
                        },]
                    },
                ];
            };
            return MatMenuContent;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Animations used by the mat-menu component.
         * Animation duration and timing values are based on:
         * https://material.io/guidelines/components/menus.html#menus-usage
         */
        var /** @type {?} */ matMenuAnimations = {
            /**
             * This animation controls the menu panel's entry and exit from the page.
             *
             * When the menu panel is added to the DOM, it scales in and fades in its border.
             *
             * When the menu panel is removed from the DOM, it simply fades out after a brief
             * delay to display the ripple.
             */
            transformMenu: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["trigger"])('transformMenu', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["state"])('void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["style"])({
                    opacity: 0,
                    // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations
                    // as of 4.2, which causes the animation to be skipped if it starts from 0.
                    transform: 'scale(0.01, 0.01)'
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["transition"])('void => enter', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["sequence"])([
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["query"])('.mat-menu-content', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["style"])({opacity: 0})),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["animate"])('100ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["style"])({
                        opacity: 1,
                        transform: 'scale(1, 0.5)'
                    })),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["group"])([
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["query"])('.mat-menu-content', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["animate"])('400ms cubic-bezier(0.55, 0, 0.55, 0.2)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["style"])({opacity: 1}))),
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["animate"])('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["style"])({transform: 'scale(1, 1)'})),
                    ])
                ])),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["transition"])('* => void', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["animate"])('150ms 50ms linear', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["style"])({opacity: 0})))
            ]),
            /**
             * This animation fades in the background color and content of the menu panel
             * after its containing element is scaled in.
             */
            fadeInItems: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["trigger"])('fadeInItems', [
                // TODO(crisbeto): this is inside the `transformMenu`
                // now. Remove next time we do breaking changes.
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["state"])('showing', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["style"])({opacity: 1})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["transition"])('void => *', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["style"])({opacity: 0}),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_3__["animate"])('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')
                ])
            ])
        };
        /**
         * @deprecated
         * \@deletion-target 7.0.0
         */
        var /** @type {?} */ fadeInItems = matMenuAnimations.fadeInItems;
        /**
         * @deprecated
         * \@deletion-target 7.0.0
         */
        var /** @type {?} */ transformMenu = matMenuAnimations.transformMenu;

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance
         * \@docs-private
         * @return {?}
         */
        function throwMatMenuMissingError() {
            throw Error("mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>");
        }

        /**
         * Throws an exception for the case when menu's x-position value isn't valid.
         * In other words, it doesn't match 'before' or 'after'.
         * \@docs-private
         * @return {?}
         */
        function throwMatMenuInvalidPositionX() {
            throw Error("x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>");
        }

        /**
         * Throws an exception for the case when menu's y-position value isn't valid.
         * In other words, it doesn't match 'above' or 'below'.
         * \@docs-private
         * @return {?}
         */
        function throwMatMenuInvalidPositionY() {
            throw Error("y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>");
        }

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Injection token used to provide the parent menu to menu-specific components.
         * \@docs-private
         */
        var /** @type {?} */ MAT_MENU_PANEL = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MAT_MENU_PANEL');

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatMenuItemBase = /** @class */ (function () {
            function MatMenuItemBase() {
            }

            return MatMenuItemBase;
        }());
        var /** @type {?} */ _MatMenuItemMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_6__["mixinDisableRipple"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_6__["mixinDisabled"])(MatMenuItemBase));
        /**
         * This directive is intended to be used inside an mat-menu tag.
         * It exists mostly to set the role attribute.
         */
        var MatMenuItem = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_4__["__extends"])(MatMenuItem, _super);

            function MatMenuItem(_elementRef, document, _focusMonitor, _parentMenu) {
                var _this =
                    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.
                    _super.call(this) || this;
                _this._elementRef = _elementRef;
                _this._focusMonitor = _focusMonitor;
                _this._parentMenu = _parentMenu;
                /**
                 * Stream that emits when the menu item is hovered.
                 */
                _this._hovered = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
                /**
                 * Whether the menu item is highlighted.
                 */
                _this._highlighted = false;
                /**
                 * Whether the menu item acts as a trigger for a sub-menu.
                 */
                _this._triggersSubmenu = false;
                if (_focusMonitor) {
                    // Start monitoring the element so it gets the appropriate focused classes. We want
                    // to show the focus style for menu items only when the focus was not caused by a
                    // mouse or touch interaction.
                    _focusMonitor.monitor(_this._getHostElement(), false);
                }
                if (_parentMenu && _parentMenu.addItem) {
                    _parentMenu.addItem(_this);
                }
                _this._document = document;
                return _this;
            }

            /** Focuses the menu item. */
            /**
             * Focuses the menu item.
             * @param {?=} origin
             * @return {?}
             */
            MatMenuItem.prototype.focus = /**
             * Focuses the menu item.
             * @param {?=} origin
             * @return {?}
             */
            function (origin) {
                if (origin === void 0) {
                    origin = 'program';
                }
                if (this._focusMonitor) {
                    this._focusMonitor.focusVia(this._getHostElement(), origin);
                }
                else {
                    this._getHostElement().focus();
                }
            };
            /**
             * @return {?}
             */
            MatMenuItem.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                if (this._focusMonitor) {
                    this._focusMonitor.stopMonitoring(this._getHostElement());
                }
                if (this._parentMenu && this._parentMenu.removeItem) {
                    this._parentMenu.removeItem(this);
                }
                this._hovered.complete();
            };
            /** Used to set the `tabindex`. */
            /**
             * Used to set the `tabindex`.
             * @return {?}
             */
            MatMenuItem.prototype._getTabIndex = /**
             * Used to set the `tabindex`.
             * @return {?}
             */
            function () {
                return this.disabled ? '-1' : '0';
            };
            /** Returns the host DOM element. */
            /**
             * Returns the host DOM element.
             * @return {?}
             */
            MatMenuItem.prototype._getHostElement = /**
             * Returns the host DOM element.
             * @return {?}
             */
            function () {
                return this._elementRef.nativeElement;
            };
            /** Prevents the default element actions if it is disabled. */
            /**
             * Prevents the default element actions if it is disabled.
             * @param {?} event
             * @return {?}
             */
            MatMenuItem.prototype._checkDisabled = /**
             * Prevents the default element actions if it is disabled.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (this.disabled) {
                    event.preventDefault();
                    event.stopPropagation();
                }
            };
            /** Emits to the hover stream. */
            /**
             * Emits to the hover stream.
             * @return {?}
             */
            MatMenuItem.prototype._handleMouseEnter = /**
             * Emits to the hover stream.
             * @return {?}
             */
            function () {
                this._hovered.next(this);
            };
            /** Gets the label to be used when determining whether the option should be focused. */
            /**
             * Gets the label to be used when determining whether the option should be focused.
             * @return {?}
             */
            MatMenuItem.prototype.getLabel = /**
             * Gets the label to be used when determining whether the option should be focused.
             * @return {?}
             */
            function () {
                var /** @type {?} */ element = this._elementRef.nativeElement;
                var /** @type {?} */ textNodeType = this._document ? this._document.TEXT_NODE : 3;
                var /** @type {?} */ output = '';
                if (element.childNodes) {
                    var /** @type {?} */ length_1 = element.childNodes.length;
                    // Go through all the top-level text nodes and extract their text.
                    // We skip anything that's not a text node to prevent the text from
                    // being thrown off by something like an icon.
                    for (var /** @type {?} */ i = 0; i < length_1; i++) {
                        if (element.childNodes[i].nodeType === textNodeType) {
                            output += element.childNodes[i].textContent;
                        }
                    }
                }
                return output.trim();
            };
            MatMenuItem.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: '[mat-menu-item]',
                        exportAs: 'matMenuItem',
                        inputs: ['disabled', 'disableRipple'],
                        host: {
                            'role': 'menuitem',
                            'class': 'mat-menu-item',
                            '[class.mat-menu-item-highlighted]': '_highlighted',
                            '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',
                            '[attr.tabindex]': '_getTabIndex()',
                            '[attr.aria-disabled]': 'disabled.toString()',
                            '[attr.disabled]': 'disabled || null',
                            '(click)': '_checkDisabled($event)',
                            '(mouseenter)': '_handleMouseEnter()',
                        },
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        template: "<ng-content></ng-content><div class=\"mat-menu-ripple\" matRipple [matRippleDisabled]=\"disableRipple || disabled\" [matRippleTrigger]=\"_getHostElement()\"></div>",
                    },]
                },
            ];
            /** @nocollapse */
            MatMenuItem.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"],]
                        },]
                    },
                    {type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__["FocusMonitor"],},
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [MAT_MENU_PANEL,]
                        }, {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                ];
            };
            return MatMenuItem;
        }(_MatMenuItemMixinBase));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Injection token to be used to override the default options for `mat-menu`.
         */
        var /** @type {?} */ MAT_MENU_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-menu-default-options', {
            providedIn: 'root',
            factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY
        });

        /**
         * \@docs-private
         * @return {?}
         */
        function MAT_MENU_DEFAULT_OPTIONS_FACTORY() {
            return {
                overlapTrigger: true,
                xPosition: 'after',
                yPosition: 'below',
                backdropClass: 'cdk-overlay-transparent-backdrop',
            };
        }

        /**
         * Start elevation for the menu panel.
         * \@docs-private
         */
        var /** @type {?} */ MAT_MENU_BASE_ELEVATION = 2;
        var MatMenu = /** @class */ (function () {
            function MatMenu(_elementRef, _ngZone, _defaultOptions) {
                this._elementRef = _elementRef;
                this._ngZone = _ngZone;
                this._defaultOptions = _defaultOptions;
                this._xPosition = this._defaultOptions.xPosition;
                this._yPosition = this._defaultOptions.yPosition;
                /**
                 * Menu items inside the current menu.
                 */
                this._items = [];
                /**
                 * Emits whenever the amount of menu items changes.
                 */
                this._itemChanges = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
                /**
                 * Subscription to tab events on the menu panel
                 */
                this._tabSubscription = rxjs__WEBPACK_IMPORTED_MODULE_7__["Subscription"].EMPTY;
                /**
                 * Config object to be passed into the menu's ngClass
                 */
                this._classList = {};
                /**
                 * Current state of the panel animation.
                 */
                this._panelAnimationState = 'void';
                /**
                 * Emits whenever an animation on the menu completes.
                 */
                this._animationDone = new rxjs__WEBPACK_IMPORTED_MODULE_7__["Subject"]();
                /**
                 * Class to be added to the backdrop element.
                 */
                this.backdropClass = this._defaultOptions.backdropClass;
                this._overlapTrigger = this._defaultOptions.overlapTrigger;
                this._hasBackdrop = this._defaultOptions.hasBackdrop;
                /**
                 * Event emitted when the menu is closed.
                 */
                this.closed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Event emitted when the menu is closed.
                 * @deprecated Switch to `closed` instead
                 * \@deletion-target 7.0.0
                 */
                this.close = this.closed;
            }

            Object.defineProperty(MatMenu.prototype, "xPosition", {
                get: /**
                 * Position of the menu in the X axis.
                 * @return {?}
                 */
                function () {
                    return this._xPosition;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (value !== 'before' && value !== 'after') {
                        throwMatMenuInvalidPositionX();
                    }
                    this._xPosition = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatMenu.prototype, "yPosition", {
                get: /**
                 * Position of the menu in the Y axis.
                 * @return {?}
                 */
                function () {
                    return this._yPosition;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (value !== 'above' && value !== 'below') {
                        throwMatMenuInvalidPositionY();
                    }
                    this._yPosition = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatMenu.prototype, "overlapTrigger", {
                get: /**
                 * Whether the menu should overlap its trigger.
                 * @return {?}
                 */
                function () {
                    return this._overlapTrigger;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._overlapTrigger = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatMenu.prototype, "hasBackdrop", {
                get: /**
                 * Whether the menu has a backdrop.
                 * @return {?}
                 */
                function () {
                    return this._hasBackdrop;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._hasBackdrop = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatMenu.prototype, "panelClass", {
                set: /**
                 * This method takes classes set on the host mat-menu element and applies them on the
                 * menu template that displays in the overlay container.  Otherwise, it's difficult
                 * to style the containing menu from outside the component.
                 * @param {?} classes list of class names
                 * @return {?}
                 */
                function (classes) {
                    if (classes && classes.length) {
                        this._classList = classes.split(' ').reduce(function (obj, className) {
                            obj[className] = true;
                            return obj;
                        }, {});
                        this._elementRef.nativeElement.className = '';
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatMenu.prototype, "classList", {
                get: /**
                 * This method takes classes set on the host mat-menu element and applies them on the
                 * menu template that displays in the overlay container.  Otherwise, it's difficult
                 * to style the containing menu from outside the component.
                 * @deprecated Use `panelClass` instead.
                 * \@deletion-target 7.0.0
                 * @return {?}
                 */
                function () {
                    return this.panelClass;
                },
                set: /**
                 * @param {?} classes
                 * @return {?}
                 */
                function (classes) {
                    this.panelClass = classes;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatMenu.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                var _this = this;
                this._keyManager = new _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__["FocusKeyManager"](this._items).withWrap().withTypeAhead();
                this._tabSubscription = this._keyManager.tabOut.subscribe(function () {
                    return _this.close.emit('tab');
                });
            };
            /**
             * @return {?}
             */
            MatMenu.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._tabSubscription.unsubscribe();
                this.closed.complete();
            };
            /** Stream that emits whenever the hovered menu item changes. */
            /**
             * Stream that emits whenever the hovered menu item changes.
             * @return {?}
             */
            MatMenu.prototype._hovered = /**
             * Stream that emits whenever the hovered menu item changes.
             * @return {?}
             */
            function () {
                return this._itemChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["startWith"])(this._items), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["switchMap"])(function (items) {
                    return rxjs__WEBPACK_IMPORTED_MODULE_7__["merge"].apply(void 0, items.map(function (item) {
                        return item._hovered;
                    }));
                }));
            };
            /** Handle a keyboard event from the menu, delegating to the appropriate action. */
            /**
             * Handle a keyboard event from the menu, delegating to the appropriate action.
             * @param {?} event
             * @return {?}
             */
            MatMenu.prototype._handleKeydown = /**
             * Handle a keyboard event from the menu, delegating to the appropriate action.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                var /** @type {?} */ keyCode = event.keyCode;
                switch (keyCode) {
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["ESCAPE"]:
                        this.closed.emit('keydown');
                        event.stopPropagation();
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["LEFT_ARROW"]:
                        if (this.parentMenu && this.direction === 'ltr') {
                            this.closed.emit('keydown');
                        }
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["RIGHT_ARROW"]:
                        if (this.parentMenu && this.direction === 'rtl') {
                            this.closed.emit('keydown');
                        }
                        break;
                    default:
                        if (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["UP_ARROW"] || keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["DOWN_ARROW"]) {
                            this._keyManager.setFocusOrigin('keyboard');
                        }
                        this._keyManager.onKeydown(event);
                }
            };
            /**
             * Focus the first item in the menu.
             * @param origin Action from which the focus originated. Used to set the correct styling.
             */
            /**
             * Focus the first item in the menu.
             * @param {?=} origin Action from which the focus originated. Used to set the correct styling.
             * @return {?}
             */
            MatMenu.prototype.focusFirstItem = /**
             * Focus the first item in the menu.
             * @param {?=} origin Action from which the focus originated. Used to set the correct styling.
             * @return {?}
             */
            function (origin) {
                var _this = this;
                if (origin === void 0) {
                    origin = 'program';
                }
                // When the content is rendered lazily, it takes a bit before the items are inside the DOM.
                if (this.lazyContent) {
                    this._ngZone.onStable.asObservable()
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1))
                        .subscribe(function () {
                            return _this._keyManager.setFocusOrigin(origin).setFirstItemActive();
                        });
                }
                else {
                    this._keyManager.setFocusOrigin(origin).setFirstItemActive();
                }
            };
            /**
             * Resets the active item in the menu. This is used when the menu is opened, allowing
             * the user to start from the first option when pressing the down arrow.
             */
            /**
             * Resets the active item in the menu. This is used when the menu is opened, allowing
             * the user to start from the first option when pressing the down arrow.
             * @return {?}
             */
            MatMenu.prototype.resetActiveItem = /**
             * Resets the active item in the menu. This is used when the menu is opened, allowing
             * the user to start from the first option when pressing the down arrow.
             * @return {?}
             */
            function () {
                this._keyManager.setActiveItem(-1);
            };
            /**
             * Sets the menu panel elevation.
             * @param depth Number of parent menus that come before the menu.
             */
            /**
             * Sets the menu panel elevation.
             * @param {?} depth Number of parent menus that come before the menu.
             * @return {?}
             */
            MatMenu.prototype.setElevation = /**
             * Sets the menu panel elevation.
             * @param {?} depth Number of parent menus that come before the menu.
             * @return {?}
             */
            function (depth) {
                // The elevation starts at the base and increases by one for each level.
                var /** @type {?} */ newElevation = "mat-elevation-z" + (MAT_MENU_BASE_ELEVATION + depth);
                var /** @type {?} */ customElevation = Object.keys(this._classList).find(function (c) {
                    return c.startsWith('mat-elevation-z');
                });
                if (!customElevation || customElevation === this._previousElevation) {
                    if (this._previousElevation) {
                        this._classList[this._previousElevation] = false;
                    }
                    this._classList[newElevation] = true;
                    this._previousElevation = newElevation;
                }
            };
            /**
             * Registers a menu item with the menu.
             * @docs-private
             */
            /**
             * Registers a menu item with the menu.
             * \@docs-private
             * @param {?} item
             * @return {?}
             */
            MatMenu.prototype.addItem = /**
             * Registers a menu item with the menu.
             * \@docs-private
             * @param {?} item
             * @return {?}
             */
            function (item) {
                // We register the items through this method, rather than picking them up through
                // `ContentChildren`, because we need the items to be picked up by their closest
                // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,
                // all descendant items will bleed into the top-level menu in the case where the consumer
                // has `mat-menu` instances nested inside each other.
                if (this._items.indexOf(item) === -1) {
                    this._items.push(item);
                    this._itemChanges.next(this._items);
                }
            };
            /**
             * Removes an item from the menu.
             * @docs-private
             */
            /**
             * Removes an item from the menu.
             * \@docs-private
             * @param {?} item
             * @return {?}
             */
            MatMenu.prototype.removeItem = /**
             * Removes an item from the menu.
             * \@docs-private
             * @param {?} item
             * @return {?}
             */
            function (item) {
                var /** @type {?} */ index = this._items.indexOf(item);
                if (this._items.indexOf(item) > -1) {
                    this._items.splice(index, 1);
                    this._itemChanges.next(this._items);
                }
            };
            /** Starts the enter animation. */
            /**
             * Starts the enter animation.
             * @return {?}
             */
            MatMenu.prototype._startAnimation = /**
             * Starts the enter animation.
             * @return {?}
             */
            function () {
                // @deletion-target 7.0.0 Combine with _resetAnimation.
                this._panelAnimationState = 'enter';
            };
            /** Resets the panel animation to its initial state. */
            /**
             * Resets the panel animation to its initial state.
             * @return {?}
             */
            MatMenu.prototype._resetAnimation = /**
             * Resets the panel animation to its initial state.
             * @return {?}
             */
            function () {
                // @deletion-target 7.0.0 Combine with _startAnimation.
                this._panelAnimationState = 'void';
            };
            /** Callback that is invoked when the panel animation completes. */
            /**
             * Callback that is invoked when the panel animation completes.
             * @param {?} event
             * @return {?}
             */
            MatMenu.prototype._onAnimationDone = /**
             * Callback that is invoked when the panel animation completes.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this._animationDone.next(event);
                this._isAnimating = false;
            };
            MatMenu.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-menu',
                        template: "<ng-template><div class=\"mat-menu-panel\" [ngClass]=\"_classList\" (keydown)=\"_handleKeydown($event)\" (click)=\"closed.emit('click')\" [@transformMenu]=\"_panelAnimationState\" (@transformMenu.start)=\"_isAnimating = true\" (@transformMenu.done)=\"_onAnimationDone($event)\" tabindex=\"-1\" role=\"menu\"><div class=\"mat-menu-content\"><ng-content></ng-content></div></div></ng-template>",
                        styles: [".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:2px;outline:0}.mat-menu-panel:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content{padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;position:relative}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:'';display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}.mat-menu-panel.ng-animating .mat-menu-item-submenu-trigger{pointer-events:none}button.mat-menu-item{width:100%}.mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}"],
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        exportAs: 'matMenu',
                        animations: [
                            matMenuAnimations.transformMenu,
                            matMenuAnimations.fadeInItems
                        ],
                        providers: [
                            {provide: MAT_MENU_PANEL, useExisting: MatMenu}
                        ]
                    },]
                },
            ];
            /** @nocollapse */
            MatMenu.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"],},
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [MAT_MENU_DEFAULT_OPTIONS,]
                        },]
                    },
                ];
            };
            MatMenu.propDecorators = {
                "backdropClass": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "xPosition": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "yPosition": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "templateRef": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
                    args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],]
                },],
                "items": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [MatMenuItem,]},],
                "lazyContent": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
                    args: [MatMenuContent,]
                },],
                "overlapTrigger": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "hasBackdrop": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "panelClass": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['class',]},],
                "classList": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "closed": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "close": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
            };
            return MatMenu;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Injection token that determines the scroll handling while the menu is open.
         */
        var /** @type {?} */ MAT_MENU_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('mat-menu-scroll-strategy');

        /**
         * \@docs-private
         * @param {?} overlay
         * @return {?}
         */
        function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {
            return function () {
                return overlay.scrollStrategies.reposition();
            };
        }

        /**
         * \@docs-private
         */
        var /** @type {?} */ MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {
            provide: MAT_MENU_SCROLL_STRATEGY,
            deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_12__["Overlay"]],
            useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,
        };
        /**
         * Default top padding of the menu panel.
         */
        var /** @type {?} */ MENU_PANEL_TOP_PADDING = 8;
        /**
         * This directive is intended to be used in conjunction with an mat-menu tag.  It is
         * responsible for toggling the display of the provided menu instance.
         */
        var MatMenuTrigger = /** @class */ (function () {
            function MatMenuTrigger(_overlay, _element, _viewContainerRef, _scrollStrategy, _parentMenu, _menuItemInstance, _dir, _focusMonitor) {
                this._overlay = _overlay;
                this._element = _element;
                this._viewContainerRef = _viewContainerRef;
                this._scrollStrategy = _scrollStrategy;
                this._parentMenu = _parentMenu;
                this._menuItemInstance = _menuItemInstance;
                this._dir = _dir;
                this._focusMonitor = _focusMonitor;
                this._overlayRef = null;
                this._menuOpen = false;
                this._closeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_7__["Subscription"].EMPTY;
                this._hoverSubscription = rxjs__WEBPACK_IMPORTED_MODULE_7__["Subscription"].EMPTY;
                this._openedByMouse = false;
                /**
                 * Event emitted when the associated menu is opened.
                 */
                this.menuOpened = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Event emitted when the associated menu is opened.
                 * @deprecated Switch to `menuOpened` instead
                 * \@deletion-target 7.0.0
                 */
                this.onMenuOpen = this.menuOpened;
                /**
                 * Event emitted when the associated menu is closed.
                 */
                this.menuClosed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Event emitted when the associated menu is closed.
                 * @deprecated Switch to `menuClosed` instead
                 * \@deletion-target 7.0.0
                 */
                this.onMenuClose = this.menuClosed;
                if (_menuItemInstance) {
                    _menuItemInstance._triggersSubmenu = this.triggersSubmenu();
                }
            }

            Object.defineProperty(MatMenuTrigger.prototype, "_deprecatedMatMenuTriggerFor", {
                get: /**
                 * @deprecated
                 * \@deletion-target 7.0.0
                 * @return {?}
                 */
                function () {
                    return this.menu;
                },
                set: /**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    this.menu = v;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatMenuTrigger.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                var _this = this;
                this._checkMenu();
                this.menu.close.subscribe(function (reason) {
                    _this._destroyMenu();
                    // If a click closed the menu, we should close the entire chain of nested menus.
                    if ((reason === 'click' || reason === 'tab') && _this._parentMenu) {
                        _this._parentMenu.closed.emit(reason);
                    }
                });
                this._handleHover();
            };
            /**
             * @return {?}
             */
            MatMenuTrigger.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                if (this._overlayRef) {
                    this._overlayRef.dispose();
                    this._overlayRef = null;
                }
                this._cleanUpSubscriptions();
            };
            Object.defineProperty(MatMenuTrigger.prototype, "menuOpen", {
                /** Whether the menu is open. */
                get: /**
                 * Whether the menu is open.
                 * @return {?}
                 */
                function () {
                    return this._menuOpen;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatMenuTrigger.prototype, "dir", {
                /** The text direction of the containing app. */
                get: /**
                 * The text direction of the containing app.
                 * @return {?}
                 */
                function () {
                    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
                },
                enumerable: true,
                configurable: true
            });
            /** Whether the menu triggers a sub-menu or a top-level one. */
            /**
             * Whether the menu triggers a sub-menu or a top-level one.
             * @return {?}
             */
            MatMenuTrigger.prototype.triggersSubmenu = /**
             * Whether the menu triggers a sub-menu or a top-level one.
             * @return {?}
             */
            function () {
                return !!(this._menuItemInstance && this._parentMenu);
            };
            /** Toggles the menu between the open and closed states. */
            /**
             * Toggles the menu between the open and closed states.
             * @return {?}
             */
            MatMenuTrigger.prototype.toggleMenu = /**
             * Toggles the menu between the open and closed states.
             * @return {?}
             */
            function () {
                return this._menuOpen ? this.closeMenu() : this.openMenu();
            };
            /** Opens the menu. */
            /**
             * Opens the menu.
             * @return {?}
             */
            MatMenuTrigger.prototype.openMenu = /**
             * Opens the menu.
             * @return {?}
             */
            function () {
                var _this = this;
                if (this._menuOpen) {
                    return;
                }
                var /** @type {?} */ overlayRef = this._createOverlay();
                overlayRef.setDirection(this.dir);
                overlayRef.attach(this._portal);
                if (this.menu.lazyContent) {
                    this.menu.lazyContent.attach(this.menuData);
                }
                this._closeSubscription = this._menuClosingActions().subscribe(function () {
                    return _this.closeMenu();
                });
                this._initMenu();
                if (this.menu instanceof MatMenu) {
                    this.menu._startAnimation();
                }
            };
            /** Closes the menu. */
            /**
             * Closes the menu.
             * @return {?}
             */
            MatMenuTrigger.prototype.closeMenu = /**
             * Closes the menu.
             * @return {?}
             */
            function () {
                this.menu.close.emit();
            };
            /**
             * Focuses the menu trigger.
             * @param origin Source of the menu trigger's focus.
             */
            /**
             * Focuses the menu trigger.
             * @param {?=} origin Source of the menu trigger's focus.
             * @return {?}
             */
            MatMenuTrigger.prototype.focus = /**
             * Focuses the menu trigger.
             * @param {?=} origin Source of the menu trigger's focus.
             * @return {?}
             */
            function (origin) {
                if (origin === void 0) {
                    origin = 'program';
                }
                if (this._focusMonitor) {
                    this._focusMonitor.focusVia(this._element.nativeElement, origin);
                }
                else {
                    this._element.nativeElement.focus();
                }
            };
            /**
             * Closes the menu and does the necessary cleanup.
             * @return {?}
             */
            MatMenuTrigger.prototype._destroyMenu = /**
             * Closes the menu and does the necessary cleanup.
             * @return {?}
             */
            function () {
                if (!this._overlayRef || !this.menuOpen) {
                    return;
                }
                var /** @type {?} */ menu = this.menu;
                this._resetMenu();
                this._closeSubscription.unsubscribe();
                this._overlayRef.detach();
                if (menu instanceof MatMenu) {
                    menu._resetAnimation();
                    if (menu.lazyContent) {
                        // Wait for the exit animation to finish before detaching the content.
                        menu._animationDone
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1))
                            .subscribe(function () {
                                return ((menu.lazyContent)).detach();
                            });
                    }
                }
                else if (menu.lazyContent) {
                    menu.lazyContent.detach();
                }
            };
            /**
             * This method sets the menu state to open and focuses the first item if
             * the menu was opened via the keyboard.
             * @return {?}
             */
            MatMenuTrigger.prototype._initMenu = /**
             * This method sets the menu state to open and focuses the first item if
             * the menu was opened via the keyboard.
             * @return {?}
             */
            function () {
                this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;
                this.menu.direction = this.dir;
                this._setMenuElevation();
                this._setIsMenuOpen(true);
                this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');
            };
            /**
             * Updates the menu elevation based on the amount of parent menus that it has.
             * @return {?}
             */
            MatMenuTrigger.prototype._setMenuElevation = /**
             * Updates the menu elevation based on the amount of parent menus that it has.
             * @return {?}
             */
            function () {
                if (this.menu.setElevation) {
                    var /** @type {?} */ depth = 0;
                    var /** @type {?} */ parentMenu = this.menu.parentMenu;
                    while (parentMenu) {
                        depth++;
                        parentMenu = parentMenu.parentMenu;
                    }
                    this.menu.setElevation(depth);
                }
            };
            /**
             * This method resets the menu when it's closed, most importantly restoring
             * focus to the menu trigger if the menu was opened via the keyboard.
             * @return {?}
             */
            MatMenuTrigger.prototype._resetMenu = /**
             * This method resets the menu when it's closed, most importantly restoring
             * focus to the menu trigger if the menu was opened via the keyboard.
             * @return {?}
             */
            function () {
                this._setIsMenuOpen(false);
                // We should reset focus if the user is navigating using a keyboard or
                // if we have a top-level trigger which might cause focus to be lost
                // when clicking on the backdrop.
                if (!this._openedByMouse) {
                    // Note that the focus style will show up both for `program` and
                    // `keyboard` so we don't have to specify which one it is.
                    this.focus();
                }
                else if (!this.triggersSubmenu()) {
                    this.focus('mouse');
                }
                this._openedByMouse = false;
            };
            /**
             * @param {?} isOpen
             * @return {?}
             */
            MatMenuTrigger.prototype._setIsMenuOpen = /**
             * @param {?} isOpen
             * @return {?}
             */
            function (isOpen) {
                this._menuOpen = isOpen;
                this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();
                if (this.triggersSubmenu()) {
                    this._menuItemInstance._highlighted = isOpen;
                }
            };
            /**
             * This method checks that a valid instance of MatMenu has been passed into
             * matMenuTriggerFor. If not, an exception is thrown.
             * @return {?}
             */
            MatMenuTrigger.prototype._checkMenu = /**
             * This method checks that a valid instance of MatMenu has been passed into
             * matMenuTriggerFor. If not, an exception is thrown.
             * @return {?}
             */
            function () {
                if (!this.menu) {
                    throwMatMenuMissingError();
                }
            };
            /**
             * This method creates the overlay from the provided menu's template and saves its
             * OverlayRef so that it can be attached to the DOM when openMenu is called.
             * @return {?}
             */
            MatMenuTrigger.prototype._createOverlay = /**
             * This method creates the overlay from the provided menu's template and saves its
             * OverlayRef so that it can be attached to the DOM when openMenu is called.
             * @return {?}
             */
            function () {
                if (!this._overlayRef) {
                    this._portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_1__["TemplatePortal"](this.menu.templateRef, this._viewContainerRef);
                    var /** @type {?} */ config = this._getOverlayConfig();
                    this._subscribeToPositions(/** @type {?} */ (config.positionStrategy));
                    this._overlayRef = this._overlay.create(config);
                }
                return this._overlayRef;
            };
            /**
             * This method builds the configuration object needed to create the overlay, the OverlayState.
             * @return {?} OverlayConfig
             */
            MatMenuTrigger.prototype._getOverlayConfig = /**
             * This method builds the configuration object needed to create the overlay, the OverlayState.
             * @return {?} OverlayConfig
             */
            function () {
                return new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_12__["OverlayConfig"]({
                    positionStrategy: this._getPosition(),
                    hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,
                    backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',
                    scrollStrategy: this._scrollStrategy()
                });
            };
            /**
             * Listens to changes in the position of the overlay and sets the correct classes
             * on the menu based on the new position. This ensures the animation origin is always
             * correct, even if a fallback position is used for the overlay.
             * @param {?} position
             * @return {?}
             */
            MatMenuTrigger.prototype._subscribeToPositions = /**
             * Listens to changes in the position of the overlay and sets the correct classes
             * on the menu based on the new position. This ensures the animation origin is always
             * correct, even if a fallback position is used for the overlay.
             * @param {?} position
             * @return {?}
             */
            function (position) {
                var _this = this;
                if (this.menu.setPositionClasses) {
                    position.positionChanges.subscribe(function (change) {
                        var /** @type {?} */ posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';
                        var /** @type {?} */ posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';
                        /** @type {?} */
                        ((_this.menu.setPositionClasses))(posX, posY);
                    });
                }
            };
            /**
             * This method builds the position strategy for the overlay, so the menu is properly connected
             * to the trigger.
             * @return {?} ConnectedPositionStrategy
             */
            MatMenuTrigger.prototype._getPosition = /**
             * This method builds the position strategy for the overlay, so the menu is properly connected
             * to the trigger.
             * @return {?} ConnectedPositionStrategy
             */
            function () {
                var _a = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'], originX = _a[0],
                    originFallbackX = _a[1];
                var _b = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'], overlayY = _b[0],
                    overlayFallbackY = _b[1];
                var _c = [overlayY, overlayFallbackY], originY = _c[0], originFallbackY = _c[1];
                var _d = [originX, originFallbackX], overlayX = _d[0], overlayFallbackX = _d[1];
                var /** @type {?} */ offsetY = 0;
                if (this.triggersSubmenu()) {
                    // When the menu is a sub-menu, it should always align itself
                    // to the edges of the trigger, instead of overlapping it.
                    overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';
                    originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';
                    offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;
                }
                else if (!this.menu.overlapTrigger) {
                    originY = overlayY === 'top' ? 'bottom' : 'top';
                    originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';
                }
                return this._overlay.position()
                    .flexibleConnectedTo(this._element)
                    .withTransformOriginOn('.mat-menu-panel')
                    .withPositions([
                        {originX: originX, originY: originY, overlayX: overlayX, overlayY: overlayY, offsetY: offsetY},
                        {
                            originX: originFallbackX,
                            originY: originY,
                            overlayX: overlayFallbackX,
                            overlayY: overlayY,
                            offsetY: offsetY
                        },
                        {
                            originX: originX,
                            originY: originFallbackY,
                            overlayX: overlayX,
                            overlayY: overlayFallbackY,
                            offsetY: -offsetY
                        },
                        {
                            originX: originFallbackX,
                            originY: originFallbackY,
                            overlayX: overlayFallbackX,
                            overlayY: overlayFallbackY,
                            offsetY: -offsetY
                        }
                    ]);
            };
            /**
             * Cleans up the active subscriptions.
             * @return {?}
             */
            MatMenuTrigger.prototype._cleanUpSubscriptions = /**
             * Cleans up the active subscriptions.
             * @return {?}
             */
            function () {
                this._closeSubscription.unsubscribe();
                this._hoverSubscription.unsubscribe();
            };
            /**
             * Returns a stream that emits whenever an action that should close the menu occurs.
             * @return {?}
             */
            MatMenuTrigger.prototype._menuClosingActions = /**
             * Returns a stream that emits whenever an action that should close the menu occurs.
             * @return {?}
             */
            function () {
                var _this = this;
                var /** @type {?} */ backdrop = /** @type {?} */ ((this._overlayRef)).backdropClick();
                var /** @type {?} */ detachments = /** @type {?} */ ((this._overlayRef)).detachments();
                var /** @type {?} */ parentClose = this._parentMenu ? this._parentMenu.close : Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["of"])();
                var /** @type {?} */ hover = this._parentMenu ? this._parentMenu._hovered().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(function (active) {
                    return active !== _this._menuItemInstance;
                }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(function () {
                    return _this._menuOpen;
                })) : Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["of"])();
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_7__["merge"])(backdrop, parentClose, hover, detachments);
            };
            /** Handles mouse presses on the trigger. */
            /**
             * Handles mouse presses on the trigger.
             * @param {?} event
             * @return {?}
             */
            MatMenuTrigger.prototype._handleMousedown = /**
             * Handles mouse presses on the trigger.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (!Object(_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__["isFakeMousedownFromScreenReader"])(event)) {
                    this._openedByMouse = true;
                    // Since clicking on the trigger won't close the menu if it opens a sub-menu,
                    // we should prevent focus from moving onto it via click to avoid the
                    // highlight from lingering on the menu item.
                    if (this.triggersSubmenu()) {
                        event.preventDefault();
                    }
                }
            };
            /** Handles key presses on the trigger. */
            /**
             * Handles key presses on the trigger.
             * @param {?} event
             * @return {?}
             */
            MatMenuTrigger.prototype._handleKeydown = /**
             * Handles key presses on the trigger.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                var /** @type {?} */ keyCode = event.keyCode;
                if (this.triggersSubmenu() && ((keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["RIGHT_ARROW"] && this.dir === 'ltr') ||
                    (keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["LEFT_ARROW"] && this.dir === 'rtl'))) {
                    this.openMenu();
                }
            };
            /** Handles click events on the trigger. */
            /**
             * Handles click events on the trigger.
             * @param {?} event
             * @return {?}
             */
            MatMenuTrigger.prototype._handleClick = /**
             * Handles click events on the trigger.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (this.triggersSubmenu()) {
                    // Stop event propagation to avoid closing the parent menu.
                    event.stopPropagation();
                    this.openMenu();
                }
                else {
                    this.toggleMenu();
                }
            };
            /**
             * Handles the cases where the user hovers over the trigger.
             * @return {?}
             */
            MatMenuTrigger.prototype._handleHover = /**
             * Handles the cases where the user hovers over the trigger.
             * @return {?}
             */
            function () {
                var _this = this;
                // Subscribe to changes in the hovered item in order to toggle the panel.
                if (!this.triggersSubmenu()) {
                    return;
                }
                this._hoverSubscription = this._parentMenu._hovered()
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["filter"])(function (active) {
                        return active === _this._menuItemInstance && !active.disabled;
                    }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["delay"])(0, rxjs__WEBPACK_IMPORTED_MODULE_7__["asapScheduler"]))
                    .subscribe(function () {
                        _this._openedByMouse = true;
                        // If the same menu is used between multiple triggers, it might still be animating
                        // while the new trigger tries to re-open it. Wait for the animation to finish
                        // before doing so. Also interrupt if the user moves to another item.
                        if (_this.menu instanceof MatMenu && _this.menu._isAnimating) {
                            _this.menu._animationDone
                                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(_this._parentMenu._hovered()))
                                .subscribe(function () {
                                    return _this.openMenu();
                                });
                        }
                        else {
                            _this.openMenu();
                        }
                    });
            };
            MatMenuTrigger.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: "[mat-menu-trigger-for], [matMenuTriggerFor]",
                        host: {
                            'aria-haspopup': 'true',
                            '(mousedown)': '_handleMousedown($event)',
                            '(keydown)': '_handleKeydown($event)',
                            '(click)': '_handleClick($event)',
                        },
                        exportAs: 'matMenuTrigger'
                    },]
                },
            ];
            /** @nocollapse */
            MatMenuTrigger.ctorParameters = function () {
                return [
                    {type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_12__["Overlay"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"],},
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [MAT_MENU_SCROLL_STRATEGY,]
                        },]
                    },
                    {type: MatMenu, decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]},
                    {
                        type: MatMenuItem,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]}, {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Self"]},]
                    },
                    {
                        type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__["Directionality"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                    {type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__["FocusMonitor"],},
                ];
            };
            MatMenuTrigger.propDecorators = {
                "_deprecatedMatMenuTriggerFor": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
                    args: ['mat-menu-trigger-for',]
                },],
                "menu": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['matMenuTriggerFor',]},],
                "menuData": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
                    args: ['matMenuTriggerData',]
                },],
                "menuOpened": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "onMenuOpen": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "menuClosed": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "onMenuClose": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
            };
            return MatMenuTrigger;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatMenuModule = /** @class */ (function () {
            function MatMenuModule() {
            }

            MatMenuModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                        imports: [
                            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_6__["MatCommonModule"],
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_6__["MatRippleModule"],
                            _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_12__["OverlayModule"],
                        ],
                        exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, _angular_material_core__WEBPACK_IMPORTED_MODULE_6__["MatCommonModule"]],
                        declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],
                        providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]
                    },]
                },
            ];
            return MatMenuModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=menu.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/paginator.es5.js":
    /*!**************************************************************!*\
  !*** ./node_modules/@angular/material/esm5/paginator.es5.js ***!
  \**************************************************************/
    /*! exports provided: MatPaginatorModule, PageEvent, MatPaginatorBase, _MatPaginatorBase, MatPaginator, MatPaginatorIntl, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MAT_PAGINATOR_INTL_PROVIDER */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatPaginatorModule", function () {
            return MatPaginatorModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "PageEvent", function () {
            return PageEvent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatPaginatorBase", function () {
            return MatPaginatorBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MatPaginatorBase", function () {
            return _MatPaginatorBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatPaginator", function () {
            return MatPaginator;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatPaginatorIntl", function () {
            return MatPaginatorIntl;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_PAGINATOR_INTL_PROVIDER_FACTORY", function () {
            return MAT_PAGINATOR_INTL_PROVIDER_FACTORY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_PAGINATOR_INTL_PROVIDER", function () {
            return MAT_PAGINATOR_INTL_PROVIDER;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_material_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm5/button.es5.js");
        /* harmony import */
        var _angular_material_select__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/select */ "./node_modules/@angular/material/esm5/select.es5.js");
        /* harmony import */
        var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/tooltip */ "./node_modules/@angular/material/esm5/tooltip.es5.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and
         * include it in a custom provider
         */
        var MatPaginatorIntl = /** @class */ (function () {
            function MatPaginatorIntl() {
                /**
                 * Stream that emits whenever the labels here are changed. Use this to notify
                 * components if the labels have changed after initialization.
                 */
                this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
                /**
                 * A label for the page size selector.
                 */
                this.itemsPerPageLabel = 'Items per page:';
                /**
                 * A label for the button that increments the current page.
                 */
                this.nextPageLabel = 'Next page';
                /**
                 * A label for the button that decrements the current page.
                 */
                this.previousPageLabel = 'Previous page';
                /**
                 * A label for the button that moves to the first page.
                 */
                this.firstPageLabel = 'First page';
                /**
                 * A label for the button that moves to the last page.
                 */
                this.lastPageLabel = 'Last page';
                /**
                 * A label for the range of items within the current page and the length of the whole list.
                 */
                this.getRangeLabel = function (page, pageSize, length) {
                    if (length == 0 || pageSize == 0) {
                        return "0 of " + length;
                    }
                    length = Math.max(length, 0);
                    var /** @type {?} */ startIndex = page * pageSize;
                    // If the start index exceeds the list length, do not try and fix the end index to the end.
                    var /** @type {?} */ endIndex = startIndex < length ?
                        Math.min(startIndex + pageSize, length) :
                        startIndex + pageSize;
                    return startIndex + 1 + " - " + endIndex + " of " + length;
                };
            }

            MatPaginatorIntl.decorators = [
                {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{providedIn: 'root'},]},
            ];
            /** @nocollapse */ MatPaginatorIntl.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["defineInjectable"])({
                factory: function MatPaginatorIntl_Factory() {
                    return new MatPaginatorIntl();
                }, token: MatPaginatorIntl, providedIn: "root"
            });
            return MatPaginatorIntl;
        }());

        /**
         * \@docs-private
         * @param {?} parentIntl
         * @return {?}
         */
        function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {
            return parentIntl || new MatPaginatorIntl();
        }

        /**
         * \@docs-private
         */
        var /** @type {?} */ MAT_PAGINATOR_INTL_PROVIDER = {
            // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.
            provide: MatPaginatorIntl,
            deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"](), MatPaginatorIntl]],
            useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY
        };

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * The default page size if there is no page size and there are no provided page size options.
         */
        var /** @type {?} */ DEFAULT_PAGE_SIZE = 50;
        /**
         * Change event object that is emitted when the user selects a
         * different page size or navigates to another page.
         */
        var /**
         * Change event object that is emitted when the user selects a
         * different page size or navigates to another page.
         */
        PageEvent = /** @class */ (function () {
            function PageEvent() {
            }

            return PageEvent;
        }());
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatPaginatorBase = /** @class */ (function () {
            function MatPaginatorBase() {
            }

            return MatPaginatorBase;
        }());
        var /** @type {?} */ _MatPaginatorBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_4__["mixinInitialized"])(MatPaginatorBase);
        /**
         * Component to provide navigation between paged information. Displays the size of the current
         * page, user-selectable options to change that size, what items are being shown, and
         * navigational button to go to the previous or next page.
         */
        var MatPaginator = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_2__["__extends"])(MatPaginator, _super);

            function MatPaginator(_intl, _changeDetectorRef) {
                var _this = _super.call(this) || this;
                _this._intl = _intl;
                _this._changeDetectorRef = _changeDetectorRef;
                _this._pageIndex = 0;
                _this._length = 0;
                _this._pageSizeOptions = [];
                _this._hidePageSize = false;
                _this._showFirstLastButtons = false;
                /**
                 * Event emitted when the paginator changes the page size or page index.
                 */
                _this.page = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                _this._intlChanges = _intl.changes.subscribe(function () {
                    return _this._changeDetectorRef.markForCheck();
                });
                return _this;
            }

            Object.defineProperty(MatPaginator.prototype, "pageIndex", {
                get: /**
                 * The zero-based page index of the displayed list of items. Defaulted to 0.
                 * @return {?}
                 */
                function () {
                    return this._pageIndex;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._pageIndex = Math.max(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(value), 0);
                    this._changeDetectorRef.markForCheck();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatPaginator.prototype, "length", {
                get: /**
                 * The length of the total number of items that are being paginated. Defaulted to 0.
                 * @return {?}
                 */
                function () {
                    return this._length;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._length = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(value);
                    this._changeDetectorRef.markForCheck();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatPaginator.prototype, "pageSize", {
                get: /**
                 * Number of items to display on a page. By default set to 50.
                 * @return {?}
                 */
                function () {
                    return this._pageSize;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._pageSize = Math.max(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(value), 0);
                    this._updateDisplayedPageSizeOptions();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatPaginator.prototype, "pageSizeOptions", {
                get: /**
                 * The set of provided page size options to display to the user.
                 * @return {?}
                 */
                function () {
                    return this._pageSizeOptions;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._pageSizeOptions = (value || []).map(function (p) {
                        return Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(p);
                    });
                    this._updateDisplayedPageSizeOptions();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatPaginator.prototype, "hidePageSize", {
                get: /**
                 * Whether to hide the page size selection UI from the user.
                 * @return {?}
                 */
                function () {
                    return this._hidePageSize;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._hidePageSize = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatPaginator.prototype, "showFirstLastButtons", {
                get: /**
                 * Whether to show the first/last buttons UI to the user.
                 * @return {?}
                 */
                function () {
                    return this._showFirstLastButtons;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._showFirstLastButtons = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatPaginator.prototype.ngOnInit = /**
             * @return {?}
             */
            function () {
                this._initialized = true;
                this._updateDisplayedPageSizeOptions();
                this._markInitialized();
            };
            /**
             * @return {?}
             */
            MatPaginator.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._intlChanges.unsubscribe();
            };
            /** Advances to the next page if it exists. */
            /**
             * Advances to the next page if it exists.
             * @return {?}
             */
            MatPaginator.prototype.nextPage = /**
             * Advances to the next page if it exists.
             * @return {?}
             */
            function () {
                if (!this.hasNextPage()) {
                    return;
                }
                var /** @type {?} */ previousPageIndex = this.pageIndex;
                this.pageIndex++;
                this._emitPageEvent(previousPageIndex);
            };
            /** Move back to the previous page if it exists. */
            /**
             * Move back to the previous page if it exists.
             * @return {?}
             */
            MatPaginator.prototype.previousPage = /**
             * Move back to the previous page if it exists.
             * @return {?}
             */
            function () {
                if (!this.hasPreviousPage()) {
                    return;
                }
                var /** @type {?} */ previousPageIndex = this.pageIndex;
                this.pageIndex--;
                this._emitPageEvent(previousPageIndex);
            };
            /** Move to the first page if not already there. */
            /**
             * Move to the first page if not already there.
             * @return {?}
             */
            MatPaginator.prototype.firstPage = /**
             * Move to the first page if not already there.
             * @return {?}
             */
            function () {
                // hasPreviousPage being false implies at the start
                if (!this.hasPreviousPage()) {
                    return;
                }
                var /** @type {?} */ previousPageIndex = this.pageIndex;
                this.pageIndex = 0;
                this._emitPageEvent(previousPageIndex);
            };
            /** Move to the last page if not already there. */
            /**
             * Move to the last page if not already there.
             * @return {?}
             */
            MatPaginator.prototype.lastPage = /**
             * Move to the last page if not already there.
             * @return {?}
             */
            function () {
                // hasNextPage being false implies at the end
                if (!this.hasNextPage()) {
                    return;
                }
                var /** @type {?} */ previousPageIndex = this.pageIndex;
                this.pageIndex = this.getNumberOfPages();
                this._emitPageEvent(previousPageIndex);
            };
            /** Whether there is a previous page. */
            /**
             * Whether there is a previous page.
             * @return {?}
             */
            MatPaginator.prototype.hasPreviousPage = /**
             * Whether there is a previous page.
             * @return {?}
             */
            function () {
                return this.pageIndex >= 1 && this.pageSize != 0;
            };
            /** Whether there is a next page. */
            /**
             * Whether there is a next page.
             * @return {?}
             */
            MatPaginator.prototype.hasNextPage = /**
             * Whether there is a next page.
             * @return {?}
             */
            function () {
                var /** @type {?} */ numberOfPages = this.getNumberOfPages();
                return this.pageIndex < numberOfPages && this.pageSize != 0;
            };
            /** Calculate the number of pages */
            /**
             * Calculate the number of pages
             * @return {?}
             */
            MatPaginator.prototype.getNumberOfPages = /**
             * Calculate the number of pages
             * @return {?}
             */
            function () {
                return Math.ceil(this.length / this.pageSize) - 1;
            };
            /**
             * Changes the page size so that the first item displayed on the page will still be
             * displayed using the new page size.
             *
             * For example, if the page size is 10 and on the second page (items indexed 10-19) then
             * switching so that the page size is 5 will set the third page as the current page so
             * that the 10th item will still be displayed.
             */
            /**
             * Changes the page size so that the first item displayed on the page will still be
             * displayed using the new page size.
             *
             * For example, if the page size is 10 and on the second page (items indexed 10-19) then
             * switching so that the page size is 5 will set the third page as the current page so
             * that the 10th item will still be displayed.
             * @param {?} pageSize
             * @return {?}
             */
            MatPaginator.prototype._changePageSize = /**
             * Changes the page size so that the first item displayed on the page will still be
             * displayed using the new page size.
             *
             * For example, if the page size is 10 and on the second page (items indexed 10-19) then
             * switching so that the page size is 5 will set the third page as the current page so
             * that the 10th item will still be displayed.
             * @param {?} pageSize
             * @return {?}
             */
            function (pageSize) {
                // Current page needs to be updated to reflect the new page size. Navigate to the page
                // containing the previous page's first item.
                var /** @type {?} */ startIndex = this.pageIndex * this.pageSize;
                var /** @type {?} */ previousPageIndex = this.pageIndex;
                this.pageIndex = Math.floor(startIndex / pageSize) || 0;
                this.pageSize = pageSize;
                this._emitPageEvent(previousPageIndex);
            };
            /**
             * Updates the list of page size options to display to the user. Includes making sure that
             * the page size is an option and that the list is sorted.
             * @return {?}
             */
            MatPaginator.prototype._updateDisplayedPageSizeOptions = /**
             * Updates the list of page size options to display to the user. Includes making sure that
             * the page size is an option and that the list is sorted.
             * @return {?}
             */
            function () {
                if (!this._initialized) {
                    return;
                }
                // If no page size is provided, use the first page size option or the default page size.
                if (!this.pageSize) {
                    this._pageSize = this.pageSizeOptions.length != 0 ?
                        this.pageSizeOptions[0] :
                        DEFAULT_PAGE_SIZE;
                }
                this._displayedPageSizeOptions = this.pageSizeOptions.slice();
                if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {
                    this._displayedPageSizeOptions.push(this.pageSize);
                }
                // Sort the numbers using a number-specific sort function.
                this._displayedPageSizeOptions.sort(function (a, b) {
                    return a - b;
                });
                this._changeDetectorRef.markForCheck();
            };
            /**
             * Emits an event notifying that a change of the paginator's properties has been triggered.
             * @param {?} previousPageIndex
             * @return {?}
             */
            MatPaginator.prototype._emitPageEvent = /**
             * Emits an event notifying that a change of the paginator's properties has been triggered.
             * @param {?} previousPageIndex
             * @return {?}
             */
            function (previousPageIndex) {
                this.page.emit({
                    previousPageIndex: previousPageIndex,
                    pageIndex: this.pageIndex,
                    pageSize: this.pageSize,
                    length: this.length
                });
            };
            MatPaginator.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-paginator',
                        exportAs: 'matPaginator',
                        template: "<div class=\"mat-paginator-container\"><div class=\"mat-paginator-page-size\" *ngIf=\"!hidePageSize\"><div class=\"mat-paginator-page-size-label\">{{_intl.itemsPerPageLabel}}</div><mat-form-field *ngIf=\"_displayedPageSizeOptions.length > 1\" class=\"mat-paginator-page-size-select\"><mat-select [value]=\"pageSize\" [aria-label]=\"_intl.itemsPerPageLabel\" (selectionChange)=\"_changePageSize($event.value)\"><mat-option *ngFor=\"let pageSizeOption of _displayedPageSizeOptions\" [value]=\"pageSizeOption\">{{pageSizeOption}}</mat-option></mat-select></mat-form-field><div *ngIf=\"_displayedPageSizeOptions.length <= 1\">{{pageSize}}</div></div><div class=\"mat-paginator-range-actions\"><div class=\"mat-paginator-range-label\">{{_intl.getRangeLabel(pageIndex, pageSize, length)}}</div><button mat-icon-button type=\"button\" class=\"mat-paginator-navigation-first\" (click)=\"firstPage()\" [attr.aria-label]=\"_intl.firstPageLabel\" [matTooltip]=\"_intl.firstPageLabel\" [matTooltipPosition]=\"'above'\" [disabled]=\"!hasPreviousPage()\" *ngIf=\"showFirstLastButtons\"><svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\"><path d=\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"/></svg></button> <button mat-icon-button type=\"button\" class=\"mat-paginator-navigation-previous\" (click)=\"previousPage()\" [attr.aria-label]=\"_intl.previousPageLabel\" [matTooltip]=\"_intl.previousPageLabel\" [matTooltipPosition]=\"'above'\" [disabled]=\"!hasPreviousPage()\"><svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/></svg></button> <button mat-icon-button type=\"button\" class=\"mat-paginator-navigation-next\" (click)=\"nextPage()\" [attr.aria-label]=\"_intl.nextPageLabel\" [matTooltip]=\"_intl.nextPageLabel\" [matTooltipPosition]=\"'above'\" [disabled]=\"!hasNextPage()\"><svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/></svg></button> <button mat-icon-button type=\"button\" class=\"mat-paginator-navigation-last\" (click)=\"lastPage()\" [attr.aria-label]=\"_intl.lastPageLabel\" [matTooltip]=\"_intl.lastPageLabel\" [matTooltipPosition]=\"'above'\" [disabled]=\"!hasNextPage()\" *ngIf=\"showFirstLastButtons\"><svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\"><path d=\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"/></svg></button></div></div>",
                        styles: [".mat-paginator{display:block}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;min-height:56px;padding:0 8px;flex-wrap:wrap-reverse}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center;min-height:48px}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}"],
                        host: {
                            'class': 'mat-paginator',
                        },
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                    },]
                },
            ];
            /** @nocollapse */
            MatPaginator.ctorParameters = function () {
                return [
                    {type: MatPaginatorIntl,},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"],},
                ];
            };
            MatPaginator.propDecorators = {
                "pageIndex": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "length": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "pageSize": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "pageSizeOptions": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "hidePageSize": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "showFirstLastButtons": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "page": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
            };
            return MatPaginator;
        }(_MatPaginatorBase));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatPaginatorModule = /** @class */ (function () {
            function MatPaginatorModule() {
            }

            MatPaginatorModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                        imports: [
                            _angular_common__WEBPACK_IMPORTED_MODULE_5__["CommonModule"],
                            _angular_material_button__WEBPACK_IMPORTED_MODULE_6__["MatButtonModule"],
                            _angular_material_select__WEBPACK_IMPORTED_MODULE_7__["MatSelectModule"],
                            _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_8__["MatTooltipModule"],
                        ],
                        exports: [MatPaginator],
                        declarations: [MatPaginator],
                        providers: [MAT_PAGINATOR_INTL_PROVIDER],
                    },]
                },
            ];
            return MatPaginatorModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=paginator.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/progress-bar.es5.js":
    /*!*****************************************************************!*\
  !*** ./node_modules/@angular/material/esm5/progress-bar.es5.js ***!
  \*****************************************************************/
    /*! exports provided: MatProgressBarModule, MatProgressBarBase, _MatProgressBarMixinBase, MatProgressBar */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatProgressBarModule", function () {
            return MatProgressBarModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatProgressBarBase", function () {
            return MatProgressBarBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MatProgressBarMixinBase", function () {
            return _MatProgressBarMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatProgressBar", function () {
            return MatProgressBar;
        });
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm5/animations.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatProgressBarBase = /** @class */ (function () {
            function MatProgressBarBase(_elementRef) {
                this._elementRef = _elementRef;
            }

            return MatProgressBarBase;
        }());
        var /** @type {?} */ _MatProgressBarMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(MatProgressBarBase, 'primary');
        /**
         * Counter used to generate unique IDs for progress bars.
         */
        var /** @type {?} */ progressbarId = 0;
        /**
         * `<mat-progress-bar>` component.
         */
        var MatProgressBar = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatProgressBar, _super);

            function MatProgressBar(_elementRef, _animationMode) {
                var _this = _super.call(this, _elementRef) || this;
                _this._elementRef = _elementRef;
                _this._animationMode = _animationMode;
                _this._value = 0;
                _this._bufferValue = 0;
                /**
                 * Mode of the progress bar.
                 *
                 * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to
                 * 'determinate'.
                 * Mirrored to mode attribute.
                 */
                _this.mode = 'determinate';
                /**
                 * The id of the progress bar.
                 */
                _this.progressbarId = "mat-progress-bar-" + progressbarId++;
                return _this;
            }

            Object.defineProperty(MatProgressBar.prototype, "value", {
                get: /**
                 * Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow.
                 * @return {?}
                 */
                function () {
                    return this._value;
                },
                set: /**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    this._value = clamp(v || 0);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatProgressBar.prototype, "bufferValue", {
                get: /**
                 * Buffer value of the progress bar. Defaults to zero.
                 * @return {?}
                 */
                function () {
                    return this._bufferValue;
                },
                set: /**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    this._bufferValue = clamp(v || 0);
                },
                enumerable: true,
                configurable: true
            });
            /** Gets the current transform value for the progress bar's primary indicator. */
            /**
             * Gets the current transform value for the progress bar's primary indicator.
             * @return {?}
             */
            MatProgressBar.prototype._primaryTransform = /**
             * Gets the current transform value for the progress bar's primary indicator.
             * @return {?}
             */
            function () {
                var /** @type {?} */ scale = this.value / 100;
                return {transform: "scaleX(" + scale + ")"};
            };
            /**
             * Gets the current transform value for the progress bar's buffer indicator. Only used if the
             * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.
             */
            /**
             * Gets the current transform value for the progress bar's buffer indicator. Only used if the
             * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.
             * @return {?}
             */
            MatProgressBar.prototype._bufferTransform = /**
             * Gets the current transform value for the progress bar's buffer indicator. Only used if the
             * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.
             * @return {?}
             */
            function () {
                if (this.mode === 'buffer') {
                    var /** @type {?} */ scale = this.bufferValue / 100;
                    return {transform: "scaleX(" + scale + ")"};
                }
            };
            MatProgressBar.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'mat-progress-bar',
                        exportAs: 'matProgressBar',
                        host: {
                            'role': 'progressbar',
                            'aria-valuemin': '0',
                            'aria-valuemax': '100',
                            '[attr.aria-valuenow]': 'value',
                            '[attr.mode]': 'mode',
                            'class': 'mat-progress-bar',
                            '[class._mat-animation-noopable]': "_animationMode === 'NoopAnimations'",
                        },
                        inputs: ['color'],
                        template: "<svg width=\"100%\" height=\"5\" focusable=\"false\" class=\"mat-progress-bar-background mat-progress-bar-element\"><defs><pattern [id]=\"progressbarId\" x=\"5\" y=\"0\" width=\"10\" height=\"5\" patternUnits=\"userSpaceOnUse\"><circle cx=\"2.5\" cy=\"2.5\" r=\"2.5\"/></pattern></defs><rect [attr.fill]=\"'url(#' + progressbarId + ')'\" width=\"100%\" height=\"100%\"/></svg><div class=\"mat-progress-bar-buffer mat-progress-bar-element\" [ngStyle]=\"_bufferTransform()\"></div><div class=\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\" [ngStyle]=\"_primaryTransform()\"></div><div class=\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\"></div>",
                        styles: [".mat-progress-bar{display:block;height:5px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}._mat-animation-noopable.mat-progress-bar .mat-progress-bar-buffer{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}._mat-animation-noopable.mat-progress-bar .mat-progress-bar-fill{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:'';display:inline-block;left:0}._mat-animation-noopable.mat-progress-bar .mat-progress-bar-fill::after{transition:none;animation:none}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}._mat-animation-noopable.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none;animation:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}._mat-animation-noopable.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{transition:none;animation:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2s infinite linear}._mat-animation-noopable.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{transition:none;animation:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;display:block}._mat-animation-noopable.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{transition:none;animation:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2s infinite linear}._mat-animation-noopable.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{transition:none;animation:none}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear}._mat-animation-noopable.mat-progress-bar[mode=buffer] .mat-progress-bar-background{transition:none;animation:none}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-10px)}}"],
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                    },]
                },
            ];
            /** @nocollapse */
            MatProgressBar.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                            args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__["ANIMATION_MODULE_TYPE"],]
                        },]
                    },
                ];
            };
            MatProgressBar.propDecorators = {
                "value": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "bufferValue": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "mode": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
            };
            return MatProgressBar;
        }(_MatProgressBarMixinBase));

        /**
         * Clamps a value to be between two numbers, by default 0 and 100.
         * @param {?} v
         * @param {?=} min
         * @param {?=} max
         * @return {?}
         */
        function clamp(v, min, max) {
            if (min === void 0) {
                min = 0;
            }
            if (max === void 0) {
                max = 100;
            }
            return Math.max(min, Math.min(max, v));
        }

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatProgressBarModule = /** @class */ (function () {
            function MatProgressBarModule() {
            }

            MatProgressBarModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]],
                        exports: [MatProgressBar, _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]],
                        declarations: [MatProgressBar],
                    },]
                },
            ];
            return MatProgressBarModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=progress-bar.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/progress-spinner.es5.js":
    /*!*********************************************************************!*\
  !*** ./node_modules/@angular/material/esm5/progress-spinner.es5.js ***!
  \*********************************************************************/
    /*! exports provided: MatProgressSpinnerModule, MatProgressSpinnerBase, _MatProgressSpinnerMixinBase, MatProgressSpinner, MatSpinner */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatProgressSpinnerModule", function () {
            return MatProgressSpinnerModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatProgressSpinnerBase", function () {
            return MatProgressSpinnerBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MatProgressSpinnerMixinBase", function () {
            return _MatProgressSpinnerMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatProgressSpinner", function () {
            return MatProgressSpinner;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSpinner", function () {
            return MatSpinner;
        });
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm5/animations.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm5/platform.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Base reference size of the spinner.
         * \@docs-private
         */
        var /** @type {?} */ BASE_SIZE = 100;
        /**
         * Base reference stroke width of the spinner.
         * \@docs-private
         */
        var /** @type {?} */ BASE_STROKE_WIDTH = 10;
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatProgressSpinnerBase = /** @class */ (function () {
            function MatProgressSpinnerBase(_elementRef) {
                this._elementRef = _elementRef;
            }

            return MatProgressSpinnerBase;
        }());
        var /** @type {?} */ _MatProgressSpinnerMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(MatProgressSpinnerBase, 'primary');
// .0001 percentage difference is necessary in order to avoid unwanted animation frames
// for example because the animation duration is 4 seconds, .1% accounts to 4ms
// which are enough to see the flicker described in
// https://github.com/angular/material2/issues/8984
        var /** @type {?} */ INDETERMINATE_ANIMATION_TEMPLATE = "\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n";
        /**
         * `<mat-progress-spinner>` component.
         */
        var MatProgressSpinner = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatProgressSpinner, _super);

            function MatProgressSpinner(_elementRef, platform, _document, _animationMode) {
                var _this = _super.call(this, _elementRef) || this;
                _this._elementRef = _elementRef;
                _this._document = _document;
                _this._animationMode = _animationMode;
                _this._value = 0;
                _this._fallbackAnimation = false;
                _this._diameter = BASE_SIZE;
                /**
                 * Mode of the progress circle
                 */
                _this.mode = 'determinate';
                _this._fallbackAnimation = platform.EDGE || platform.TRIDENT;
                // On IE and Edge, we can't animate the `stroke-dashoffset`
                // reliably so we fall back to a non-spec animation.
                var /** @type {?} */ animationClass = "mat-progress-spinner-indeterminate" + (_this._fallbackAnimation ? '-fallback' : '') + "-animation";
                _elementRef.nativeElement.classList.add(animationClass);
                return _this;
            }

            Object.defineProperty(MatProgressSpinner.prototype, "diameter", {
                get: /**
                 * The diameter of the progress spinner (will set width and height of svg).
                 * @return {?}
                 */
                function () {
                    return this._diameter;
                },
                set: /**
                 * @param {?} size
                 * @return {?}
                 */
                function (size) {
                    this._diameter = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceNumberProperty"])(size);
                    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {
                        this._attachStyleNode();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatProgressSpinner.prototype, "strokeWidth", {
                get: /**
                 * Stroke width of the progress spinner.
                 * @return {?}
                 */
                function () {
                    return this._strokeWidth || this.diameter / 10;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._strokeWidth = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceNumberProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatProgressSpinner.prototype, "value", {
                get: /**
                 * Value of the progress circle.
                 * @return {?}
                 */
                function () {
                    return this.mode === 'determinate' ? this._value : 0;
                },
                set: /**
                 * @param {?} newValue
                 * @return {?}
                 */
                function (newValue) {
                    this._value = Math.max(0, Math.min(100, Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__["coerceNumberProperty"])(newValue)));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatProgressSpinner.prototype, "_circleRadius", {
                /** The radius of the spinner, adjusted for stroke width. */
                get: /**
                 * The radius of the spinner, adjusted for stroke width.
                 * @return {?}
                 */
                function () {
                    return (this.diameter - BASE_STROKE_WIDTH) / 2;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatProgressSpinner.prototype, "_viewBox", {
                /** The view box of the spinner's svg element. */
                get: /**
                 * The view box of the spinner's svg element.
                 * @return {?}
                 */
                function () {
                    var /** @type {?} */ viewBox = this._circleRadius * 2 + this.strokeWidth;
                    return "0 0 " + viewBox + " " + viewBox;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatProgressSpinner.prototype, "_strokeCircumference", {
                /** The stroke circumference of the svg circle. */
                get: /**
                 * The stroke circumference of the svg circle.
                 * @return {?}
                 */
                function () {
                    return 2 * Math.PI * this._circleRadius;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatProgressSpinner.prototype, "_strokeDashOffset", {
                /** The dash offset of the svg circle. */
                get: /**
                 * The dash offset of the svg circle.
                 * @return {?}
                 */
                function () {
                    if (this.mode === 'determinate') {
                        return this._strokeCircumference * (100 - this._value) / 100;
                    }
                    // In fallback mode set the circle to 80% and rotate it with CSS.
                    if (this._fallbackAnimation && this.mode === 'indeterminate') {
                        return this._strokeCircumference * 0.2;
                    }
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatProgressSpinner.prototype, "_circleStrokeWidth", {
                /** Stroke width of the circle in percent. */
                get: /**
                 * Stroke width of the circle in percent.
                 * @return {?}
                 */
                function () {
                    return this.strokeWidth / this.diameter * 100;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Dynamically generates a style tag containing the correct animation for this diameter.
             * @return {?}
             */
            MatProgressSpinner.prototype._attachStyleNode = /**
             * Dynamically generates a style tag containing the correct animation for this diameter.
             * @return {?}
             */
            function () {
                var /** @type {?} */ styleTag = MatProgressSpinner.styleTag;
                if (!styleTag) {
                    styleTag = this._document.createElement('style');
                    this._document.head.appendChild(styleTag);
                    MatProgressSpinner.styleTag = styleTag;
                }
                if (styleTag && styleTag.sheet) {
                    (/** @type {?} */ (styleTag.sheet)).insertRule(this._getAnimationText(), 0);
                }
                MatProgressSpinner.diameters.add(this.diameter);
            };
            /**
             * Generates animation styles adjusted for the spinner's diameter.
             * @return {?}
             */
            MatProgressSpinner.prototype._getAnimationText = /**
             * Generates animation styles adjusted for the spinner's diameter.
             * @return {?}
             */
            function () {
                return INDETERMINATE_ANIMATION_TEMPLATE
                    .replace(/START_VALUE/g, "" + 0.95 * this._strokeCircumference)
                    .replace(/END_VALUE/g, "" + 0.2 * this._strokeCircumference)
                    .replace(/DIAMETER/g, "" + this.diameter);
            };
            /**
             * Tracks diameters of existing instances to de-dupe generated styles (default d = 100)
             */
            MatProgressSpinner.diameters = new Set([BASE_SIZE]);
            /**
             * Used for storing all of the generated keyframe animations.
             * \@dynamic
             */
            MatProgressSpinner.styleTag = null;
            MatProgressSpinner.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'mat-progress-spinner',
                        exportAs: 'matProgressSpinner',
                        host: {
                            'role': 'progressbar',
                            'class': 'mat-progress-spinner',
                            '[class._mat-animation-noopable]': "_animationMode === 'NoopAnimations'",
                            '[style.width.px]': 'diameter',
                            '[style.height.px]': 'diameter',
                            '[attr.aria-valuemin]': 'mode === "determinate" ? 0 : null',
                            '[attr.aria-valuemax]': 'mode === "determinate" ? 100 : null',
                            '[attr.aria-valuenow]': 'value',
                            '[attr.mode]': 'mode',
                        },
                        inputs: ['color'],
                        template: "<svg [style.width.px]=\"diameter\" [style.height.px]=\"diameter\" [attr.viewBox]=\"_viewBox\" preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\"><circle cx=\"50%\" cy=\"50%\" [attr.r]=\"_circleRadius\" [style.animation-name]=\"'mat-progress-spinner-stroke-rotate-' + diameter\" [style.stroke-dashoffset.px]=\"_strokeDashOffset\" [style.stroke-dasharray.px]=\"_strokeCircumference\" [style.stroke-width.%]=\"_circleStrokeWidth\"></circle></svg>",
                        styles: [".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}"],
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                    },]
                },
            ];
            /** @nocollapse */
            MatProgressSpinner.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                    {type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"],},
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                            args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"],]
                        },]
                    },
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                            args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__["ANIMATION_MODULE_TYPE"],]
                        },]
                    },
                ];
            };
            MatProgressSpinner.propDecorators = {
                "diameter": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "strokeWidth": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "mode": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "value": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
            };
            return MatProgressSpinner;
        }(_MatProgressSpinnerMixinBase));
        /**
         * `<mat-spinner>` component.
         *
         * This is a component definition to be used as a convenience reference to create an
         * indeterminate `<mat-progress-spinner>` instance.
         */
        var MatSpinner = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatSpinner, _super);

            function MatSpinner(elementRef, platform, document, _animationMode) {
                var _this = _super.call(this, elementRef, platform, document, _animationMode) || this;
                _this.mode = 'indeterminate';
                return _this;
            }

            MatSpinner.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'mat-spinner',
                        host: {
                            'role': 'progressbar',
                            'mode': 'indeterminate',
                            'class': 'mat-spinner mat-progress-spinner',
                            '[class._mat-animation-noopable]': "_animationMode === 'NoopAnimations'",
                            '[style.width.px]': 'diameter',
                            '[style.height.px]': 'diameter',
                        },
                        inputs: ['color'],
                        template: "<svg [style.width.px]=\"diameter\" [style.height.px]=\"diameter\" [attr.viewBox]=\"_viewBox\" preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\"><circle cx=\"50%\" cy=\"50%\" [attr.r]=\"_circleRadius\" [style.animation-name]=\"'mat-progress-spinner-stroke-rotate-' + diameter\" [style.stroke-dashoffset.px]=\"_strokeDashOffset\" [style.stroke-dasharray.px]=\"_strokeCircumference\" [style.stroke-width.%]=\"_circleStrokeWidth\"></circle></svg>",
                        styles: [".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}"],
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                    },]
                },
            ];
            /** @nocollapse */
            MatSpinner.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                    {type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__["Platform"],},
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                            args: [_angular_common__WEBPACK_IMPORTED_MODULE_5__["DOCUMENT"],]
                        },]
                    },
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                            args: [_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__["ANIMATION_MODULE_TYPE"],]
                        },]
                    },
                ];
            };
            return MatSpinner;
        }(MatProgressSpinner));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatProgressSpinnerModule = /** @class */ (function () {
            function MatProgressSpinnerModule() {
            }

            MatProgressSpinnerModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                        imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]],
                        exports: [
                            MatProgressSpinner,
                            MatSpinner,
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]
                        ],
                        declarations: [
                            MatProgressSpinner,
                            MatSpinner
                        ],
                    },]
                },
            ];
            return MatProgressSpinnerModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=progress-spinner.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/slide-toggle.es5.js":
    /*!*****************************************************************!*\
  !*** ./node_modules/@angular/material/esm5/slide-toggle.es5.js ***!
  \*****************************************************************/
    /*! exports provided: MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggleBase, _MatSlideToggleMixinBase, MatSlideToggle */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSlideToggleModule", function () {
            return MatSlideToggleModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_SLIDE_TOGGLE_VALUE_ACCESSOR", function () {
            return MAT_SLIDE_TOGGLE_VALUE_ACCESSOR;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSlideToggleChange", function () {
            return MatSlideToggleChange;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSlideToggleBase", function () {
            return MatSlideToggleBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MatSlideToggleMixinBase", function () {
            return _MatSlideToggleMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSlideToggle", function () {
            return MatSlideToggle;
        });
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm5/platform.es5.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/observers */ "./node_modules/@angular/cdk/esm5/observers.es5.js");
        /* harmony import */
        var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
// Increasing integer for generating unique ids for slide-toggle components.
        var /** @type {?} */ nextUniqueId = 0;
        var /** @type {?} */ MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {
            provide: _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NG_VALUE_ACCESSOR"],
            useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["forwardRef"])(function () {
                return MatSlideToggle;
            }),
            multi: true
        };
        /**
         * Change event object emitted by a MatSlideToggle.
         */
        var /**
         * Change event object emitted by a MatSlideToggle.
         */
        MatSlideToggleChange = /** @class */ (function () {
            function MatSlideToggleChange(source, checked) {
                this.source = source;
                this.checked = checked;
            }

            return MatSlideToggleChange;
        }());
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatSlideToggleBase = /** @class */ (function () {
            function MatSlideToggleBase(_elementRef) {
                this._elementRef = _elementRef;
            }

            return MatSlideToggleBase;
        }());
        var /** @type {?} */ _MatSlideToggleMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_6__["mixinTabIndex"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_6__["mixinColor"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_6__["mixinDisableRipple"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_6__["mixinDisabled"])(MatSlideToggleBase)), 'accent'));
        /**
         * Represents a slidable "switch" toggle that can be moved between on and off.
         */
        var MatSlideToggle = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatSlideToggle, _super);

            function MatSlideToggle(elementRef, /**
                                     * @deprecated The `_platform` parameter to be removed.
                                     * @deletion-target 7.0.0
                                     */
                                    /**
                                     * @deprecated The `_platform` parameter to be removed.
                                     * @deletion-target 7.0.0
                                     */
                                    _platform, _focusMonitor, _changeDetectorRef, tabIndex, _ngZone) {
                var _this = _super.call(this, elementRef) || this;
                _this._focusMonitor = _focusMonitor;
                _this._changeDetectorRef = _changeDetectorRef;
                _this._ngZone = _ngZone;
                _this.onChange = function (_) {
                };
                _this.onTouched = function () {
                };
                _this._uniqueId = "mat-slide-toggle-" + ++nextUniqueId;
                _this._required = false;
                _this._checked = false;
                /**
                 * Whether the thumb is currently being dragged.
                 */
                _this._dragging = false;
                /**
                 * Name value will be applied to the input element if present
                 */
                _this.name = null;
                /**
                 * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.
                 */
                _this.id = _this._uniqueId;
                /**
                 * Whether the label should appear after or before the slide-toggle. Defaults to 'after'
                 */
                _this.labelPosition = 'after';
                /**
                 * Used to set the aria-label attribute on the underlying input element.
                 */
                _this.ariaLabel = null;
                /**
                 * Used to set the aria-labelledby attribute on the underlying input element.
                 */
                _this.ariaLabelledby = null;
                /**
                 * An event will be dispatched each time the slide-toggle changes its value.
                 */
                _this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
                _this.tabIndex = parseInt(tabIndex) || 0;
                return _this;
            }

            Object.defineProperty(MatSlideToggle.prototype, "required", {
                get: /**
                 * Whether the slide-toggle is required.
                 * @return {?}
                 */
                function () {
                    return this._required;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlideToggle.prototype, "checked", {
                get: /**
                 * Whether the slide-toggle element is checked or not
                 * @return {?}
                 */
                function () {
                    return this._checked;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._checked = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(value);
                    this._changeDetectorRef.markForCheck();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlideToggle.prototype, "inputId", {
                /** Returns the unique id for the visual hidden input. */
                get: /**
                 * Returns the unique id for the visual hidden input.
                 * @return {?}
                 */
                function () {
                    return (this.id || this._uniqueId) + "-input";
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatSlideToggle.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                var _this = this;
                this._focusMonitor
                    .monitor(this._inputElement.nativeElement)
                    .subscribe(function (focusOrigin) {
                        return _this._onInputFocusChange(focusOrigin);
                    });
            };
            /**
             * @return {?}
             */
            MatSlideToggle.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);
            };
            /** Method being called whenever the underlying input emits a change event. */
            /**
             * Method being called whenever the underlying input emits a change event.
             * @param {?} event
             * @return {?}
             */
            MatSlideToggle.prototype._onChangeEvent = /**
             * Method being called whenever the underlying input emits a change event.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                // We always have to stop propagation on the change event.
                // Otherwise the change event, from the input element, will bubble up and
                // emit its event object to the component's `change` output.
                event.stopPropagation();
                // Releasing the pointer over the `<label>` element while dragging triggers another
                // click event on the `<label>` element. This means that the checked state of the underlying
                // input changed unintentionally and needs to be changed back.
                if (this._dragging) {
                    this._inputElement.nativeElement.checked = this.checked;
                    return;
                }
                // Sync the value from the underlying input element with the component instance.
                this.checked = this._inputElement.nativeElement.checked;
                // Emit our custom change event only if the underlying input emitted one. This ensures that
                // there is no change event, when the checked state changes programmatically.
                this._emitChangeEvent();
            };
            /** Method being called whenever the slide-toggle has been clicked. */
            /**
             * Method being called whenever the slide-toggle has been clicked.
             * @param {?} event
             * @return {?}
             */
            MatSlideToggle.prototype._onInputClick = /**
             * Method being called whenever the slide-toggle has been clicked.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                // We have to stop propagation for click events on the visual hidden input element.
                // By default, when a user clicks on a label element, a generated click event will be
                // dispatched on the associated input element. Since we are using a label element as our
                // root container, the click event on the `slide-toggle` will be executed twice.
                // The real click event will bubble up, and the generated click event also tries to bubble up.
                // This will lead to multiple click events.
                // Preventing bubbling for the second event will solve that issue.
                event.stopPropagation();
            };
            /** Implemented as part of ControlValueAccessor. */
            /**
             * Implemented as part of ControlValueAccessor.
             * @param {?} value
             * @return {?}
             */
            MatSlideToggle.prototype.writeValue = /**
             * Implemented as part of ControlValueAccessor.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.checked = !!value;
            };
            /** Implemented as part of ControlValueAccessor. */
            /**
             * Implemented as part of ControlValueAccessor.
             * @param {?} fn
             * @return {?}
             */
            MatSlideToggle.prototype.registerOnChange = /**
             * Implemented as part of ControlValueAccessor.
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this.onChange = fn;
            };
            /** Implemented as part of ControlValueAccessor. */
            /**
             * Implemented as part of ControlValueAccessor.
             * @param {?} fn
             * @return {?}
             */
            MatSlideToggle.prototype.registerOnTouched = /**
             * Implemented as part of ControlValueAccessor.
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this.onTouched = fn;
            };
            /** Implemented as a part of ControlValueAccessor. */
            /**
             * Implemented as a part of ControlValueAccessor.
             * @param {?} isDisabled
             * @return {?}
             */
            MatSlideToggle.prototype.setDisabledState = /**
             * Implemented as a part of ControlValueAccessor.
             * @param {?} isDisabled
             * @return {?}
             */
            function (isDisabled) {
                this.disabled = isDisabled;
                this._changeDetectorRef.markForCheck();
            };
            /** Focuses the slide-toggle. */
            /**
             * Focuses the slide-toggle.
             * @return {?}
             */
            MatSlideToggle.prototype.focus = /**
             * Focuses the slide-toggle.
             * @return {?}
             */
            function () {
                this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');
            };
            /** Toggles the checked state of the slide-toggle. */
            /**
             * Toggles the checked state of the slide-toggle.
             * @return {?}
             */
            MatSlideToggle.prototype.toggle = /**
             * Toggles the checked state of the slide-toggle.
             * @return {?}
             */
            function () {
                this.checked = !this.checked;
            };
            /**
             * Function is called whenever the focus changes for the input element.
             * @param {?} focusOrigin
             * @return {?}
             */
            MatSlideToggle.prototype._onInputFocusChange = /**
             * Function is called whenever the focus changes for the input element.
             * @param {?} focusOrigin
             * @return {?}
             */
            function (focusOrigin) {
                // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889
                if (!this._focusRipple && focusOrigin === 'keyboard') {
                    // For keyboard focus show a persistent ripple as focus indicator.
                    this._focusRipple = this._ripple.launch(0, 0, {persistent: true});
                }
                else if (!focusOrigin) {
                    this.onTouched();
                    // Fade out and clear the focus ripple if one is currently present.
                    if (this._focusRipple) {
                        this._focusRipple.fadeOut();
                        this._focusRipple = null;
                    }
                }
            };
            /**
             * Emits a change event on the `change` output. Also notifies the FormControl about the change.
             * @return {?}
             */
            MatSlideToggle.prototype._emitChangeEvent = /**
             * Emits a change event on the `change` output. Also notifies the FormControl about the change.
             * @return {?}
             */
            function () {
                this.onChange(this.checked);
                this.change.emit(new MatSlideToggleChange(this, this.checked));
            };
            /**
             * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.
             * @param {?} distance
             * @return {?}
             */
            MatSlideToggle.prototype._getDragPercentage = /**
             * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.
             * @param {?} distance
             * @return {?}
             */
            function (distance) {
                var /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;
                // When the toggle was initially checked, then we have to start the drag at the end.
                if (this._previousChecked) {
                    percentage += 100;
                }
                return Math.max(0, Math.min(percentage, 100));
            };
            /**
             * @return {?}
             */
            MatSlideToggle.prototype._onDragStart = /**
             * @return {?}
             */
            function () {
                if (!this.disabled && !this._dragging) {
                    var /** @type {?} */ thumbEl = this._thumbEl.nativeElement;
                    this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;
                    thumbEl.classList.add('mat-dragging');
                    this._previousChecked = this.checked;
                    this._dragging = true;
                }
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatSlideToggle.prototype._onDrag = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (this._dragging) {
                    this._dragPercentage = this._getDragPercentage(event.deltaX);
                    // Calculate the moved distance based on the thumb bar width.
                    var /** @type {?} */ dragX = (this._dragPercentage / 100) * this._thumbBarWidth;
                    this._thumbEl.nativeElement.style.transform = "translate3d(" + dragX + "px, 0, 0)";
                }
            };
            /**
             * @return {?}
             */
            MatSlideToggle.prototype._onDragEnd = /**
             * @return {?}
             */
            function () {
                var _this = this;
                if (this._dragging) {
                    var /** @type {?} */ newCheckedValue = this._dragPercentage > 50;
                    if (newCheckedValue !== this.checked) {
                        this.checked = newCheckedValue;
                        this._emitChangeEvent();
                    }
                    // The drag should be stopped outside of the current event handler, otherwise the
                    // click event will be fired before it and will revert the drag change.
                    this._ngZone.runOutsideAngular(function () {
                        return setTimeout(function () {
                            if (_this._dragging) {
                                _this._dragging = false;
                                _this._thumbEl.nativeElement.classList.remove('mat-dragging');
                                // Reset the transform because the component will take care
                                // of the thumb position after drag.
                                // Reset the transform because the component will take care
                                // of the thumb position after drag.
                                _this._thumbEl.nativeElement.style.transform = '';
                            }
                        });
                    });
                }
            };
            /** Method being called whenever the label text changes. */
            /**
             * Method being called whenever the label text changes.
             * @return {?}
             */
            MatSlideToggle.prototype._onLabelTextChange = /**
             * Method being called whenever the label text changes.
             * @return {?}
             */
            function () {
                // This method is getting called whenever the label of the slide-toggle changes.
                // Since the slide-toggle uses the OnPush strategy we need to notify it about the change
                // that has been recognized by the cdkObserveContent directive.
                this._changeDetectorRef.markForCheck();
            };
            MatSlideToggle.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"], args: [{
                        selector: 'mat-slide-toggle',
                        exportAs: 'matSlideToggle',
                        host: {
                            'class': 'mat-slide-toggle',
                            '[id]': 'id',
                            '[class.mat-checked]': 'checked',
                            '[class.mat-disabled]': 'disabled',
                            '[class.mat-slide-toggle-label-before]': 'labelPosition == "before"',
                        },
                        template: "<label class=\"mat-slide-toggle-label\" #label><div #toggleBar class=\"mat-slide-toggle-bar\" [class.mat-slide-toggle-bar-no-side-margin]=\"!labelContent.textContent || !labelContent.textContent.trim()\"><input #input class=\"mat-slide-toggle-input cdk-visually-hidden\" type=\"checkbox\" [id]=\"inputId\" [required]=\"required\" [tabIndex]=\"tabIndex\" [checked]=\"checked\" [disabled]=\"disabled\" [attr.name]=\"name\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" (change)=\"_onChangeEvent($event)\" (click)=\"_onInputClick($event)\"><div class=\"mat-slide-toggle-thumb-container\" #thumbContainer (slidestart)=\"_onDragStart()\" (slide)=\"_onDrag($event)\" (slideend)=\"_onDragEnd()\"><div class=\"mat-slide-toggle-thumb\"></div><div class=\"mat-slide-toggle-ripple\" mat-ripple [matRippleTrigger]=\"label\" [matRippleDisabled]=\"disableRipple || disabled\" [matRippleCentered]=\"true\" [matRippleRadius]=\"23\" [matRippleAnimation]=\"{enterDuration: 150}\"></div></div></div><span class=\"mat-slide-toggle-content\" #labelContent (cdkObserveContent)=\"_onLabelTextChange()\"><ng-content></ng-content></span></label>",
                        styles: [".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging,.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing;transition-duration:0s}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%;box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:solid 1px #000}}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}@media screen and (-ms-high-contrast:active){.mat-slide-toggle-bar{background:#fff}}.mat-slide-toggle-input{bottom:0;left:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}.mat-slide-toggle-ripple{position:absolute;top:calc(50% - 23px);left:calc(50% - 23px);height:46px;width:46px;z-index:1;pointer-events:none}"],
                        providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],
                        inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectionStrategy"].OnPush,
                    },]
                },
            ];
            /** @nocollapse */
            MatSlideToggle.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ElementRef"],},
                    {type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_3__["Platform"],},
                    {type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusMonitor"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ChangeDetectorRef"],},
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Attribute"],
                            args: ['tabindex',]
                        },]
                    },
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgZone"],},
                ];
            };
            MatSlideToggle.propDecorators = {
                "_thumbEl": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"],
                    args: ['thumbContainer',]
                },],
                "_thumbBarEl": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"], args: ['toggleBar',]},],
                "name": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]},],
                "id": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]},],
                "labelPosition": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]},],
                "ariaLabel": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"], args: ['aria-label',]},],
                "ariaLabelledby": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"],
                    args: ['aria-labelledby',]
                },],
                "required": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]},],
                "checked": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Input"]},],
                "change": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["Output"]},],
                "_inputElement": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"], args: ['input',]},],
                "_ripple": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["ViewChild"],
                    args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_6__["MatRipple"],]
                },],
            };
            return MatSlideToggle;
        }(_MatSlideToggleMixinBase));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatSlideToggleModule = /** @class */ (function () {
            function MatSlideToggleModule() {
            }

            MatSlideToggleModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_4__["NgModule"], args: [{
                        imports: [_angular_material_core__WEBPACK_IMPORTED_MODULE_6__["MatRippleModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_6__["MatCommonModule"], _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_7__["ObserversModule"]],
                        exports: [MatSlideToggle, _angular_material_core__WEBPACK_IMPORTED_MODULE_6__["MatCommonModule"]],
                        declarations: [MatSlideToggle],
                        providers: [
                            {
                                provide: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__["HAMMER_GESTURE_CONFIG"],
                                useClass: _angular_material_core__WEBPACK_IMPORTED_MODULE_6__["GestureConfig"]
                            }
                        ],
                    },]
                },
            ];
            return MatSlideToggleModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=slide-toggle.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/slider.es5.js":
    /*!***********************************************************!*\
  !*** ./node_modules/@angular/material/esm5/slider.es5.js ***!
  \***********************************************************/
    /*! exports provided: MatSliderModule, MAT_SLIDER_VALUE_ACCESSOR, MatSliderChange, MatSliderBase, _MatSliderMixinBase, MatSlider */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSliderModule", function () {
            return MatSliderModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_SLIDER_VALUE_ACCESSOR", function () {
            return MAT_SLIDER_VALUE_ACCESSOR;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSliderChange", function () {
            return MatSliderChange;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSliderBase", function () {
            return MatSliderBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MatSliderMixinBase", function () {
            return _MatSliderMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSlider", function () {
            return MatSlider;
        });
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm5/keycodes.es5.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Visually, a 30px separation between tick marks looks best. This is very subjective but it is
         * the default separation we chose.
         */
        var /** @type {?} */ MIN_AUTO_TICK_SEPARATION = 30;
        /**
         * The thumb gap size for a disabled slider.
         */
        var /** @type {?} */ DISABLED_THUMB_GAP = 7;
        /**
         * The thumb gap size for a non-active slider at its minimum value.
         */
        var /** @type {?} */ MIN_VALUE_NONACTIVE_THUMB_GAP = 7;
        /**
         * The thumb gap size for an active slider at its minimum value.
         */
        var /** @type {?} */ MIN_VALUE_ACTIVE_THUMB_GAP = 10;
        /**
         * Provider Expression that allows mat-slider to register as a ControlValueAccessor.
         * This allows it to support [(ngModel)] and [formControl].
         */
        var /** @type {?} */ MAT_SLIDER_VALUE_ACCESSOR = {
            provide: _angular_forms__WEBPACK_IMPORTED_MODULE_6__["NG_VALUE_ACCESSOR"],
            useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_5__["forwardRef"])(function () {
                return MatSlider;
            }),
            multi: true
        };
        /**
         * A simple change event emitted by the MatSlider component.
         */
        var /**
         * A simple change event emitted by the MatSlider component.
         */
        MatSliderChange = /** @class */ (function () {
            function MatSliderChange() {
            }

            return MatSliderChange;
        }());
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatSliderBase = /** @class */ (function () {
            function MatSliderBase(_elementRef) {
                this._elementRef = _elementRef;
            }

            return MatSliderBase;
        }());
        var /** @type {?} */ _MatSliderMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_7__["mixinTabIndex"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_7__["mixinColor"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_7__["mixinDisabled"])(MatSliderBase), 'accent'));
        /**
         * Allows users to select from a range of values by moving the slider thumb. It is similar in
         * behavior to the native `<input type="range">` element.
         */
        var MatSlider = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatSlider, _super);

            function MatSlider(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex) {
                var _this = _super.call(this, elementRef) || this;
                _this._focusMonitor = _focusMonitor;
                _this._changeDetectorRef = _changeDetectorRef;
                _this._dir = _dir;
                _this._invert = false;
                _this._max = 100;
                _this._min = 0;
                _this._step = 1;
                _this._thumbLabel = false;
                _this._tickInterval = 0;
                _this._value = null;
                _this._vertical = false;
                /**
                 * Event emitted when the slider value has changed.
                 */
                _this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_5__["EventEmitter"]();
                /**
                 * Event emitted when the slider thumb moves.
                 */
                _this.input = new _angular_core__WEBPACK_IMPORTED_MODULE_5__["EventEmitter"]();
                /**
                 * onTouch function registered via registerOnTouch (ControlValueAccessor).
                 */
                _this.onTouched = function () {
                };
                _this._percent = 0;
                /**
                 * Whether or not the thumb is sliding.
                 * Used to determine if there should be a transition for the thumb and fill track.
                 */
                _this._isSliding = false;
                /**
                 * Whether or not the slider is active (clicked or sliding).
                 * Used to shrink and grow the thumb as according to the Material Design spec.
                 */
                _this._isActive = false;
                /**
                 * The size of a tick interval as a percentage of the size of the track.
                 */
                _this._tickIntervalPercent = 0;
                /**
                 * The dimensions of the slider.
                 */
                _this._sliderDimensions = null;
                _this._controlValueAccessorChangeFn = function () {
                };
                /**
                 * Subscription to the Directionality change EventEmitter.
                 */
                _this._dirChangeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_8__["Subscription"].EMPTY;
                _this.tabIndex = parseInt(tabIndex) || 0;
                return _this;
            }

            Object.defineProperty(MatSlider.prototype, "invert", {
                get: /**
                 * Whether the slider is inverted.
                 * @return {?}
                 */
                function () {
                    return this._invert;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._invert = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "max", {
                get: /**
                 * The maximum value that the slider can have.
                 * @return {?}
                 */
                function () {
                    return this._max;
                },
                set: /**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    this._max = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(v, this._max);
                    this._percent = this._calculatePercentage(this._value);
                    // Since this also modifies the percentage, we need to let the change detection know.
                    this._changeDetectorRef.markForCheck();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "min", {
                get: /**
                 * The minimum value that the slider can have.
                 * @return {?}
                 */
                function () {
                    return this._min;
                },
                set: /**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    this._min = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(v, this._min);
                    // If the value wasn't explicitly set by the user, set it to the min.
                    if (this._value === null) {
                        this.value = this._min;
                    }
                    this._percent = this._calculatePercentage(this._value);
                    // Since this also modifies the percentage, we need to let the change detection know.
                    this._changeDetectorRef.markForCheck();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "step", {
                get: /**
                 * The values at which the thumb will snap.
                 * @return {?}
                 */
                function () {
                    return this._step;
                },
                set: /**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    this._step = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(v, this._step);
                    if (this._step % 1 !== 0) {
                        this._roundToDecimal = /** @type {?} */ ((this._step.toString().split('.').pop())).length;
                    }
                    // Since this could modify the label, we need to notify the change detection.
                    this._changeDetectorRef.markForCheck();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "thumbLabel", {
                get: /**
                 * Whether or not to show the thumb label.
                 * @return {?}
                 */
                function () {
                    return this._thumbLabel;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._thumbLabel = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "tickInterval", {
                get: /**
                 * How often to show ticks. Relative to the step so that a tick always appears on a step.
                 * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).
                 * @return {?}
                 */
                function () {
                    return this._tickInterval;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (value === 'auto') {
                        this._tickInterval = 'auto';
                    }
                    else if (typeof value === 'number' || typeof value === 'string') {
                        this._tickInterval = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(value, /** @type {?} */ (this._tickInterval));
                    }
                    else {
                        this._tickInterval = 0;
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "value", {
                get: /**
                 * Value of the slider.
                 * @return {?}
                 */
                function () {
                    // If the value needs to be read and it is still uninitialized, initialize it to the min.
                    if (this._value === null) {
                        this.value = this._min;
                    }
                    return this._value;
                },
                set: /**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    if (v !== this._value) {
                        this._value = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceNumberProperty"])(v);
                        this._percent = this._calculatePercentage(this._value);
                        // Since this also modifies the percentage, we need to let the change detection know.
                        this._changeDetectorRef.markForCheck();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "vertical", {
                get: /**
                 * Whether the slider is vertical.
                 * @return {?}
                 */
                function () {
                    return this._vertical;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._vertical = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "displayValue", {
                /** The value to be used for display purposes. */
                get: /**
                 * The value to be used for display purposes.
                 * @return {?}
                 */
                function () {
                    if (this.displayWith) {
                        return this.displayWith(this.value);
                    }
                    // Note that this could be improved further by rounding something like 0.999 to 1 or
                    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on
                    // every change detection cycle.
                    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {
                        return this.value.toFixed(this._roundToDecimal);
                    }
                    return this.value || 0;
                },
                enumerable: true,
                configurable: true
            });
            /** set focus to the host element */
            /**
             * set focus to the host element
             * @return {?}
             */
            MatSlider.prototype.focus = /**
             * set focus to the host element
             * @return {?}
             */
            function () {
                this._focusHostElement();
            };
            /** blur the host element */
            /**
             * blur the host element
             * @return {?}
             */
            MatSlider.prototype.blur = /**
             * blur the host element
             * @return {?}
             */
            function () {
                this._blurHostElement();
            };
            Object.defineProperty(MatSlider.prototype, "percent", {
                /** The percentage of the slider that coincides with the value. */
                get: /**
                 * The percentage of the slider that coincides with the value.
                 * @return {?}
                 */
                function () {
                    return this._clamp(this._percent);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "_invertAxis", {
                /**
                 * Whether the axis of the slider is inverted.
                 * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).
                 */
                get: /**
                 * Whether the axis of the slider is inverted.
                 * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).
                 * @return {?}
                 */
                function () {
                    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to
                    // top. However from a y-axis standpoint this is inverted.
                    return this.vertical ? !this.invert : this.invert;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "_isMinValue", {
                /** Whether the slider is at its minimum value. */
                get: /**
                 * Whether the slider is at its minimum value.
                 * @return {?}
                 */
                function () {
                    return this.percent === 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "_thumbGap", {
                /**
                 * The amount of space to leave between the slider thumb and the track fill & track background
                 * elements.
                 */
                get: /**
                 * The amount of space to leave between the slider thumb and the track fill & track background
                 * elements.
                 * @return {?}
                 */
                function () {
                    if (this.disabled) {
                        return DISABLED_THUMB_GAP;
                    }
                    if (this._isMinValue && !this.thumbLabel) {
                        return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;
                    }
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "_trackBackgroundStyles", {
                /** CSS styles for the track background element. */
                get: /**
                 * CSS styles for the track background element.
                 * @return {?}
                 */
                function () {
                    var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';
                    var /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';
                    return {
                        'transform': "translate" + axis + "(" + sign + this._thumbGap + "px) scale" + axis + "(" + (1 - this.percent) + ")"
                    };
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "_trackFillStyles", {
                /** CSS styles for the track fill element. */
                get: /**
                 * CSS styles for the track fill element.
                 * @return {?}
                 */
                function () {
                    var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';
                    var /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';
                    return {
                        'transform': "translate" + axis + "(" + sign + this._thumbGap + "px) scale" + axis + "(" + this.percent + ")"
                    };
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "_ticksContainerStyles", {
                /** CSS styles for the ticks container element. */
                get: /**
                 * CSS styles for the ticks container element.
                 * @return {?}
                 */
                function () {
                    var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';
                    // For a horizontal slider in RTL languages we push the ticks container off the left edge
                    // instead of the right edge to avoid causing a horizontal scrollbar to appear.
                    var /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';
                    var /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;
                    return {
                        'transform': "translate" + axis + "(" + sign + offset + "%)"
                    };
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "_ticksStyles", {
                /** CSS styles for the ticks element. */
                get: /**
                 * CSS styles for the ticks element.
                 * @return {?}
                 */
                function () {
                    var /** @type {?} */ tickSize = this._tickIntervalPercent * 100;
                    var /** @type {?} */ backgroundSize = this.vertical ? "2px " + tickSize + "%" : tickSize + "% 2px";
                    var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';
                    // Depending on the direction we pushed the ticks container, push the ticks the opposite
                    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the
                    // ticks 180 degrees so we're really cutting off the end edge abd not the start.
                    var /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';
                    var /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';
                    var /** @type {?} */ styles = {
                        'backgroundSize': backgroundSize,
                        // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.
                        'transform': "translateZ(0) translate" + axis + "(" + sign + tickSize / 2 + "%)" + rotate
                    };
                    if (this._isMinValue && this._thumbGap) {
                        var /** @type {?} */ side = this.vertical ?
                            (this._invertAxis ? 'Bottom' : 'Top') :
                            (this._invertAxis ? 'Right' : 'Left');
                        styles["padding" + side] = this._thumbGap + "px";
                    }
                    return styles;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "_thumbContainerStyles", {
                get: /**
                 * @return {?}
                 */
                function () {
                    var /** @type {?} */ axis = this.vertical ? 'Y' : 'X';
                    // For a horizontal slider in RTL languages we push the thumb container off the left edge
                    // instead of the right edge to avoid causing a horizontal scrollbar to appear.
                    var /** @type {?} */ invertOffset = (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;
                    var /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;
                    return {
                        'transform': "translate" + axis + "(-" + offset + "%)"
                    };
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "_invertMouseCoords", {
                get: /**
                 * Whether mouse events should be converted to a slider position by calculating their distance
                 * from the right or bottom edge of the slider as opposed to the top or left.
                 * @return {?}
                 */
                function () {
                    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSlider.prototype, "_direction", {
                get: /**
                 * The language direction for this slider element.
                 * @return {?}
                 */
                function () {
                    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatSlider.prototype.ngOnInit = /**
             * @return {?}
             */
            function () {
                var _this = this;
                this._focusMonitor
                    .monitor(this._elementRef.nativeElement, true)
                    .subscribe(function (origin) {
                        _this._isActive = !!origin && origin !== 'keyboard';
                        _this._changeDetectorRef.detectChanges();
                    });
                if (this._dir) {
                    this._dirChangeSubscription = this._dir.change.subscribe(function () {
                        _this._changeDetectorRef.markForCheck();
                    });
                }
            };
            /**
             * @return {?}
             */
            MatSlider.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);
                this._dirChangeSubscription.unsubscribe();
            };
            /**
             * @return {?}
             */
            MatSlider.prototype._onMouseenter = /**
             * @return {?}
             */
            function () {
                if (this.disabled) {
                    return;
                }
                // We save the dimensions of the slider here so we can use them to update the spacing of the
                // ticks and determine where on the slider click and slide events happen.
                this._sliderDimensions = this._getSliderDimensions();
                this._updateTickIntervalPercent();
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatSlider.prototype._onClick = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (this.disabled) {
                    return;
                }
                var /** @type {?} */ oldValue = this.value;
                this._isSliding = false;
                this._focusHostElement();
                this._updateValueFromPosition({x: event.clientX, y: event.clientY});
                // Emit a change and input event if the value changed.
                if (oldValue != this.value) {
                    this._emitInputEvent();
                    this._emitChangeEvent();
                }
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatSlider.prototype._onSlide = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (this.disabled) {
                    return;
                }
                // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding
                // state, call the slide start handler manually.
                if (!this._isSliding) {
                    this._onSlideStart(null);
                }
                // Prevent the slide from selecting anything else.
                event.preventDefault();
                var /** @type {?} */ oldValue = this.value;
                this._updateValueFromPosition({x: event.center.x, y: event.center.y});
                // Native range elements always emit `input` events when the value changed while sliding.
                if (oldValue != this.value) {
                    this._emitInputEvent();
                }
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatSlider.prototype._onSlideStart = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (this.disabled || this._isSliding) {
                    return;
                }
                // Simulate mouseenter in case this is a mobile device.
                this._onMouseenter();
                this._isSliding = true;
                this._focusHostElement();
                this._valueOnSlideStart = this.value;
                if (event) {
                    this._updateValueFromPosition({x: event.center.x, y: event.center.y});
                    event.preventDefault();
                }
            };
            /**
             * @return {?}
             */
            MatSlider.prototype._onSlideEnd = /**
             * @return {?}
             */
            function () {
                this._isSliding = false;
                if (this._valueOnSlideStart != this.value && !this.disabled) {
                    this._emitChangeEvent();
                }
                this._valueOnSlideStart = null;
            };
            /**
             * @return {?}
             */
            MatSlider.prototype._onFocus = /**
             * @return {?}
             */
            function () {
                // We save the dimensions of the slider here so we can use them to update the spacing of the
                // ticks and determine where on the slider click and slide events happen.
                this._sliderDimensions = this._getSliderDimensions();
                this._updateTickIntervalPercent();
            };
            /**
             * @return {?}
             */
            MatSlider.prototype._onBlur = /**
             * @return {?}
             */
            function () {
                this.onTouched();
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatSlider.prototype._onKeydown = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (this.disabled) {
                    return;
                }
                var /** @type {?} */ oldValue = this.value;
                switch (event.keyCode) {
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["PAGE_UP"]:
                        this._increment(10);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["PAGE_DOWN"]:
                        this._increment(-10);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["END"]:
                        this.value = this.max;
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["HOME"]:
                        this.value = this.min;
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["LEFT_ARROW"]:
                        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an
                        // inverted slider the thumb moves in that direction. However for a blind user, nothing
                        // about the slider indicates that it is inverted. They will expect left to be decrement,
                        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably
                        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for
                        // RTL. For inverted sliders we prefer a good a11y experience to having it "look right" for
                        // sighted users, therefore we do not swap the meaning.
                        this._increment(this._direction == 'rtl' ? 1 : -1);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["UP_ARROW"]:
                        this._increment(1);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["RIGHT_ARROW"]:
                        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.
                        this._increment(this._direction == 'rtl' ? -1 : 1);
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__["DOWN_ARROW"]:
                        this._increment(-1);
                        break;
                    default:
                        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on
                        // it.
                        return;
                }
                if (oldValue != this.value) {
                    this._emitInputEvent();
                    this._emitChangeEvent();
                }
                this._isSliding = true;
                event.preventDefault();
            };
            /**
             * @return {?}
             */
            MatSlider.prototype._onKeyup = /**
             * @return {?}
             */
            function () {
                this._isSliding = false;
            };
            /**
             * Increments the slider by the given number of steps (negative number decrements).
             * @param {?} numSteps
             * @return {?}
             */
            MatSlider.prototype._increment = /**
             * Increments the slider by the given number of steps (negative number decrements).
             * @param {?} numSteps
             * @return {?}
             */
            function (numSteps) {
                this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);
            };
            /**
             * Calculate the new value from the new physical location. The value will always be snapped.
             * @param {?} pos
             * @return {?}
             */
            MatSlider.prototype._updateValueFromPosition = /**
             * Calculate the new value from the new physical location. The value will always be snapped.
             * @param {?} pos
             * @return {?}
             */
            function (pos) {
                if (!this._sliderDimensions) {
                    return;
                }
                var /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;
                var /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;
                var /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;
                // The exact value is calculated from the event and used to find the closest snap value.
                var /** @type {?} */ percent = this._clamp((posComponent - offset) / size);
                if (this._invertMouseCoords) {
                    percent = 1 - percent;
                }
                // Since the steps may not divide cleanly into the max value, if the user
                // slid to 0 or 100 percent, we jump to the min/max value. This approach
                // is slightly more intuitive than using `Math.ceil` below, because it
                // follows the user's pointer closer.
                if (percent === 0) {
                    this.value = this.min;
                }
                else if (percent === 1) {
                    this.value = this.max;
                }
                else {
                    var /** @type {?} */ exactValue = this._calculateValue(percent);
                    // This calculation finds the closest step by finding the closest
                    // whole number divisible by the step relative to the min.
                    var /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;
                    // If we've got a step with a decimal, we may end up with something like 33.300000000000004.
                    // Truncate the value to ensure that it matches the label and to make it easier to work with.
                    if (this._roundToDecimal) {
                        closestValue = parseFloat(closestValue.toFixed(this._roundToDecimal));
                    }
                    // The value needs to snap to the min and max.
                    this.value = this._clamp(closestValue, this.min, this.max);
                }
            };
            /**
             * Emits a change event if the current value is different from the last emitted value.
             * @return {?}
             */
            MatSlider.prototype._emitChangeEvent = /**
             * Emits a change event if the current value is different from the last emitted value.
             * @return {?}
             */
            function () {
                this._controlValueAccessorChangeFn(this.value);
                this.change.emit(this._createChangeEvent());
            };
            /**
             * Emits an input event when the current value is different from the last emitted value.
             * @return {?}
             */
            MatSlider.prototype._emitInputEvent = /**
             * Emits an input event when the current value is different from the last emitted value.
             * @return {?}
             */
            function () {
                this.input.emit(this._createChangeEvent());
            };
            /**
             * Updates the amount of space between ticks as a percentage of the width of the slider.
             * @return {?}
             */
            MatSlider.prototype._updateTickIntervalPercent = /**
             * Updates the amount of space between ticks as a percentage of the width of the slider.
             * @return {?}
             */
            function () {
                if (!this.tickInterval || !this._sliderDimensions) {
                    return;
                }
                if (this.tickInterval == 'auto') {
                    var /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;
                    var /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);
                    var /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);
                    var /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;
                    this._tickIntervalPercent = pixelsPerTick / trackSize;
                }
                else {
                    this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);
                }
            };
            /**
             * Creates a slider change object from the specified value.
             * @param {?=} value
             * @return {?}
             */
            MatSlider.prototype._createChangeEvent = /**
             * Creates a slider change object from the specified value.
             * @param {?=} value
             * @return {?}
             */
            function (value) {
                if (value === void 0) {
                    value = this.value;
                }
                var /** @type {?} */ event = new MatSliderChange();
                event.source = this;
                event.value = value;
                return event;
            };
            /**
             * Calculates the percentage of the slider that a value is.
             * @param {?} value
             * @return {?}
             */
            MatSlider.prototype._calculatePercentage = /**
             * Calculates the percentage of the slider that a value is.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                return ((value || 0) - this.min) / (this.max - this.min);
            };
            /**
             * Calculates the value a percentage of the slider corresponds to.
             * @param {?} percentage
             * @return {?}
             */
            MatSlider.prototype._calculateValue = /**
             * Calculates the value a percentage of the slider corresponds to.
             * @param {?} percentage
             * @return {?}
             */
            function (percentage) {
                return this.min + percentage * (this.max - this.min);
            };
            /**
             * Return a number between two numbers.
             * @param {?} value
             * @param {?=} min
             * @param {?=} max
             * @return {?}
             */
            MatSlider.prototype._clamp = /**
             * Return a number between two numbers.
             * @param {?} value
             * @param {?=} min
             * @param {?=} max
             * @return {?}
             */
            function (value, min, max) {
                if (min === void 0) {
                    min = 0;
                }
                if (max === void 0) {
                    max = 1;
                }
                return Math.max(min, Math.min(value, max));
            };
            /**
             * Get the bounding client rect of the slider track element.
             * The track is used rather than the native element to ignore the extra space that the thumb can
             * take up.
             * @return {?}
             */
            MatSlider.prototype._getSliderDimensions = /**
             * Get the bounding client rect of the slider track element.
             * The track is used rather than the native element to ignore the extra space that the thumb can
             * take up.
             * @return {?}
             */
            function () {
                return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;
            };
            /**
             * Focuses the native element.
             * Currently only used to allow a blur event to fire but will be used with keyboard input later.
             * @return {?}
             */
            MatSlider.prototype._focusHostElement = /**
             * Focuses the native element.
             * Currently only used to allow a blur event to fire but will be used with keyboard input later.
             * @return {?}
             */
            function () {
                this._elementRef.nativeElement.focus();
            };
            /**
             * Blurs the native element.
             * @return {?}
             */
            MatSlider.prototype._blurHostElement = /**
             * Blurs the native element.
             * @return {?}
             */
            function () {
                this._elementRef.nativeElement.blur();
            };
            /**
             * Sets the model value. Implemented as part of ControlValueAccessor.
             * @param value
             */
            /**
             * Sets the model value. Implemented as part of ControlValueAccessor.
             * @param {?} value
             * @return {?}
             */
            MatSlider.prototype.writeValue = /**
             * Sets the model value. Implemented as part of ControlValueAccessor.
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.value = value;
            };
            /**
             * Registers a callback to eb triggered when the value has changed.
             * Implemented as part of ControlValueAccessor.
             * @param fn Callback to be registered.
             */
            /**
             * Registers a callback to eb triggered when the value has changed.
             * Implemented as part of ControlValueAccessor.
             * @param {?} fn Callback to be registered.
             * @return {?}
             */
            MatSlider.prototype.registerOnChange = /**
             * Registers a callback to eb triggered when the value has changed.
             * Implemented as part of ControlValueAccessor.
             * @param {?} fn Callback to be registered.
             * @return {?}
             */
            function (fn) {
                this._controlValueAccessorChangeFn = fn;
            };
            /**
             * Registers a callback to be triggered when the component is touched.
             * Implemented as part of ControlValueAccessor.
             * @param fn Callback to be registered.
             */
            /**
             * Registers a callback to be triggered when the component is touched.
             * Implemented as part of ControlValueAccessor.
             * @param {?} fn Callback to be registered.
             * @return {?}
             */
            MatSlider.prototype.registerOnTouched = /**
             * Registers a callback to be triggered when the component is touched.
             * Implemented as part of ControlValueAccessor.
             * @param {?} fn Callback to be registered.
             * @return {?}
             */
            function (fn) {
                this.onTouched = fn;
            };
            /**
             * Sets whether the component should be disabled.
             * Implemented as part of ControlValueAccessor.
             * @param isDisabled
             */
            /**
             * Sets whether the component should be disabled.
             * Implemented as part of ControlValueAccessor.
             * @param {?} isDisabled
             * @return {?}
             */
            MatSlider.prototype.setDisabledState = /**
             * Sets whether the component should be disabled.
             * Implemented as part of ControlValueAccessor.
             * @param {?} isDisabled
             * @return {?}
             */
            function (isDisabled) {
                this.disabled = isDisabled;
            };
            MatSlider.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Component"], args: [{
                        selector: 'mat-slider',
                        exportAs: 'matSlider',
                        providers: [MAT_SLIDER_VALUE_ACCESSOR],
                        host: {
                            '(focus)': '_onFocus()',
                            '(blur)': '_onBlur()',
                            '(click)': '_onClick($event)',
                            '(keydown)': '_onKeydown($event)',
                            '(keyup)': '_onKeyup()',
                            '(mouseenter)': '_onMouseenter()',
                            '(slide)': '_onSlide($event)',
                            '(slideend)': '_onSlideEnd()',
                            '(slidestart)': '_onSlideStart($event)',
                            'class': 'mat-slider',
                            'role': 'slider',
                            '[tabIndex]': 'tabIndex',
                            '[attr.aria-disabled]': 'disabled',
                            '[attr.aria-valuemax]': 'max',
                            '[attr.aria-valuemin]': 'min',
                            '[attr.aria-valuenow]': 'value',
                            '[attr.aria-orientation]': 'vertical ? "vertical" : "horizontal"',
                            '[class.mat-slider-disabled]': 'disabled',
                            '[class.mat-slider-has-ticks]': 'tickInterval',
                            '[class.mat-slider-horizontal]': '!vertical',
                            '[class.mat-slider-axis-inverted]': '_invertAxis',
                            '[class.mat-slider-sliding]': '_isSliding',
                            '[class.mat-slider-thumb-label-showing]': 'thumbLabel',
                            '[class.mat-slider-vertical]': 'vertical',
                            '[class.mat-slider-min-value]': '_isMinValue',
                            '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',
                        },
                        template: "<div class=\"mat-slider-wrapper\" #sliderWrapper><div class=\"mat-slider-track-wrapper\"><div class=\"mat-slider-track-background\" [ngStyle]=\"_trackBackgroundStyles\"></div><div class=\"mat-slider-track-fill\" [ngStyle]=\"_trackFillStyles\"></div></div><div class=\"mat-slider-ticks-container\" [ngStyle]=\"_ticksContainerStyles\"><div class=\"mat-slider-ticks\" [ngStyle]=\"_ticksStyles\"></div></div><div class=\"mat-slider-thumb-container\" [ngStyle]=\"_thumbContainerStyles\"><div class=\"mat-slider-focus-ring\"></div><div class=\"mat-slider-thumb\"></div><div class=\"mat-slider-thumb-label\"><span class=\"mat-slider-thumb-label-text\">{{displayValue}}</span></div></div></div>",
                        styles: [".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:0;vertical-align:middle}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),opacity .4s cubic-bezier(.25,.8,.25,1)}.cdk-keyboard-focused .mat-slider-focus-ring,.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb-label{cursor:-webkit-grab;cursor:grab}.mat-slider-sliding:not(.mat-slider-disabled) .mat-slider-thumb,.mat-slider-sliding:not(.mat-slider-disabled) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb-label:active,.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb:active{cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(.7);transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),border-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform .4s cubic-bezier(.25,.8,.25,1),border-radius .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-sliding .mat-slider-thumb-container,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-track-fill{transition-duration:0s}.mat-slider-has-ticks .mat-slider-wrapper::after{content:'';position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}@media screen and (-ms-high-contrast:active){.mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}@media screen and (-ms-high-contrast:active){.mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}"],
                        inputs: ['disabled', 'color', 'tabIndex'],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ChangeDetectionStrategy"].OnPush,
                    },]
                },
            ];
            /** @nocollapse */
            MatSlider.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ElementRef"],},
                    {type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__["FocusMonitor"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ChangeDetectorRef"],},
                    {
                        type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Optional"]},]
                    },
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Attribute"],
                            args: ['tabindex',]
                        },]
                    },
                ];
            };
            MatSlider.propDecorators = {
                "invert": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"]},],
                "max": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"]},],
                "min": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"]},],
                "step": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"]},],
                "thumbLabel": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"]},],
                "tickInterval": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"]},],
                "value": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"]},],
                "displayWith": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"]},],
                "vertical": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Input"]},],
                "change": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Output"]},],
                "input": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["Output"]},],
                "_sliderWrapper": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["ViewChild"],
                    args: ['sliderWrapper',]
                },],
            };
            return MatSlider;
        }(_MatSliderMixinBase));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatSliderModule = /** @class */ (function () {
            function MatSliderModule() {
            }

            MatSliderModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_5__["NgModule"], args: [{
                        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_9__["CommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["MatCommonModule"]],
                        exports: [MatSlider, _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["MatCommonModule"]],
                        declarations: [MatSlider],
                        providers: [{
                            provide: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_10__["HAMMER_GESTURE_CONFIG"],
                            useClass: _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["GestureConfig"]
                        }]
                    },]
                },
            ];
            return MatSliderModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=slider.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/snack-bar.es5.js":
    /*!**************************************************************!*\
  !*** ./node_modules/@angular/material/esm5/snack-bar.es5.js ***!
  \**************************************************************/
    /*! exports provided: MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSnackBarModule", function () {
            return MatSnackBarModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_SNACK_BAR_DEFAULT_OPTIONS", function () {
            return MAT_SNACK_BAR_DEFAULT_OPTIONS;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY", function () {
            return MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSnackBar", function () {
            return MatSnackBar;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSnackBarContainer", function () {
            return MatSnackBarContainer;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_SNACK_BAR_DATA", function () {
            return MAT_SNACK_BAR_DATA;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSnackBarConfig", function () {
            return MatSnackBarConfig;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSnackBarRef", function () {
            return MatSnackBarRef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SimpleSnackBar", function () {
            return SimpleSnackBar;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "matSnackBarAnimations", function () {
            return matSnackBarAnimations;
        });
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_animations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm5/animations.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm5/portal.es5.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/layout */ "./node_modules/@angular/cdk/esm5/layout.es5.js");
        /* harmony import */
        var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_material_button__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm5/button.es5.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Reference to a snack bar dispatched from the snack bar service.
         * @template T
         */
        var /**
         * Reference to a snack bar dispatched from the snack bar service.
         * @template T
         */
        MatSnackBarRef = /** @class */ (function () {
            function MatSnackBarRef(containerInstance, _overlayRef) {
                var _this = this;
                this._overlayRef = _overlayRef;
                /**
                 * Subject for notifying the user that the snack bar has been dismissed.
                 */
                this._afterDismissed = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
                /**
                 * Subject for notifying the user that the snack bar has opened and appeared.
                 */
                this._afterOpened = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
                /**
                 * Subject for notifying the user that the snack bar action was called.
                 */
                this._onAction = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
                /**
                 * Whether the snack bar was dismissed using the action button.
                 */
                this._dismissedByAction = false;
                this.containerInstance = containerInstance;
                // Dismiss snackbar on action.
                this.onAction().subscribe(function () {
                    return _this.dismiss();
                });
                containerInstance._onExit.subscribe(function () {
                    return _this._finishDismiss();
                });
            }

            /** Dismisses the snack bar. */
            /**
             * Dismisses the snack bar.
             * @return {?}
             */
            MatSnackBarRef.prototype.dismiss = /**
             * Dismisses the snack bar.
             * @return {?}
             */
            function () {
                if (!this._afterDismissed.closed) {
                    this.containerInstance.exit();
                }
                clearTimeout(this._durationTimeoutId);
            };
            /** Marks the snackbar action clicked. */
            /**
             * Marks the snackbar action clicked.
             * @return {?}
             */
            MatSnackBarRef.prototype.dismissWithAction = /**
             * Marks the snackbar action clicked.
             * @return {?}
             */
            function () {
                if (!this._onAction.closed) {
                    this._dismissedByAction = true;
                    this._onAction.next();
                    this._onAction.complete();
                }
            };
            /**
             * Marks the snackbar action clicked.
             * @deprecated Use `dismissWithAction` instead.
             * @deletion-target 7.0.0
             */
            /**
             * Marks the snackbar action clicked.
             * @deprecated Use `dismissWithAction` instead.
             * \@deletion-target 7.0.0
             * @return {?}
             */
            MatSnackBarRef.prototype.closeWithAction = /**
             * Marks the snackbar action clicked.
             * @deprecated Use `dismissWithAction` instead.
             * \@deletion-target 7.0.0
             * @return {?}
             */
            function () {
                this.dismissWithAction();
            };
            /** Dismisses the snack bar after some duration */
            /**
             * Dismisses the snack bar after some duration
             * @param {?} duration
             * @return {?}
             */
            MatSnackBarRef.prototype._dismissAfter = /**
             * Dismisses the snack bar after some duration
             * @param {?} duration
             * @return {?}
             */
            function (duration) {
                var _this = this;
                this._durationTimeoutId = setTimeout(function () {
                    return _this.dismiss();
                }, duration);
            };
            /** Marks the snackbar as opened */
            /**
             * Marks the snackbar as opened
             * @return {?}
             */
            MatSnackBarRef.prototype._open = /**
             * Marks the snackbar as opened
             * @return {?}
             */
            function () {
                if (!this._afterOpened.closed) {
                    this._afterOpened.next();
                    this._afterOpened.complete();
                }
            };
            /**
             * Cleans up the DOM after closing.
             * @return {?}
             */
            MatSnackBarRef.prototype._finishDismiss = /**
             * Cleans up the DOM after closing.
             * @return {?}
             */
            function () {
                this._overlayRef.dispose();
                if (!this._onAction.closed) {
                    this._onAction.complete();
                }
                this._afterDismissed.next({dismissedByAction: this._dismissedByAction});
                this._afterDismissed.complete();
                this._dismissedByAction = false;
            };
            /** Gets an observable that is notified when the snack bar is finished closing. */
            /**
             * Gets an observable that is notified when the snack bar is finished closing.
             * @return {?}
             */
            MatSnackBarRef.prototype.afterDismissed = /**
             * Gets an observable that is notified when the snack bar is finished closing.
             * @return {?}
             */
            function () {
                return this._afterDismissed.asObservable();
            };
            /** Gets an observable that is notified when the snack bar has opened and appeared. */
            /**
             * Gets an observable that is notified when the snack bar has opened and appeared.
             * @return {?}
             */
            MatSnackBarRef.prototype.afterOpened = /**
             * Gets an observable that is notified when the snack bar has opened and appeared.
             * @return {?}
             */
            function () {
                return this.containerInstance._onEnter;
            };
            /** Gets an observable that is notified when the snack bar action is called. */
            /**
             * Gets an observable that is notified when the snack bar action is called.
             * @return {?}
             */
            MatSnackBarRef.prototype.onAction = /**
             * Gets an observable that is notified when the snack bar action is called.
             * @return {?}
             */
            function () {
                return this._onAction.asObservable();
            };
            return MatSnackBarRef;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Injection token that can be used to access the data that was passed in to a snack bar.
         */
        var /** @type {?} */ MAT_SNACK_BAR_DATA = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('MatSnackBarData');
        /**
         * Configuration used when opening a snack-bar.
         * @template D
         */
        var /**
         * Configuration used when opening a snack-bar.
         * @template D
         */
        MatSnackBarConfig = /** @class */ (function () {
            function MatSnackBarConfig() {
                /**
                 * The politeness level for the MatAriaLiveAnnouncer announcement.
                 */
                this.politeness = 'assertive';
                /**
                 * Message to be announced by the MatAriaLiveAnnouncer
                 */
                this.announcementMessage = '';
                /**
                 * The length of time in milliseconds to wait before automatically dismissing the snack bar.
                 */
                this.duration = 0;
                /**
                 * Data being injected into the child component.
                 */
                this.data = null;
                /**
                 * The horizontal position to place the snack bar.
                 */
                this.horizontalPosition = 'center';
                /**
                 * The vertical position to place the snack bar.
                 */
                this.verticalPosition = 'bottom';
            }

            return MatSnackBarConfig;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Animations used by the Material snack bar.
         */
        var /** @type {?} */ matSnackBarAnimations = {
            /** Animation that slides the dialog in and out of view and fades the opacity. */
            contentFade: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["trigger"])('contentFade', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["transition"])(':enter', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["style"])({opacity: '0'}),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["animate"])(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["AnimationDurations"].COMPLEX + " " + _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["AnimationCurves"].STANDARD_CURVE)
                ])
            ]),
            /** Animation that shows and hides a snack bar. */
            snackBarState: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["trigger"])('state', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["state"])('visible-top, visible-bottom', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["style"])({transform: 'translateY(0%)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["transition"])('visible-top => hidden-top, visible-bottom => hidden-bottom', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["animate"])(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["AnimationDurations"].EXITING + " " + _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["AnimationCurves"].ACCELERATION_CURVE)),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["transition"])('void => visible-top, void => visible-bottom', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["animate"])(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["AnimationDurations"].ENTERING + " " + _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["AnimationCurves"].DECELERATION_CURVE)),
            ])
        };

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * A component used to open as the default snack bar, matching material spec.
         * This should only be used internally by the snack bar service.
         */
        var SimpleSnackBar = /** @class */ (function () {
            function SimpleSnackBar(snackBarRef, data) {
                this.snackBarRef = snackBarRef;
                this.data = data;
            }

            /** Performs the action on the snack bar. */
            /**
             * Performs the action on the snack bar.
             * @return {?}
             */
            SimpleSnackBar.prototype.action = /**
             * Performs the action on the snack bar.
             * @return {?}
             */
            function () {
                this.snackBarRef.dismissWithAction();
            };
            Object.defineProperty(SimpleSnackBar.prototype, "hasAction", {
                /** If the action button should be shown. */
                get: /**
                 * If the action button should be shown.
                 * @return {?}
                 */
                function () {
                    return !!this.data.action;
                },
                enumerable: true,
                configurable: true
            });
            SimpleSnackBar.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'simple-snack-bar',
                        template: "{{data.message}}<div class=\"mat-simple-snackbar-action\" *ngIf=\"hasAction\"><button mat-button (click)=\"action()\">{{data.action}}</button></div>",
                        styles: [".mat-simple-snackbar{display:flex;justify-content:space-between;line-height:20px;opacity:1}.mat-simple-snackbar-action{display:flex;flex-direction:column;flex-shrink:0;justify-content:space-around;margin:-8px 0 -8px 8px}.mat-simple-snackbar-action button{flex:1;max-height:36px}[dir=rtl] .mat-simple-snackbar-action{margin-left:0;margin-right:8px}"],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        animations: [matSnackBarAnimations.contentFade],
                        host: {
                            '[@contentFade]': '',
                            'class': 'mat-simple-snackbar',
                        }
                    },]
                },
            ];
            /** @nocollapse */
            SimpleSnackBar.ctorParameters = function () {
                return [
                    {type: MatSnackBarRef,},
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                            args: [MAT_SNACK_BAR_DATA,]
                        },]
                    },
                ];
            };
            return SimpleSnackBar;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Internal component that wraps user-provided snack bar content.
         * \@docs-private
         */
        var MatSnackBarContainer = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_4__["__extends"])(MatSnackBarContainer, _super);

            function MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {
                var _this = _super.call(this) || this;
                _this._ngZone = _ngZone;
                _this._elementRef = _elementRef;
                _this._changeDetectorRef = _changeDetectorRef;
                _this.snackBarConfig = snackBarConfig;
                /**
                 * Whether the component has been destroyed.
                 */
                _this._destroyed = false;
                /**
                 * Subject for notifying that the snack bar has exited from view.
                 */
                _this._onExit = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
                /**
                 * Subject for notifying that the snack bar has finished entering the view.
                 */
                _this._onEnter = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
                /**
                 * The state of the snack bar animations.
                 */
                _this._animationState = 'void';
                return _this;
            }

            /** Attach a component portal as content to this snack bar container. */
            /**
             * Attach a component portal as content to this snack bar container.
             * @template T
             * @param {?} portal
             * @return {?}
             */
            MatSnackBarContainer.prototype.attachComponentPortal = /**
             * Attach a component portal as content to this snack bar container.
             * @template T
             * @param {?} portal
             * @return {?}
             */
            function (portal) {
                this._assertNotAttached();
                this._applySnackBarClasses();
                return this._portalOutlet.attachComponentPortal(portal);
            };
            /** Attach a template portal as content to this snack bar container. */
            /**
             * Attach a template portal as content to this snack bar container.
             * @template C
             * @param {?} portal
             * @return {?}
             */
            MatSnackBarContainer.prototype.attachTemplatePortal = /**
             * Attach a template portal as content to this snack bar container.
             * @template C
             * @param {?} portal
             * @return {?}
             */
            function (portal) {
                this._assertNotAttached();
                this._applySnackBarClasses();
                return this._portalOutlet.attachTemplatePortal(portal);
            };
            /** Handle end of animations, updating the state of the snackbar. */
            /**
             * Handle end of animations, updating the state of the snackbar.
             * @param {?} event
             * @return {?}
             */
            MatSnackBarContainer.prototype.onAnimationEnd = /**
             * Handle end of animations, updating the state of the snackbar.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                var fromState = event.fromState, toState = event.toState;
                if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {
                    this._completeExit();
                }
                if (toState.startsWith('visible')) {
                    // Note: we shouldn't use `this` inside the zone callback,
                    // because it can cause a memory leak.
                    var /** @type {?} */ onEnter_1 = this._onEnter;
                    this._ngZone.run(function () {
                        onEnter_1.next();
                        onEnter_1.complete();
                    });
                }
            };
            /** Begin animation of snack bar entrance into view. */
            /**
             * Begin animation of snack bar entrance into view.
             * @return {?}
             */
            MatSnackBarContainer.prototype.enter = /**
             * Begin animation of snack bar entrance into view.
             * @return {?}
             */
            function () {
                if (!this._destroyed) {
                    this._animationState = "visible-" + this.snackBarConfig.verticalPosition;
                    this._changeDetectorRef.detectChanges();
                }
            };
            /** Begin animation of the snack bar exiting from view. */
            /**
             * Begin animation of the snack bar exiting from view.
             * @return {?}
             */
            MatSnackBarContainer.prototype.exit = /**
             * Begin animation of the snack bar exiting from view.
             * @return {?}
             */
            function () {
                this._animationState = "hidden-" + this.snackBarConfig.verticalPosition;
                return this._onExit;
            };
            /** Makes sure the exit callbacks have been invoked when the element is destroyed. */
            /**
             * Makes sure the exit callbacks have been invoked when the element is destroyed.
             * @return {?}
             */
            MatSnackBarContainer.prototype.ngOnDestroy = /**
             * Makes sure the exit callbacks have been invoked when the element is destroyed.
             * @return {?}
             */
            function () {
                this._destroyed = true;
                this._completeExit();
            };
            /**
             * Waits for the zone to settle before removing the element. Helps prevent
             * errors where we end up removing an element which is in the middle of an animation.
             * @return {?}
             */
            MatSnackBarContainer.prototype._completeExit = /**
             * Waits for the zone to settle before removing the element. Helps prevent
             * errors where we end up removing an element which is in the middle of an animation.
             * @return {?}
             */
            function () {
                var _this = this;
                this._ngZone.onMicrotaskEmpty.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["take"])(1)).subscribe(function () {
                    _this._onExit.next();
                    _this._onExit.complete();
                });
            };
            /**
             * Applies the various positioning and user-configured CSS classes to the snack bar.
             * @return {?}
             */
            MatSnackBarContainer.prototype._applySnackBarClasses = /**
             * Applies the various positioning and user-configured CSS classes to the snack bar.
             * @return {?}
             */
            function () {
                var /** @type {?} */ element = this._elementRef.nativeElement;
                var /** @type {?} */ panelClasses = this.snackBarConfig.panelClass;
                if (panelClasses) {
                    if (Array.isArray(panelClasses)) {
                        // Note that we can't use a spread here, because IE doesn't support multiple arguments.
                        panelClasses.forEach(function (cssClass) {
                            return element.classList.add(cssClass);
                        });
                    }
                    else {
                        element.classList.add(panelClasses);
                    }
                }
                if (this.snackBarConfig.horizontalPosition === 'center') {
                    element.classList.add('mat-snack-bar-center');
                }
                if (this.snackBarConfig.verticalPosition === 'top') {
                    element.classList.add('mat-snack-bar-top');
                }
            };
            /**
             * Asserts that no content is already attached to the container.
             * @return {?}
             */
            MatSnackBarContainer.prototype._assertNotAttached = /**
             * Asserts that no content is already attached to the container.
             * @return {?}
             */
            function () {
                if (this._portalOutlet.hasAttached()) {
                    throw Error('Attempting to attach snack bar content after content is already attached');
                }
            };
            MatSnackBarContainer.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'snack-bar-container',
                        template: "<ng-template cdkPortalOutlet></ng-template>",
                        styles: [".mat-snack-bar-container{border-radius:2px;box-sizing:border-box;display:block;margin:24px;max-width:568px;min-width:288px;padding:14px 24px;transform:translateY(100%) translateY(24px)}.mat-snack-bar-container.mat-snack-bar-center{margin:0;transform:translateY(100%)}.mat-snack-bar-container.mat-snack-bar-top{transform:translateY(-100%) translateY(-24px)}.mat-snack-bar-container.mat-snack-bar-top.mat-snack-bar-center{transform:translateY(-100%)}@media screen and (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:0;max-width:inherit;width:100%}"],
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        animations: [matSnackBarAnimations.snackBarState],
                        host: {
                            'role': 'alert',
                            'class': 'mat-snack-bar-container',
                            '[@state]': '_animationState',
                            '(@state.done)': 'onAnimationEnd($event)'
                        },
                    },]
                },
            ];
            /** @nocollapse */
            MatSnackBarContainer.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],},
                    {type: MatSnackBarConfig,},
                ];
            };
            MatSnackBarContainer.propDecorators = {
                "_portalOutlet": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"],
                    args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["CdkPortalOutlet"],]
                },],
            };
            return MatSnackBarContainer;
        }(_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["BasePortalOutlet"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Injection token that can be used to specify default snack bar.
         */
        var /** @type {?} */ MAT_SNACK_BAR_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('mat-snack-bar-default-options', {
            providedIn: 'root',
            factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,
        });

        /**
         * \@docs-private
         * @return {?}
         */
        function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {
            return new MatSnackBarConfig();
        }

        /**
         * Service to dispatch Material Design snack bar messages.
         */
        var MatSnackBar = /** @class */ (function () {
            function MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {
                this._overlay = _overlay;
                this._live = _live;
                this._injector = _injector;
                this._breakpointObserver = _breakpointObserver;
                this._parentSnackBar = _parentSnackBar;
                this._defaultConfig = _defaultConfig;
                /**
                 * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).
                 * If there is a parent snack-bar service, all operations should delegate to that parent
                 * via `_openedSnackBarRef`.
                 */
                this._snackBarRefAtThisLevel = null;
            }

            Object.defineProperty(MatSnackBar.prototype, "_openedSnackBarRef", {
                /** Reference to the currently opened snackbar at *any* level. */
                get: /**
                 * Reference to the currently opened snackbar at *any* level.
                 * @return {?}
                 */
                function () {
                    var /** @type {?} */ parent = this._parentSnackBar;
                    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (this._parentSnackBar) {
                        this._parentSnackBar._openedSnackBarRef = value;
                    }
                    else {
                        this._snackBarRefAtThisLevel = value;
                    }
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Creates and dispatches a snack bar with a custom component for the content, removing any
             * currently opened snack bars.
             *
             * @param component Component to be instantiated.
             * @param config Extra configuration for the snack bar.
             */
            /**
             * Creates and dispatches a snack bar with a custom component for the content, removing any
             * currently opened snack bars.
             *
             * @template T
             * @param {?} component Component to be instantiated.
             * @param {?=} config Extra configuration for the snack bar.
             * @return {?}
             */
            MatSnackBar.prototype.openFromComponent = /**
             * Creates and dispatches a snack bar with a custom component for the content, removing any
             * currently opened snack bars.
             *
             * @template T
             * @param {?} component Component to be instantiated.
             * @param {?=} config Extra configuration for the snack bar.
             * @return {?}
             */
            function (component, config) {
                return /** @type {?} */ (this._attach(component, config));
            };
            /**
             * Creates and dispatches a snack bar with a custom template for the content, removing any
             * currently opened snack bars.
             *
             * @param template Template to be instantiated.
             * @param config Extra configuration for the snack bar.
             */
            /**
             * Creates and dispatches a snack bar with a custom template for the content, removing any
             * currently opened snack bars.
             *
             * @param {?} template Template to be instantiated.
             * @param {?=} config Extra configuration for the snack bar.
             * @return {?}
             */
            MatSnackBar.prototype.openFromTemplate = /**
             * Creates and dispatches a snack bar with a custom template for the content, removing any
             * currently opened snack bars.
             *
             * @param {?} template Template to be instantiated.
             * @param {?=} config Extra configuration for the snack bar.
             * @return {?}
             */
            function (template, config) {
                return this._attach(template, config);
            };
            /**
             * Opens a snackbar with a message and an optional action.
             * @param message The message to show in the snackbar.
             * @param action The label for the snackbar action.
             * @param config Additional configuration options for the snackbar.
             */
            /**
             * Opens a snackbar with a message and an optional action.
             * @param {?} message The message to show in the snackbar.
             * @param {?=} action The label for the snackbar action.
             * @param {?=} config Additional configuration options for the snackbar.
             * @return {?}
             */
            MatSnackBar.prototype.open = /**
             * Opens a snackbar with a message and an optional action.
             * @param {?} message The message to show in the snackbar.
             * @param {?=} action The label for the snackbar action.
             * @param {?=} config Additional configuration options for the snackbar.
             * @return {?}
             */
            function (message, action, config) {
                if (action === void 0) {
                    action = '';
                }
                var /** @type {?} */ _config = Object(tslib__WEBPACK_IMPORTED_MODULE_4__["__assign"])({}, this._defaultConfig, config);
                // Since the user doesn't have access to the component, we can
                // override the data to pass in our own message and action.
                _config.data = {message: message, action: action};
                _config.announcementMessage = message;
                return this.openFromComponent(SimpleSnackBar, _config);
            };
            /**
             * Dismisses the currently-visible snack bar.
             */
            /**
             * Dismisses the currently-visible snack bar.
             * @return {?}
             */
            MatSnackBar.prototype.dismiss = /**
             * Dismisses the currently-visible snack bar.
             * @return {?}
             */
            function () {
                if (this._openedSnackBarRef) {
                    this._openedSnackBarRef.dismiss();
                }
            };
            /**
             * Attaches the snack bar container component to the overlay.
             * @param {?} overlayRef
             * @param {?} config
             * @return {?}
             */
            MatSnackBar.prototype._attachSnackBarContainer = /**
             * Attaches the snack bar container component to the overlay.
             * @param {?} overlayRef
             * @param {?} config
             * @return {?}
             */
            function (overlayRef, config) {
                var /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
                var /** @type {?} */ injector = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["PortalInjector"](userInjector || this._injector, new WeakMap([
                    [MatSnackBarConfig, config]
                ]));
                var /** @type {?} */ containerPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["ComponentPortal"](MatSnackBarContainer, config.viewContainerRef, injector);
                var /** @type {?} */ containerRef = overlayRef.attach(containerPortal);
                containerRef.instance.snackBarConfig = config;
                return containerRef.instance;
            };
            /**
             * Places a new component or a template as the content of the snack bar container.
             * @template T
             * @param {?} content
             * @param {?=} userConfig
             * @return {?}
             */
            MatSnackBar.prototype._attach = /**
             * Places a new component or a template as the content of the snack bar container.
             * @template T
             * @param {?} content
             * @param {?=} userConfig
             * @return {?}
             */
            function (content, userConfig) {
                var /** @type {?} */ config = Object(tslib__WEBPACK_IMPORTED_MODULE_4__["__assign"])({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);
                var /** @type {?} */ overlayRef = this._createOverlay(config);
                var /** @type {?} */ container = this._attachSnackBarContainer(overlayRef, config);
                var /** @type {?} */ snackBarRef = new MatSnackBarRef(container, overlayRef);
                if (content instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]) {
                    var /** @type {?} */ portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["TemplatePortal"](content, /** @type {?} */ ((null)), /** @type {?} */ ({
                        $implicit: config.data,
                        snackBarRef: snackBarRef
                    }));
                    snackBarRef.instance = container.attachTemplatePortal(portal);
                }
                else {
                    var /** @type {?} */ injector = this._createInjector(config, snackBarRef);
                    var /** @type {?} */ portal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["ComponentPortal"](content, undefined, injector);
                    var /** @type {?} */ contentRef = container.attachComponentPortal(portal);
                    // We can't pass this via the injector, because the injector is created earlier.
                    snackBarRef.instance = contentRef.instance;
                }
                // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as
                // appropriate. This class is applied to the overlay element because the overlay must expand to
                // fill the width of the screen for full width snackbars.
                this._breakpointObserver.observe(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_8__["Breakpoints"].Handset).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(overlayRef.detachments().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["take"])(1)))).subscribe(function (state$$1) {
                    if (state$$1.matches) {
                        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');
                    }
                    else {
                        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');
                    }
                });
                this._animateSnackBar(snackBarRef, config);
                this._openedSnackBarRef = snackBarRef;
                return this._openedSnackBarRef;
            };
            /**
             * Animates the old snack bar out and the new one in.
             * @param {?} snackBarRef
             * @param {?} config
             * @return {?}
             */
            MatSnackBar.prototype._animateSnackBar = /**
             * Animates the old snack bar out and the new one in.
             * @param {?} snackBarRef
             * @param {?} config
             * @return {?}
             */
            function (snackBarRef, config) {
                var _this = this;
                // When the snackbar is dismissed, clear the reference to it.
                snackBarRef.afterDismissed().subscribe(function () {
                    // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.
                    if (_this._openedSnackBarRef == snackBarRef) {
                        _this._openedSnackBarRef = null;
                    }
                });
                if (this._openedSnackBarRef) {
                    // If a snack bar is already in view, dismiss it and enter the
                    // new snack bar after exit animation is complete.
                    this._openedSnackBarRef.afterDismissed().subscribe(function () {
                        snackBarRef.containerInstance.enter();
                    });
                    this._openedSnackBarRef.dismiss();
                }
                else {
                    // If no snack bar is in view, enter the new snack bar.
                    snackBarRef.containerInstance.enter();
                }
                // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.
                if (config.duration && config.duration > 0) {
                    snackBarRef.afterOpened().subscribe(function () {
                        return snackBarRef._dismissAfter(/** @type {?} */ ((config.duration)));
                    });
                }
                if (config.announcementMessage) {
                    this._live.announce(config.announcementMessage, config.politeness);
                }
            };
            /**
             * Creates a new overlay and places it in the correct location.
             * @param {?} config The user-specified snack bar config.
             * @return {?}
             */
            MatSnackBar.prototype._createOverlay = /**
             * Creates a new overlay and places it in the correct location.
             * @param {?} config The user-specified snack bar config.
             * @return {?}
             */
            function (config) {
                var /** @type {?} */ overlayConfig = new _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["OverlayConfig"]();
                overlayConfig.direction = config.direction;
                var /** @type {?} */ positionStrategy = this._overlay.position().global();
                // Set horizontal position.
                var /** @type {?} */ isRtl = config.direction === 'rtl';
                var /** @type {?} */ isLeft = (config.horizontalPosition === 'left' ||
                    (config.horizontalPosition === 'start' && !isRtl) ||
                    (config.horizontalPosition === 'end' && isRtl));
                var /** @type {?} */ isRight = !isLeft && config.horizontalPosition !== 'center';
                if (isLeft) {
                    positionStrategy.left('0');
                }
                else if (isRight) {
                    positionStrategy.right('0');
                }
                else {
                    positionStrategy.centerHorizontally();
                }
                // Set horizontal position.
                if (config.verticalPosition === 'top') {
                    positionStrategy.top('0');
                }
                else {
                    positionStrategy.bottom('0');
                }
                overlayConfig.positionStrategy = positionStrategy;
                return this._overlay.create(overlayConfig);
            };
            /**
             * Creates an injector to be used inside of a snack bar component.
             * @template T
             * @param {?} config Config that was used to create the snack bar.
             * @param {?} snackBarRef Reference to the snack bar.
             * @return {?}
             */
            MatSnackBar.prototype._createInjector = /**
             * Creates an injector to be used inside of a snack bar component.
             * @template T
             * @param {?} config Config that was used to create the snack bar.
             * @param {?} snackBarRef Reference to the snack bar.
             * @return {?}
             */
            function (config, snackBarRef) {
                var /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
                return new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["PortalInjector"](userInjector || this._injector, new WeakMap([
                    [MatSnackBarRef, snackBarRef],
                    [MAT_SNACK_BAR_DATA, config.data]
                ]));
            };
            MatSnackBar.decorators = [
                {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]},
            ];
            /** @nocollapse */
            MatSnackBar.ctorParameters = function () {
                return [
                    {type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["Overlay"],},
                    {type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_7__["LiveAnnouncer"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"],},
                    {type: _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_8__["BreakpointObserver"],},
                    {
                        type: MatSnackBar,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]}, {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"]},]
                    },
                    {
                        type: MatSnackBarConfig,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                            args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,]
                        },]
                    },
                ];
            };
            return MatSnackBar;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatSnackBarModule = /** @class */ (function () {
            function MatSnackBarModule() {
            }

            MatSnackBarModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                        imports: [
                            _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_9__["OverlayModule"],
                            _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["PortalModule"],
                            _angular_common__WEBPACK_IMPORTED_MODULE_10__["CommonModule"],
                            _angular_material_button__WEBPACK_IMPORTED_MODULE_11__["MatButtonModule"],
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"],
                        ],
                        exports: [MatSnackBarContainer, _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]],
                        declarations: [MatSnackBarContainer, SimpleSnackBar],
                        entryComponents: [MatSnackBarContainer, SimpleSnackBar],
                        providers: [MatSnackBar]
                    },]
                },
            ];
            return MatSnackBarModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=snack-bar.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/sort.es5.js":
    /*!*********************************************************!*\
  !*** ./node_modules/@angular/material/esm5/sort.es5.js ***!
  \*********************************************************/
    /*! exports provided: MatSortModule, MatSortHeaderBase, _MatSortHeaderMixinBase, MatSortHeader, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MAT_SORT_HEADER_INTL_PROVIDER, MatSortBase, _MatSortMixinBase, MatSort, matSortAnimations */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSortModule", function () {
            return MatSortModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSortHeaderBase", function () {
            return MatSortHeaderBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MatSortHeaderMixinBase", function () {
            return _MatSortHeaderMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSortHeader", function () {
            return MatSortHeader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSortHeaderIntl", function () {
            return MatSortHeaderIntl;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_SORT_HEADER_INTL_PROVIDER_FACTORY", function () {
            return MAT_SORT_HEADER_INTL_PROVIDER_FACTORY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_SORT_HEADER_INTL_PROVIDER", function () {
            return MAT_SORT_HEADER_INTL_PROVIDER;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSortBase", function () {
            return MatSortBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MatSortMixinBase", function () {
            return _MatSortMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSort", function () {
            return MatSort;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "matSortAnimations", function () {
            return matSortAnimations;
        });
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var _angular_animations__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm5/animations.js");
        /* harmony import */
        var _angular_cdk_table__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/table */ "./node_modules/@angular/cdk/esm5/table.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * \@docs-private
         * @param {?} id
         * @return {?}
         */
        function getSortDuplicateSortableIdError(id) {
            return Error("Cannot have two MatSortables with the same id (" + id + ").");
        }

        /**
         * \@docs-private
         * @return {?}
         */
        function getSortHeaderNotContainedWithinSortError() {
            return Error("MatSortHeader must be placed within a parent element with the MatSort directive.");
        }

        /**
         * \@docs-private
         * @return {?}
         */
        function getSortHeaderMissingIdError() {
            return Error("MatSortHeader must be provided with a unique id.");
        }

        /**
         * \@docs-private
         * @param {?} direction
         * @return {?}
         */
        function getSortInvalidDirectionError(direction) {
            return Error(direction + " is not a valid sort direction ('asc' or 'desc').");
        }

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatSortBase = /** @class */ (function () {
            function MatSortBase() {
            }

            return MatSortBase;
        }());
        var /** @type {?} */ _MatSortMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinInitialized"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(MatSortBase));
        /**
         * Container for MatSortables to manage the sort state and provide default sort parameters.
         */
        var MatSort = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatSort, _super);

            function MatSort() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                /**
                 * Collection of all registered sortables that this directive manages.
                 */
                _this.sortables = new Map();
                /**
                 * Used to notify any child components listening to state changes.
                 */
                _this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                /**
                 * The direction to set when an MatSortable is initially sorted.
                 * May be overriden by the MatSortable's sort start.
                 */
                _this.start = 'asc';
                _this._direction = '';
                /**
                 * Event emitted when the user changes either the active sort or sort direction.
                 */
                _this.sortChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                return _this;
            }

            Object.defineProperty(MatSort.prototype, "direction", {
                get: /**
                 * The sort direction of the currently active MatSortable.
                 * @return {?}
                 */
                function () {
                    return this._direction;
                },
                set: /**
                 * @param {?} direction
                 * @return {?}
                 */
                function (direction) {
                    if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() && direction && direction !== 'asc' && direction !== 'desc') {
                        throw getSortInvalidDirectionError(direction);
                    }
                    this._direction = direction;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatSort.prototype, "disableClear", {
                get: /**
                 * Whether to disable the user from clearing the sort by finishing the sort direction cycle.
                 * May be overriden by the MatSortable's disable clear input.
                 * @return {?}
                 */
                function () {
                    return this._disableClear;
                },
                set: /**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    this._disableClear = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(v);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Register function to be used by the contained MatSortables. Adds the MatSortable to the
             * collection of MatSortables.
             */
            /**
             * Register function to be used by the contained MatSortables. Adds the MatSortable to the
             * collection of MatSortables.
             * @param {?} sortable
             * @return {?}
             */
            MatSort.prototype.register = /**
             * Register function to be used by the contained MatSortables. Adds the MatSortable to the
             * collection of MatSortables.
             * @param {?} sortable
             * @return {?}
             */
            function (sortable) {
                if (!sortable.id) {
                    throw getSortHeaderMissingIdError();
                }
                if (this.sortables.has(sortable.id)) {
                    throw getSortDuplicateSortableIdError(sortable.id);
                }
                this.sortables.set(sortable.id, sortable);
            };
            /**
             * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the
             * collection of contained MatSortables.
             */
            /**
             * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the
             * collection of contained MatSortables.
             * @param {?} sortable
             * @return {?}
             */
            MatSort.prototype.deregister = /**
             * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the
             * collection of contained MatSortables.
             * @param {?} sortable
             * @return {?}
             */
            function (sortable) {
                this.sortables.delete(sortable.id);
            };
            /** Sets the active sort id and determines the new sort direction. */
            /**
             * Sets the active sort id and determines the new sort direction.
             * @param {?} sortable
             * @return {?}
             */
            MatSort.prototype.sort = /**
             * Sets the active sort id and determines the new sort direction.
             * @param {?} sortable
             * @return {?}
             */
            function (sortable) {
                if (this.active != sortable.id) {
                    this.active = sortable.id;
                    this.direction = sortable.start ? sortable.start : this.start;
                }
                else {
                    this.direction = this.getNextSortDirection(sortable);
                }
                this.sortChange.emit({active: this.active, direction: this.direction});
            };
            /** Returns the next sort direction of the active sortable, checking for potential overrides. */
            /**
             * Returns the next sort direction of the active sortable, checking for potential overrides.
             * @param {?} sortable
             * @return {?}
             */
            MatSort.prototype.getNextSortDirection = /**
             * Returns the next sort direction of the active sortable, checking for potential overrides.
             * @param {?} sortable
             * @return {?}
             */
            function (sortable) {
                if (!sortable) {
                    return '';
                }
                // Get the sort direction cycle with the potential sortable overrides.
                var /** @type {?} */ disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;
                var /** @type {?} */ sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);
                // Get and return the next direction in the cycle
                var /** @type {?} */ nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;
                if (nextDirectionIndex >= sortDirectionCycle.length) {
                    nextDirectionIndex = 0;
                }
                return sortDirectionCycle[nextDirectionIndex];
            };
            /**
             * @return {?}
             */
            MatSort.prototype.ngOnInit = /**
             * @return {?}
             */
            function () {
                this._markInitialized();
            };
            /**
             * @return {?}
             */
            MatSort.prototype.ngOnChanges = /**
             * @return {?}
             */
            function () {
                this._stateChanges.next();
            };
            /**
             * @return {?}
             */
            MatSort.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._stateChanges.complete();
            };
            MatSort.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: '[matSort]',
                        exportAs: 'matSort',
                        inputs: ['disabled: matSortDisabled']
                    },]
                },
            ];
            /** @nocollapse */
            MatSort.propDecorators = {
                "active": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matSortActive',]},],
                "start": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matSortStart',]},],
                "direction": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
                    args: ['matSortDirection',]
                },],
                "disableClear": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"],
                    args: ['matSortDisableClear',]
                },],
                "sortChange": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"], args: ['matSortChange',]},],
            };
            return MatSort;
        }(_MatSortMixinBase));

        /**
         * Returns the sort direction cycle to use given the provided parameters of order and clear.
         * @param {?} start
         * @param {?} disableClear
         * @return {?}
         */
        function getSortDirectionCycle(start, disableClear) {
            var /** @type {?} */ sortOrder = ['asc', 'desc'];
            if (start == 'desc') {
                sortOrder.reverse();
            }
            if (!disableClear) {
                sortOrder.push('');
            }
            return sortOrder;
        }

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var /** @type {?} */ SORT_ANIMATION_TRANSITION = _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["AnimationDurations"].ENTERING + ' ' +
            _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["AnimationCurves"].STANDARD_CURVE;
        /**
         * Animations used by MatSort.
         */
        var /** @type {?} */ matSortAnimations = {
            /** Animation that moves the sort indicator. */
            indicator: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["trigger"])('indicator', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('active-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translateY(0px)'})),
                // 10px is the height of the sort indicator, minus the width of the pointers
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('active-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translateY(10px)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('active-asc <=> active-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])(SORT_ANIMATION_TRANSITION))
            ]),
            /** Animation that rotates the left pointer of the indicator based on the sorting direction. */
            leftPointer: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["trigger"])('leftPointer', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('active-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'rotate(-45deg)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('active-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'rotate(45deg)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('active-asc <=> active-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])(SORT_ANIMATION_TRANSITION))
            ]),
            /** Animation that rotates the right pointer of the indicator based on the sorting direction. */
            rightPointer: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["trigger"])('rightPointer', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('active-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'rotate(45deg)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('active-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'rotate(-45deg)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('active-asc <=> active-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])(SORT_ANIMATION_TRANSITION))
            ]),
            /** Animation that controls the arrow opacity. */
            arrowOpacity: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["trigger"])('arrowOpacity', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('desc-to-active, asc-to-active, active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({opacity: 1})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('desc-to-hint, asc-to-hint, hint', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({opacity: .54})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({opacity: 0})),
                // Transition between all states except for immediate transitions
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('* => asc, * => desc, * => active, * => hint', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])('0ms')),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('* <=> *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])(SORT_ANIMATION_TRANSITION))
            ]),
            /**
             * Animation for the translation of the arrow as a whole. States are separated into two
             * groups: ones with animations and others that are immediate. Immediate states are asc, desc,
             * peek, and active. The other states define a specific animation (source-to-destination)
             * and are determined as a function of their prev user-perceived state and what the next state
             * should be.
             */
            arrowPosition: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["trigger"])('arrowPosition', [
                // Hidden Above => Hint Center
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('* => desc-to-hint, * => desc-to-active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["keyframes"])([
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translateY(-25%)'}),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translateY(0)'})
                ]))),
                // Hint Center => Hidden Below
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('* => hint-to-desc, * => active-to-desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["keyframes"])([
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translateY(0)'}),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translateY(25%)'})
                ]))),
                // Hidden Below => Hint Center
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('* => asc-to-hint, * => asc-to-active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["keyframes"])([
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translateY(25%)'}),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translateY(0)'})
                ]))),
                // Hint Center => Hidden Above
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('* => hint-to-asc, * => active-to-asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])(SORT_ANIMATION_TRANSITION, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["keyframes"])([
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translateY(0)'}),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translateY(-25%)'})
                ]))),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translateY(0)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('hint-to-desc, active-to-desc, desc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translateY(-25%)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('hint-to-asc, active-to-asc, asc', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translateY(25%)'})),
            ]),
            /** Necessary trigger that calls animate on children animations. */
            allowChildren: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["trigger"])('allowChildren', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('* <=> *', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["query"])('@*', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animateChild"])(), {optional: true})
                ])
            ]),
        };

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and
         * include it in a custom provider.
         */
        var MatSortHeaderIntl = /** @class */ (function () {
            function MatSortHeaderIntl() {
                /**
                 * Stream that emits whenever the labels here are changed. Use this to notify
                 * components if the labels have changed after initialization.
                 */
                this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                /**
                 * ARIA label for the sorting button.
                 */
                this.sortButtonLabel = function (id) {
                    return "Change sorting for " + id;
                };
            }

            MatSortHeaderIntl.decorators = [
                {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{providedIn: 'root'},]},
            ];
            /** @nocollapse */ MatSortHeaderIntl.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["defineInjectable"])({
                factory: function MatSortHeaderIntl_Factory() {
                    return new MatSortHeaderIntl();
                }, token: MatSortHeaderIntl, providedIn: "root"
            });
            return MatSortHeaderIntl;
        }());

        /**
         * \@docs-private
         * @param {?} parentIntl
         * @return {?}
         */
        function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {
            return parentIntl || new MatSortHeaderIntl();
        }

        /**
         * \@docs-private
         */
        var /** @type {?} */ MAT_SORT_HEADER_INTL_PROVIDER = {
            // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.
            provide: MatSortHeaderIntl,
            deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"](), MatSortHeaderIntl]],
            useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY
        };

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatSortHeaderBase = /** @class */ (function () {
            function MatSortHeaderBase() {
            }

            return MatSortHeaderBase;
        }());
        var /** @type {?} */ _MatSortHeaderMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(MatSortHeaderBase);
        /**
         * Applies sorting behavior (click to change sort) and styles to an element, including an
         * arrow to display the current sort direction.
         *
         * Must be provided with an id and contained within a parent MatSort directive.
         *
         * If used on header cells in a CdkTable, it will automatically default its id from its containing
         * column definition.
         */
        var MatSortHeader = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatSortHeader, _super);

            function MatSortHeader(_intl, changeDetectorRef, _sort, _cdkColumnDef) {
                var _this = _super.call(this) || this;
                _this._intl = _intl;
                _this._sort = _sort;
                _this._cdkColumnDef = _cdkColumnDef;
                /**
                 * Flag set to true when the indicator should be displayed while the sort is not active. Used to
                 * provide an affordance that the header is sortable by showing on focus and hover.
                 */
                _this._showIndicatorHint = false;
                /**
                 * The direction the arrow should be facing according to the current state.
                 */
                _this._arrowDirection = '';
                /**
                 * Whether the view state animation should show the transition between the `from` and `to` states.
                 */
                _this._disableViewStateAnimation = false;
                /**
                 * Sets the position of the arrow that displays when sorted.
                 */
                _this.arrowPosition = 'after';
                if (!_sort) {
                    throw getSortHeaderNotContainedWithinSortError();
                }
                _this._rerenderSubscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["merge"])(_sort.sortChange, _sort._stateChanges, _intl.changes)
                    .subscribe(function () {
                        if (_this._isSorted()) {
                            _this._updateArrowDirection();
                        }
                        // If this header was recently active and now no longer sorted, animate away the arrow.
                        if (!_this._isSorted() && _this._viewState && _this._viewState.toState === 'active') {
                            _this._disableViewStateAnimation = false;
                            _this._setAnimationTransitionState({fromState: 'active', toState: _this._arrowDirection});
                        }
                        changeDetectorRef.markForCheck();
                    });
                return _this;
            }

            Object.defineProperty(MatSortHeader.prototype, "disableClear", {
                get: /**
                 * Overrides the disable clear value of the containing MatSort for this MatSortable.
                 * @return {?}
                 */
                function () {
                    return this._disableClear;
                },
                set: /**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    this._disableClear = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__["coerceBooleanProperty"])(v);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatSortHeader.prototype.ngOnInit = /**
             * @return {?}
             */
            function () {
                if (!this.id && this._cdkColumnDef) {
                    this.id = this._cdkColumnDef.name;
                }
                // Initialize the direction of the arrow and set the view state to be immediately that state.
                this._updateArrowDirection();
                this._setAnimationTransitionState({toState: this._isSorted() ? 'active' : this._arrowDirection});
                this._sort.register(this);
            };
            /**
             * @return {?}
             */
            MatSortHeader.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._sort.deregister(this);
                this._rerenderSubscription.unsubscribe();
            };
            /**
             * Sets the "hint" state such that the arrow will be semi-transparently displayed as a hint to the
             * user showing what the active sort will become. If set to false, the arrow will fade away.
             */
            /**
             * Sets the "hint" state such that the arrow will be semi-transparently displayed as a hint to the
             * user showing what the active sort will become. If set to false, the arrow will fade away.
             * @param {?} visible
             * @return {?}
             */
            MatSortHeader.prototype._setIndicatorHintVisible = /**
             * Sets the "hint" state such that the arrow will be semi-transparently displayed as a hint to the
             * user showing what the active sort will become. If set to false, the arrow will fade away.
             * @param {?} visible
             * @return {?}
             */
            function (visible) {
                // No-op if the sort header is disabled - should not make the hint visible.
                if (this._isDisabled() && visible) {
                    return;
                }
                this._showIndicatorHint = visible;
                if (!this._isSorted()) {
                    this._updateArrowDirection();
                    if (this._showIndicatorHint) {
                        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});
                    }
                    else {
                        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});
                    }
                }
            };
            /**
             * Sets the animation transition view state for the arrow's position and opacity. If the
             * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that
             * no animation appears.
             */
            /**
             * Sets the animation transition view state for the arrow's position and opacity. If the
             * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that
             * no animation appears.
             * @param {?} viewState
             * @return {?}
             */
            MatSortHeader.prototype._setAnimationTransitionState = /**
             * Sets the animation transition view state for the arrow's position and opacity. If the
             * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that
             * no animation appears.
             * @param {?} viewState
             * @return {?}
             */
            function (viewState) {
                this._viewState = viewState;
                // If the animation for arrow position state (opacity/translation) should be disabled,
                // remove the fromState so that it jumps right to the toState.
                if (this._disableViewStateAnimation) {
                    this._viewState = {toState: viewState.toState};
                }
            };
            /** Triggers the sort on this sort header and removes the indicator hint. */
            /**
             * Triggers the sort on this sort header and removes the indicator hint.
             * @return {?}
             */
            MatSortHeader.prototype._handleClick = /**
             * Triggers the sort on this sort header and removes the indicator hint.
             * @return {?}
             */
            function () {
                if (this._isDisabled()) {
                    return;
                }
                this._sort.sort(this);
                // Do not show the animation if the header was already shown in the right position.
                if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {
                    this._disableViewStateAnimation = true;
                }
                // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into
                // the direction it is facing.
                var /** @type {?} */ viewState = this._isSorted() ?
                    {fromState: this._arrowDirection, toState: 'active'} :
                    {fromState: 'active', toState: this._arrowDirection};
                this._setAnimationTransitionState(viewState);
                this._showIndicatorHint = false;
            };
            /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */
            /**
             * Whether this MatSortHeader is currently sorted in either ascending or descending order.
             * @return {?}
             */
            MatSortHeader.prototype._isSorted = /**
             * Whether this MatSortHeader is currently sorted in either ascending or descending order.
             * @return {?}
             */
            function () {
                return this._sort.active == this.id &&
                    (this._sort.direction === 'asc' || this._sort.direction === 'desc');
            };
            /** Returns the animation state for the arrow direction (indicator and pointers). */
            /**
             * Returns the animation state for the arrow direction (indicator and pointers).
             * @return {?}
             */
            MatSortHeader.prototype._getArrowDirectionState = /**
             * Returns the animation state for the arrow direction (indicator and pointers).
             * @return {?}
             */
            function () {
                return "" + (this._isSorted() ? 'active-' : '') + this._arrowDirection;
            };
            /** Returns the arrow position state (opacity, translation). */
            /**
             * Returns the arrow position state (opacity, translation).
             * @return {?}
             */
            MatSortHeader.prototype._getArrowViewState = /**
             * Returns the arrow position state (opacity, translation).
             * @return {?}
             */
            function () {
                var /** @type {?} */ fromState = this._viewState.fromState;
                return (fromState ? fromState + "-to-" : '') + this._viewState.toState;
            };
            /**
             * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be
             * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently
             * active sorted direction. The reason this is updated through a function is because the direction
             * should only be changed at specific times - when deactivated but the hint is displayed and when
             * the sort is active and the direction changes. Otherwise the arrow's direction should linger
             * in cases such as the sort becoming deactivated but we want to animate the arrow away while
             * preserving its direction, even though the next sort direction is actually different and should
             * only be changed once the arrow displays again (hint or activation).
             */
            /**
             * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be
             * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently
             * active sorted direction. The reason this is updated through a function is because the direction
             * should only be changed at specific times - when deactivated but the hint is displayed and when
             * the sort is active and the direction changes. Otherwise the arrow's direction should linger
             * in cases such as the sort becoming deactivated but we want to animate the arrow away while
             * preserving its direction, even though the next sort direction is actually different and should
             * only be changed once the arrow displays again (hint or activation).
             * @return {?}
             */
            MatSortHeader.prototype._updateArrowDirection = /**
             * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be
             * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently
             * active sorted direction. The reason this is updated through a function is because the direction
             * should only be changed at specific times - when deactivated but the hint is displayed and when
             * the sort is active and the direction changes. Otherwise the arrow's direction should linger
             * in cases such as the sort becoming deactivated but we want to animate the arrow away while
             * preserving its direction, even though the next sort direction is actually different and should
             * only be changed once the arrow displays again (hint or activation).
             * @return {?}
             */
            function () {
                this._arrowDirection = this._isSorted() ?
                    this._sort.direction :
                    (this.start || this._sort.start);
            };
            /**
             * @return {?}
             */
            MatSortHeader.prototype._isDisabled = /**
             * @return {?}
             */
            function () {
                return this._sort.disabled || this.disabled;
            };
            /**
             * Gets the aria-sort attribute that should be applied to this sort header. If this header
             * is not sorted, returns null so that the attribute is removed from the host element. Aria spec
             * says that the aria-sort property should only be present on one header at a time, so removing
             * ensures this is true.
             */
            /**
             * Gets the aria-sort attribute that should be applied to this sort header. If this header
             * is not sorted, returns null so that the attribute is removed from the host element. Aria spec
             * says that the aria-sort property should only be present on one header at a time, so removing
             * ensures this is true.
             * @return {?}
             */
            MatSortHeader.prototype._getAriaSortAttribute = /**
             * Gets the aria-sort attribute that should be applied to this sort header. If this header
             * is not sorted, returns null so that the attribute is removed from the host element. Aria spec
             * says that the aria-sort property should only be present on one header at a time, so removing
             * ensures this is true.
             * @return {?}
             */
            function () {
                if (!this._isSorted()) {
                    return null;
                }
                return this._sort.direction == 'asc' ? 'ascending' : 'descending';
            };
            MatSortHeader.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: '[mat-sort-header]',
                        exportAs: 'matSortHeader',
                        template: "<div class=\"mat-sort-header-container\" [class.mat-sort-header-sorted]=\"_isSorted()\" [class.mat-sort-header-position-before]=\"arrowPosition == 'before'\"><button class=\"mat-sort-header-button\" type=\"button\" [attr.disabled]=\"_isDisabled() || null\" [attr.aria-label]=\"_intl.sortButtonLabel(id)\" (focus)=\"_setIndicatorHintVisible(true)\" (blur)=\"_setIndicatorHintVisible(false)\"><ng-content></ng-content></button><div class=\"mat-sort-header-arrow\" [@arrowOpacity]=\"_getArrowViewState()\" [@arrowPosition]=\"_getArrowViewState()\" [@allowChildren]=\"_getArrowDirectionState()\" (@arrowPosition.start)=\"_disableViewStateAnimation = true\" (@arrowPosition.done)=\"_disableViewStateAnimation = false\"><div class=\"mat-sort-header-stem\"></div><div class=\"mat-sort-header-indicator\" [@indicator]=\"_getArrowDirectionState()\"><div class=\"mat-sort-header-pointer-left\" [@leftPointer]=\"_getArrowDirectionState()\"></div><div class=\"mat-sort-header-pointer-right\" [@rightPointer]=\"_getArrowDirectionState()\"></div><div class=\"mat-sort-header-pointer-middle\"></div></div></div></div>",
                        styles: [".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}"],
                        host: {
                            '(click)': '_handleClick()',
                            '(mouseenter)': '_setIndicatorHintVisible(true)',
                            '(longpress)': '_setIndicatorHintVisible(true)',
                            '(mouseleave)': '_setIndicatorHintVisible(false)',
                            '[attr.aria-sort]': '_getAriaSortAttribute()',
                            '[class.mat-sort-header-disabled]': '_isDisabled()',
                        },
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        inputs: ['disabled'],
                        animations: [
                            matSortAnimations.indicator,
                            matSortAnimations.leftPointer,
                            matSortAnimations.rightPointer,
                            matSortAnimations.arrowOpacity,
                            matSortAnimations.arrowPosition,
                            matSortAnimations.allowChildren,
                        ]
                    },]
                },
            ];
            /** @nocollapse */
            MatSortHeader.ctorParameters = function () {
                return [
                    {type: MatSortHeaderIntl,},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],},
                    {type: MatSort, decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]},]},
                    {
                        type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_6__["CdkColumnDef"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]},]
                    },
                ];
            };
            MatSortHeader.propDecorators = {
                "id": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['mat-sort-header',]},],
                "arrowPosition": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "start": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "disableClear": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
            };
            return MatSortHeader;
        }(_MatSortHeaderMixinBase));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatSortModule = /** @class */ (function () {
            function MatSortModule() {
            }

            MatSortModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_7__["CommonModule"]],
                        exports: [MatSort, MatSortHeader],
                        declarations: [MatSort, MatSortHeader],
                        providers: [MAT_SORT_HEADER_INTL_PROVIDER]
                    },]
                },
            ];
            return MatSortModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=sort.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/stepper.es5.js":
    /*!************************************************************!*\
  !*** ./node_modules/@angular/material/esm5/stepper.es5.js ***!
  \************************************************************/
    /*! exports provided: MatStepperModule, MatStepLabel, MatStep, MatStepper, MatHorizontalStepper, MatVerticalStepper, MatStepperNext, MatStepperPrevious, MatStepHeader, MatStepperIntl, matStepperAnimations, MatStepperIcon */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatStepperModule", function () {
            return MatStepperModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatStepLabel", function () {
            return MatStepLabel;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatStep", function () {
            return MatStep;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatStepper", function () {
            return MatStepper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatHorizontalStepper", function () {
            return MatHorizontalStepper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatVerticalStepper", function () {
            return MatVerticalStepper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatStepperNext", function () {
            return MatStepperNext;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatStepperPrevious", function () {
            return MatStepperPrevious;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatStepHeader", function () {
            return MatStepHeader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatStepperIntl", function () {
            return MatStepperIntl;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "matStepperAnimations", function () {
            return matStepperAnimations;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatStepperIcon", function () {
            return MatStepperIcon;
        });
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/stepper */ "./node_modules/@angular/cdk/esm5/stepper.es5.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_animations__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm5/animations.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /* harmony import */
        var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm5/portal.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_material_button__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm5/button.es5.js");
        /* harmony import */
        var _angular_material_icon__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/icon */ "./node_modules/@angular/material/esm5/icon.es5.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatStepLabel = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatStepLabel, _super);

            function MatStepLabel(template) {
                return _super.call(this, template) || this;
            }

            MatStepLabel.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: '[matStepLabel]',
                    },]
                },
            ];
            /** @nocollapse */
            MatStepLabel.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],},
                ];
            };
            return MatStepLabel;
        }(_angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_2__["CdkStepLabel"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Stepper data that is required for internationalization.
         */
        var MatStepperIntl = /** @class */ (function () {
            function MatStepperIntl() {
                /**
                 * Stream that emits whenever the labels here are changed. Use this to notify
                 * components if the labels have changed after initialization.
                 */
                this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
                /**
                 * Label that is rendered below optional steps.
                 */
                this.optionalLabel = 'Optional';
            }

            MatStepperIntl.decorators = [
                {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{providedIn: 'root'},]},
            ];
            /** @nocollapse */ MatStepperIntl.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["defineInjectable"])({
                factory: function MatStepperIntl_Factory() {
                    return new MatStepperIntl();
                }, token: MatStepperIntl, providedIn: "root"
            });
            return MatStepperIntl;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatStepHeader = /** @class */ (function () {
            function MatStepHeader(_intl, _focusMonitor, _element, changeDetectorRef) {
                this._intl = _intl;
                this._focusMonitor = _focusMonitor;
                this._element = _element;
                _focusMonitor.monitor(_element.nativeElement, true);
                this._intlSubscription = _intl.changes.subscribe(function () {
                    return changeDetectorRef.markForCheck();
                });
            }

            /**
             * @return {?}
             */
            MatStepHeader.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._intlSubscription.unsubscribe();
                this._focusMonitor.stopMonitoring(this._element.nativeElement);
            };
            /** Returns string label of given step if it is a text label. */
            /**
             * Returns string label of given step if it is a text label.
             * @return {?}
             */
            MatStepHeader.prototype._stringLabel = /**
             * Returns string label of given step if it is a text label.
             * @return {?}
             */
            function () {
                return this.label instanceof MatStepLabel ? null : this.label;
            };
            /** Returns MatStepLabel if the label of given step is a template label. */
            /**
             * Returns MatStepLabel if the label of given step is a template label.
             * @return {?}
             */
            MatStepHeader.prototype._templateLabel = /**
             * Returns MatStepLabel if the label of given step is a template label.
             * @return {?}
             */
            function () {
                return this.label instanceof MatStepLabel ? this.label : null;
            };
            /** Returns the host HTML element. */
            /**
             * Returns the host HTML element.
             * @return {?}
             */
            MatStepHeader.prototype._getHostElement = /**
             * Returns the host HTML element.
             * @return {?}
             */
            function () {
                return this._element.nativeElement;
            };
            /** Template context variables that are exposed to the `matStepperIcon` instances. */
            /**
             * Template context variables that are exposed to the `matStepperIcon` instances.
             * @return {?}
             */
            MatStepHeader.prototype._getIconContext = /**
             * Template context variables that are exposed to the `matStepperIcon` instances.
             * @return {?}
             */
            function () {
                return {
                    index: this.index,
                    active: this.active,
                    optional: this.optional
                };
            };
            /**
             * @return {?}
             */
            MatStepHeader.prototype.focus = /**
             * @return {?}
             */
            function () {
                this._getHostElement().focus();
            };
            MatStepHeader.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'mat-step-header',
                        template: "<div class=\"mat-step-header-ripple\" mat-ripple [matRippleTrigger]=\"_getHostElement()\"></div><div [class.mat-step-icon]=\"state !== 'number' || selected\" [class.mat-step-icon-not-touched]=\"state == 'number' && !selected\" [ngSwitch]=\"state\"><ng-container *ngSwitchCase=\"'number'\" [ngSwitch]=\"!!(iconOverrides && iconOverrides.number)\"><ng-container *ngSwitchCase=\"true\" [ngTemplateOutlet]=\"iconOverrides.number\" [ngTemplateOutletContext]=\"_getIconContext()\"></ng-container><span *ngSwitchDefault>{{index + 1}}</span></ng-container><ng-container *ngSwitchCase=\"'edit'\" [ngSwitch]=\"!!(iconOverrides && iconOverrides.edit)\"><ng-container *ngSwitchCase=\"true\" [ngTemplateOutlet]=\"iconOverrides.edit\" [ngTemplateOutletContext]=\"_getIconContext()\"></ng-container><mat-icon *ngSwitchDefault>create</mat-icon></ng-container><ng-container *ngSwitchCase=\"'done'\" [ngSwitch]=\"!!(iconOverrides && iconOverrides.done)\"><ng-container *ngSwitchCase=\"true\" [ngTemplateOutlet]=\"iconOverrides.done\" [ngTemplateOutletContext]=\"_getIconContext()\"></ng-container><mat-icon *ngSwitchDefault>done</mat-icon></ng-container></div><div class=\"mat-step-label\" [class.mat-step-label-active]=\"active\" [class.mat-step-label-selected]=\"selected\"><ng-container *ngIf=\"_templateLabel()\" [ngTemplateOutlet]=\"_templateLabel()!.template\"></ng-container><div class=\"mat-step-text-label\" *ngIf=\"_stringLabel()\">{{label}}</div><div class=\"mat-step-optional\" *ngIf=\"optional\">{{_intl.optionalLabel}}</div></div>",
                        styles: [".mat-step-header{overflow:hidden;outline:0;cursor:pointer;position:relative;box-sizing:content-box}.mat-step-optional{font-size:12px}.mat-step-icon,.mat-step-icon-not-touched{border-radius:50%;height:24px;width:24px;align-items:center;justify-content:center;display:flex;flex-shrink:0}.mat-step-icon .mat-icon{font-size:16px;height:16px;width:16px}.mat-step-label{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle}.mat-step-text-label{text-overflow:ellipsis;overflow:hidden}.mat-step-header-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}"],
                        host: {
                            'class': 'mat-step-header',
                            'role': 'tab',
                        },
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                    },]
                },
            ];
            /** @nocollapse */
            MatStepHeader.ctorParameters = function () {
                return [
                    {type: MatStepperIntl,},
                    {type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__["FocusMonitor"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],},
                ];
            };
            MatStepHeader.propDecorators = {
                "state": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "label": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "iconOverrides": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "index": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "selected": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "active": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
                "optional": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]},],
            };
            return MatStepHeader;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Animations used by the Material steppers.
         */
        var /** @type {?} */ matStepperAnimations = {
            /** Animation that transitions the step along the X axis in a horizontal stepper. */
            horizontalStepTransition: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["trigger"])('stepTransition', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('previous', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({
                    transform: 'translate3d(-100%, 0, 0)',
                    visibility: 'hidden'
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('current', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({
                    transform: 'none',
                    visibility: 'visible'
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('next', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({
                    transform: 'translate3d(100%, 0, 0)',
                    visibility: 'hidden'
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('* => *', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])('500ms cubic-bezier(0.35, 0, 0.25, 1)'))
            ]),
            /** Animation that transitions the step along the Y axis in a vertical stepper. */
            verticalStepTransition: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["trigger"])('stepTransition', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('previous', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({
                    height: '0px',
                    visibility: 'hidden'
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('next', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({
                    height: '0px',
                    visibility: 'hidden'
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('current', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({
                    height: '*',
                    visibility: 'visible'
                })),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('* <=> current', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))
            ])
        };

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Template to be used to override the icons inside the step header.
         */
        var MatStepperIcon = /** @class */ (function () {
            function MatStepperIcon(templateRef) {
                this.templateRef = templateRef;
            }

            MatStepperIcon.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: 'ng-template[matStepperIcon]',
                    },]
                },
            ];
            /** @nocollapse */
            MatStepperIcon.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],},
                ];
            };
            MatStepperIcon.propDecorators = {
                "name": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matStepperIcon',]},],
            };
            return MatStepperIcon;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatStep = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatStep, _super);

            function MatStep(stepper, _errorStateMatcher) {
                var _this = _super.call(this, stepper) || this;
                _this._errorStateMatcher = _errorStateMatcher;
                return _this;
            }

            /** Custom error state matcher that additionally checks for validity of interacted form. */
            /**
             * Custom error state matcher that additionally checks for validity of interacted form.
             * @param {?} control
             * @param {?} form
             * @return {?}
             */
            MatStep.prototype.isErrorState = /**
             * Custom error state matcher that additionally checks for validity of interacted form.
             * @param {?} control
             * @param {?} form
             * @return {?}
             */
            function (control, form) {
                var /** @type {?} */ originalErrorState = this._errorStateMatcher.isErrorState(control, form);
                // Custom error state checks for the validity of form that is not submitted or touched
                // since user can trigger a form change by calling for another step without directly
                // interacting with the current form.
                var /** @type {?} */ customErrorState = !!(control && control.invalid && this.interacted);
                return originalErrorState || customErrorState;
            };
            MatStep.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'mat-step',
                        template: "<ng-template><ng-content></ng-content></ng-template>",
                        providers: [{
                            provide: _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["ErrorStateMatcher"],
                            useExisting: MatStep
                        }],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        exportAs: 'matStep',
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                    },]
                },
            ];
            /** @nocollapse */
            MatStep.ctorParameters = function () {
                return [
                    {
                        type: MatStepper,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                            args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
                                return MatStepper;
                            }),]
                        },]
                    },
                    {
                        type: _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["ErrorStateMatcher"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"]},]
                    },
                ];
            };
            MatStep.propDecorators = {
                "stepLabel": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChild"],
                    args: [MatStepLabel,]
                },],
            };
            return MatStep;
        }(_angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_2__["CdkStep"]));
        var MatStepper = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatStepper, _super);

            function MatStepper() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                /**
                 * Event emitted when the current step is done transitioning in.
                 */
                _this.animationDone = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                /**
                 * Consumer-specified template-refs to be used to override the header icons.
                 */
                _this._iconOverrides = {};
                return _this;
            }

            /**
             * @return {?}
             */
            MatStepper.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                var _this = this;
                var /** @type {?} */ icons = this._icons.toArray();
                ['edit', 'done', 'number'].forEach(function (name) {
                    var /** @type {?} */ override = icons.find(function (icon) {
                        return icon.name === name;
                    });
                    if (override) {
                        _this._iconOverrides[name] = override.templateRef;
                    }
                });
                // Mark the component for change detection whenever the content children query changes
                this._steps.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__["takeUntil"])(this._destroyed)).subscribe(function () {
                    return _this._stateChanged();
                });
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatStepper.prototype._animationDone = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if ((/** @type {?} */ (event.toState)) === 'current') {
                    this.animationDone.emit();
                }
            };
            MatStepper.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: '[matStepper]'
                    },]
                },
            ];
            /** @nocollapse */
            MatStepper.propDecorators = {
                "_stepHeader": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"],
                    args: [MatStepHeader,]
                },],
                "_steps": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [MatStep,]},],
                "_icons": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
                    args: [MatStepperIcon,]
                },],
                "animationDone": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]},],
            };
            return MatStepper;
        }(_angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_2__["CdkStepper"]));
        var MatHorizontalStepper = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatHorizontalStepper, _super);

            function MatHorizontalStepper() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            MatHorizontalStepper.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'mat-horizontal-stepper',
                        exportAs: 'matHorizontalStepper',
                        template: "<div class=\"mat-horizontal-stepper-header-container\"><ng-container *ngFor=\"let step of _steps; let i = index; let isLast = last\"><mat-step-header class=\"mat-horizontal-stepper-header\" (click)=\"step.select()\" (keydown)=\"_onKeydown($event)\" [tabIndex]=\"_getFocusIndex() === i ? 0 : -1\" [id]=\"_getStepLabelId(i)\" [attr.aria-controls]=\"_getStepContentId(i)\" [attr.aria-selected]=\"selectedIndex == i\" [index]=\"i\" [state]=\"_getIndicatorType(i)\" [label]=\"step.stepLabel || step.label\" [selected]=\"selectedIndex === i\" [active]=\"step.completed || selectedIndex === i || !linear\" [optional]=\"step.optional\" [iconOverrides]=\"_iconOverrides\"></mat-step-header><div *ngIf=\"!isLast\" class=\"mat-stepper-horizontal-line\"></div></ng-container></div><div class=\"mat-horizontal-content-container\"><div *ngFor=\"let step of _steps; let i = index\" class=\"mat-horizontal-stepper-content\" role=\"tabpanel\" [@stepTransition]=\"_getAnimationDirection(i)\" (@stepTransition.done)=\"_animationDone($event)\" [id]=\"_getStepContentId(i)\" [attr.aria-labelledby]=\"_getStepLabelId(i)\" [attr.aria-expanded]=\"selectedIndex === i\"><ng-container [ngTemplateOutlet]=\"step.content\"></ng-container></div></div>",
                        styles: [".mat-stepper-horizontal,.mat-stepper-vertical{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon,.mat-horizontal-stepper-header .mat-step-icon-not-touched{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon,[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon-not-touched{margin-right:0;margin-left:8px}.mat-vertical-stepper-header{display:flex;align-items:center;padding:24px;max-height:24px}.mat-vertical-stepper-header .mat-step-icon,.mat-vertical-stepper-header .mat-step-icon-not-touched{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon,[dir=rtl] .mat-vertical-stepper-header .mat-step-icon-not-touched{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:'';position:absolute;top:-16px;bottom:-16px;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}"],
                        inputs: ['selectedIndex'],
                        host: {
                            'class': 'mat-stepper-horizontal',
                            'aria-orientation': 'horizontal',
                            'role': 'tablist',
                        },
                        animations: [matStepperAnimations.horizontalStepTransition],
                        providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                    },]
                },
            ];
            return MatHorizontalStepper;
        }(MatStepper));
        var MatVerticalStepper = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatVerticalStepper, _super);

            function MatVerticalStepper(dir, changeDetectorRef) {
                var _this = _super.call(this, dir, changeDetectorRef) || this;
                _this._orientation = 'vertical';
                return _this;
            }

            MatVerticalStepper.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'mat-vertical-stepper',
                        exportAs: 'matVerticalStepper',
                        template: "<div class=\"mat-step\" *ngFor=\"let step of _steps; let i = index; let isLast = last\"><mat-step-header class=\"mat-vertical-stepper-header\" (click)=\"step.select()\" (keydown)=\"_onKeydown($event)\" [tabIndex]=\"_getFocusIndex() == i ? 0 : -1\" [id]=\"_getStepLabelId(i)\" [attr.aria-controls]=\"_getStepContentId(i)\" [attr.aria-selected]=\"selectedIndex === i\" [index]=\"i\" [state]=\"_getIndicatorType(i)\" [label]=\"step.stepLabel || step.label\" [selected]=\"selectedIndex === i\" [active]=\"step.completed || selectedIndex === i || !linear\" [optional]=\"step.optional\" [iconOverrides]=\"_iconOverrides\"></mat-step-header><div class=\"mat-vertical-content-container\" [class.mat-stepper-vertical-line]=\"!isLast\"><div class=\"mat-vertical-stepper-content\" role=\"tabpanel\" [@stepTransition]=\"_getAnimationDirection(i)\" (@stepTransition.done)=\"_animationDone($event)\" [id]=\"_getStepContentId(i)\" [attr.aria-labelledby]=\"_getStepLabelId(i)\" [attr.aria-expanded]=\"selectedIndex === i\"><div class=\"mat-vertical-content\"><ng-container [ngTemplateOutlet]=\"step.content\"></ng-container></div></div></div></div>",
                        styles: [".mat-stepper-horizontal,.mat-stepper-vertical{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon,.mat-horizontal-stepper-header .mat-step-icon-not-touched{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon,[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon-not-touched{margin-right:0;margin-left:8px}.mat-vertical-stepper-header{display:flex;align-items:center;padding:24px;max-height:24px}.mat-vertical-stepper-header .mat-step-icon,.mat-vertical-stepper-header .mat-step-icon-not-touched{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon,[dir=rtl] .mat-vertical-stepper-header .mat-step-icon-not-touched{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:'';position:absolute;top:-16px;bottom:-16px;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}"],
                        inputs: ['selectedIndex'],
                        host: {
                            'class': 'mat-stepper-vertical',
                            'aria-orientation': 'vertical',
                            'role': 'tablist',
                        },
                        animations: [matStepperAnimations.verticalStepTransition],
                        providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                    },]
                },
            ];
            /** @nocollapse */
            MatVerticalStepper.ctorParameters = function () {
                return [
                    {
                        type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]},]
                    },
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],},
                ];
            };
            return MatVerticalStepper;
        }(MatStepper));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Button that moves to the next step in a stepper workflow.
         */
        var MatStepperNext = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatStepperNext, _super);

            function MatStepperNext() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            MatStepperNext.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: 'button[matStepperNext]',
                        host: {
                            '(click)': '_stepper.next()',
                            '[type]': 'type',
                        },
                        inputs: ['type'],
                        providers: [{
                            provide: _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_2__["CdkStepper"],
                            useExisting: MatStepper
                        }]
                    },]
                },
            ];
            return MatStepperNext;
        }(_angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_2__["CdkStepperNext"]));
        /**
         * Button that moves to the previous step in a stepper workflow.
         */
        var MatStepperPrevious = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatStepperPrevious, _super);

            function MatStepperPrevious() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            MatStepperPrevious.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: 'button[matStepperPrevious]',
                        host: {
                            '(click)': '_stepper.previous()',
                            '[type]': 'type',
                        },
                        inputs: ['type'],
                        providers: [{
                            provide: _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_2__["CdkStepper"],
                            useExisting: MatStepper
                        }]
                    },]
                },
            ];
            return MatStepperPrevious;
        }(_angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_2__["CdkStepperPrevious"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatStepperModule = /** @class */ (function () {
            function MatStepperModule() {
            }

            MatStepperModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                        imports: [
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["MatCommonModule"],
                            _angular_common__WEBPACK_IMPORTED_MODULE_10__["CommonModule"],
                            _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_9__["PortalModule"],
                            _angular_material_button__WEBPACK_IMPORTED_MODULE_11__["MatButtonModule"],
                            _angular_cdk_stepper__WEBPACK_IMPORTED_MODULE_2__["CdkStepperModule"],
                            _angular_material_icon__WEBPACK_IMPORTED_MODULE_12__["MatIconModule"],
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["MatRippleModule"],
                        ],
                        exports: [
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["MatCommonModule"],
                            MatHorizontalStepper,
                            MatVerticalStepper,
                            MatStep,
                            MatStepLabel,
                            MatStepper,
                            MatStepperNext,
                            MatStepperPrevious,
                            MatStepHeader,
                            MatStepperIcon,
                        ],
                        declarations: [
                            MatHorizontalStepper,
                            MatVerticalStepper,
                            MatStep,
                            MatStepLabel,
                            MatStepper,
                            MatStepperNext,
                            MatStepperPrevious,
                            MatStepHeader,
                            MatStepperIcon,
                        ],
                        providers: [MatStepperIntl, _angular_material_core__WEBPACK_IMPORTED_MODULE_7__["ErrorStateMatcher"]],
                    },]
                },
            ];
            return MatStepperModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=stepper.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/table.es5.js":
    /*!**********************************************************!*\
  !*** ./node_modules/@angular/material/esm5/table.es5.js ***!
  \**********************************************************/
    /*! exports provided: MatTableModule, MatCellDef, MatHeaderCellDef, MatFooterCellDef, MatColumnDef, MatHeaderCell, MatFooterCell, MatCell, MatTable, MatHeaderRowDef, MatFooterRowDef, MatRowDef, MatHeaderRow, MatFooterRow, MatRow, MatTableDataSource */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTableModule", function () {
            return MatTableModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCellDef", function () {
            return MatCellDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatHeaderCellDef", function () {
            return MatHeaderCellDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatFooterCellDef", function () {
            return MatFooterCellDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatColumnDef", function () {
            return MatColumnDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatHeaderCell", function () {
            return MatHeaderCell;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatFooterCell", function () {
            return MatFooterCell;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatCell", function () {
            return MatCell;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTable", function () {
            return MatTable;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatHeaderRowDef", function () {
            return MatHeaderRowDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatFooterRowDef", function () {
            return MatFooterRowDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatRowDef", function () {
            return MatRowDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatHeaderRow", function () {
            return MatHeaderRow;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatFooterRow", function () {
            return MatFooterRow;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatRow", function () {
            return MatRow;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTableDataSource", function () {
            return MatTableDataSource;
        });
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/table */ "./node_modules/@angular/cdk/esm5/table.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Wrapper for the CdkTable with Material design styles.
         * @template T
         */
        var MatTable = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatTable, _super);
            // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to
            // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a
            // fixed bug.
            // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this
            // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version
            function MatTable(_differs, _changeDetectorRef, _elementRef, role) {
                var _this = _super.call(this, _differs, _changeDetectorRef, _elementRef, role) || this;
                _this._differs = _differs;
                _this._changeDetectorRef = _changeDetectorRef;
                _this._elementRef = _elementRef;
                return _this;
            }

            MatTable.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'mat-table, table[mat-table]',
                        exportAs: 'matTable',
                        template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CDK_TABLE_TEMPLATE"],
                        styles: ["mat-table{display:block}mat-header-row{min-height:56px}mat-footer-row,mat-row{min-height:48px}mat-footer-row,mat-header-row,mat-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-footer-row::after,mat-header-row::after,mat-row::after{display:inline-block;min-height:inherit;content:''}mat-cell:first-child,mat-footer-cell:first-child,mat-header-cell:first-child{padding-left:24px}[dir=rtl] mat-cell:first-child,[dir=rtl] mat-footer-cell:first-child,[dir=rtl] mat-header-cell:first-child{padding-left:0;padding-right:24px}mat-cell:last-child,mat-footer-cell:last-child,mat-header-cell:last-child{padding-right:24px}[dir=rtl] mat-cell:last-child,[dir=rtl] mat-footer-cell:last-child,[dir=rtl] mat-header-cell:last-child{padding-right:0;padding-left:24px}mat-cell,mat-footer-cell,mat-header-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-footer-row,tr.mat-row{height:48px}th.mat-header-cell{text-align:left}td.mat-cell,td.mat-footer-cell,th.mat-header-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}td.mat-cell:first-child,td.mat-footer-cell:first-child,th.mat-header-cell:first-child{padding-left:24px}td.mat-cell:last-child,td.mat-footer-cell:last-child,th.mat-header-cell:last-child{padding-right:24px}"],
                        host: {
                            'class': 'mat-table',
                        },
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                    },]
                },
            ];
            /** @nocollapse */
            MatTable.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"], args: ['role',]},]
                    },
                ];
            };
            return MatTable;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkTable"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Cell definition for the mat-table.
         * Captures the template of a column's data row cell as well as cell-specific properties.
         */
        var MatCellDef = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatCellDef, _super);

            // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329
            function MatCellDef(template) {
                var _this = _super.call(this, template) || this;
                _this.template = template;
                return _this;
            }

            MatCellDef.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: '[matCellDef]',
                        providers: [{
                            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkCellDef"],
                            useExisting: MatCellDef
                        }]
                    },]
                },
            ];
            /** @nocollapse */
            MatCellDef.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],},
                ];
            };
            return MatCellDef;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkCellDef"]));
        /**
         * Header cell definition for the mat-table.
         * Captures the template of a column's header cell and as well as cell-specific properties.
         */
        var MatHeaderCellDef = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatHeaderCellDef, _super);

            // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329
            function MatHeaderCellDef(template) {
                var _this = _super.call(this, template) || this;
                _this.template = template;
                return _this;
            }

            MatHeaderCellDef.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: '[matHeaderCellDef]',
                        providers: [{
                            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkHeaderCellDef"],
                            useExisting: MatHeaderCellDef
                        }]
                    },]
                },
            ];
            /** @nocollapse */
            MatHeaderCellDef.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],},
                ];
            };
            return MatHeaderCellDef;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkHeaderCellDef"]));
        /**
         * Footer cell definition for the mat-table.
         * Captures the template of a column's footer cell and as well as cell-specific properties.
         */
        var MatFooterCellDef = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatFooterCellDef, _super);

            // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329
            function MatFooterCellDef(template) {
                var _this = _super.call(this, template) || this;
                _this.template = template;
                return _this;
            }

            MatFooterCellDef.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: '[matFooterCellDef]',
                        providers: [{
                            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkFooterCellDef"],
                            useExisting: MatFooterCellDef
                        }]
                    },]
                },
            ];
            /** @nocollapse */
            MatFooterCellDef.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],},
                ];
            };
            return MatFooterCellDef;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkFooterCellDef"]));
        /**
         * Column definition for the mat-table.
         * Defines a set of cells available for a table column.
         */
        var MatColumnDef = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatColumnDef, _super);

            function MatColumnDef() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            MatColumnDef.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: '[matColumnDef]',
                        providers: [{
                            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkColumnDef"],
                            useExisting: MatColumnDef
                        }],
                    },]
                },
            ];
            /** @nocollapse */
            MatColumnDef.propDecorators = {
                "name": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"], args: ['matColumnDef',]},],
            };
            return MatColumnDef;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkColumnDef"]));
        /**
         * Header cell template container that adds the right classes and role.
         */
        var MatHeaderCell = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatHeaderCell, _super);

            function MatHeaderCell(columnDef, elementRef) {
                var _this = _super.call(this, columnDef, elementRef) || this;
                elementRef.nativeElement.classList.add("mat-column-" + columnDef.cssClassFriendlyName);
                return _this;
            }

            MatHeaderCell.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: 'mat-header-cell, th[mat-header-cell]',
                        host: {
                            'class': 'mat-header-cell',
                            'role': 'columnheader',
                        },
                    },]
                },
            ];
            /** @nocollapse */
            MatHeaderCell.ctorParameters = function () {
                return [
                    {type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkColumnDef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                ];
            };
            return MatHeaderCell;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkHeaderCell"]));
        /**
         * Footer cell template container that adds the right classes and role.
         */
        var MatFooterCell = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatFooterCell, _super);

            function MatFooterCell(columnDef, elementRef) {
                var _this = _super.call(this, columnDef, elementRef) || this;
                elementRef.nativeElement.classList.add("mat-column-" + columnDef.cssClassFriendlyName);
                return _this;
            }

            MatFooterCell.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: 'mat-footer-cell, td[mat-footer-cell]',
                        host: {
                            'class': 'mat-footer-cell',
                            'role': 'gridcell',
                        },
                    },]
                },
            ];
            /** @nocollapse */
            MatFooterCell.ctorParameters = function () {
                return [
                    {type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkColumnDef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                ];
            };
            return MatFooterCell;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkFooterCell"]));
        /**
         * Cell template container that adds the right classes and role.
         */
        var MatCell = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatCell, _super);

            function MatCell(columnDef, elementRef) {
                var _this = _super.call(this, columnDef, elementRef) || this;
                elementRef.nativeElement.classList.add("mat-column-" + columnDef.cssClassFriendlyName);
                return _this;
            }

            MatCell.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: 'mat-cell, td[mat-cell]',
                        host: {
                            'class': 'mat-cell',
                            'role': 'gridcell',
                        },
                    },]
                },
            ];
            /** @nocollapse */
            MatCell.ctorParameters = function () {
                return [
                    {type: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkColumnDef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],},
                ];
            };
            return MatCell;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkCell"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Header row definition for the mat-table.
         * Captures the header row's template and other header properties such as the columns to display.
         */
        var MatHeaderRowDef = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatHeaderRowDef, _super);

            // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329
            function MatHeaderRowDef(template, _differs) {
                return _super.call(this, template, _differs) || this;
            }

            MatHeaderRowDef.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: '[matHeaderRowDef]',
                        providers: [{
                            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkHeaderRowDef"],
                            useExisting: MatHeaderRowDef
                        }],
                        inputs: ['columns: matHeaderRowDef'],
                    },]
                },
            ];
            /** @nocollapse */
            MatHeaderRowDef.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"],},
                ];
            };
            return MatHeaderRowDef;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkHeaderRowDef"]));
        /**
         * Footer row definition for the mat-table.
         * Captures the footer row's template and other footer properties such as the columns to display.
         */
        var MatFooterRowDef = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatFooterRowDef, _super);

            // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329
            function MatFooterRowDef(template, _differs) {
                return _super.call(this, template, _differs) || this;
            }

            MatFooterRowDef.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: '[matFooterRowDef]',
                        providers: [{
                            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkFooterRowDef"],
                            useExisting: MatFooterRowDef
                        }],
                        inputs: ['columns: matFooterRowDef'],
                    },]
                },
            ];
            /** @nocollapse */
            MatFooterRowDef.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"],},
                ];
            };
            return MatFooterRowDef;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkFooterRowDef"]));
        /**
         * Data row definition for the mat-table.
         * Captures the footer row's template and other footer properties such as the columns to display and
         * a when predicate that describes when this row should be used.
         * @template T
         */
        var MatRowDef = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatRowDef, _super);

            // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329
            function MatRowDef(template, _differs) {
                return _super.call(this, template, _differs) || this;
            }

            MatRowDef.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"], args: [{
                        selector: '[matRowDef]',
                        providers: [{
                            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkRowDef"],
                            useExisting: MatRowDef
                        }],
                        inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],
                    },]
                },
            ];
            /** @nocollapse */
            MatRowDef.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"],},
                ];
            };
            return MatRowDef;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkRowDef"]));
        /**
         * Footer template container that contains the cell outlet. Adds the right class and role.
         */
        var MatHeaderRow = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatHeaderRow, _super);

            function MatHeaderRow() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            MatHeaderRow.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'mat-header-row, tr[mat-header-row]',
                        template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CDK_ROW_TEMPLATE"],
                        host: {
                            'class': 'mat-header-row',
                            'role': 'row',
                        },
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        exportAs: 'matHeaderRow',
                    },]
                },
            ];
            return MatHeaderRow;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkHeaderRow"]));
        /**
         * Footer template container that contains the cell outlet. Adds the right class and role.
         */
        var MatFooterRow = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatFooterRow, _super);

            function MatFooterRow() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            MatFooterRow.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'mat-footer-row, tr[mat-footer-row]',
                        template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CDK_ROW_TEMPLATE"],
                        host: {
                            'class': 'mat-footer-row',
                            'role': 'row',
                        },
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        exportAs: 'matFooterRow',
                    },]
                },
            ];
            return MatFooterRow;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkFooterRow"]));
        /**
         * Data row template container that contains the cell outlet. Adds the right class and role.
         */
        var MatRow = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatRow, _super);

            function MatRow() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            MatRow.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                        selector: 'mat-row, tr[mat-row]',
                        template: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CDK_ROW_TEMPLATE"],
                        host: {
                            'class': 'mat-row',
                            'role': 'row',
                        },
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                        exportAs: 'matRow',
                    },]
                },
            ];
            return MatRow;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkRow"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var /** @type {?} */ EXPORTED_DECLARATIONS = [
            MatTable,
            MatHeaderCellDef,
            MatHeaderRowDef,
            MatColumnDef,
            MatCellDef,
            MatRowDef,
            MatFooterCellDef,
            MatFooterRowDef,
            MatHeaderCell,
            MatCell,
            MatFooterCell,
            MatHeaderRow,
            MatRow,
            MatFooterRow,
        ];
        var MatTableModule = /** @class */ (function () {
            function MatTableModule() {
            }

            MatTableModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                        imports: [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["CdkTableModule"], _angular_common__WEBPACK_IMPORTED_MODULE_3__["CommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_4__["MatCommonModule"]],
                        exports: EXPORTED_DECLARATIONS,
                        declarations: EXPORTED_DECLARATIONS,
                    },]
                },
            ];
            return MatTableModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Data source that accepts a client-side data array and includes native support of filtering,
         * sorting (using MatSort), and pagination (using MatPaginator).
         *
         * Allows for sort customization by overriding sortingDataAccessor, which defines how data
         * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,
         * which defines how row data is converted to a string for filter matching.
         * @template T
         */
        var /**
         * Data source that accepts a client-side data array and includes native support of filtering,
         * sorting (using MatSort), and pagination (using MatPaginator).
         *
         * Allows for sort customization by overriding sortingDataAccessor, which defines how data
         * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,
         * which defines how row data is converted to a string for filter matching.
         * @template T
         */
        MatTableDataSource = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(MatTableDataSource, _super);

            function MatTableDataSource(initialData) {
                if (initialData === void 0) {
                    initialData = [];
                }
                var _this = _super.call(this) || this;
                /**
                 * Stream emitting render data to the table (depends on ordered data changes).
                 */
                _this._renderData = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"]([]);
                /**
                 * Stream that emits when a new filter string is set on the data source.
                 */
                _this._filter = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"]('');
                /**
                 * Data accessor function that is used for accessing data properties for sorting through
                 * the default sortData function.
                 * This default function assumes that the sort header IDs (which defaults to the column name)
                 * matches the data's properties (e.g. column Xyz represents data['Xyz']).
                 * May be set to a custom function for different behavior.
                 * @param data Data object that is being accessed.
                 * @param sortHeaderId The name of the column that represents the data.
                 */
                _this.sortingDataAccessor = function (data, sortHeaderId) {
                    var /** @type {?} */ value = data[sortHeaderId];
                    return Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__["_isNumberValue"])(value) ? Number(value) : value;
                };
                /**
                 * Gets a sorted copy of the data array based on the state of the MatSort. Called
                 * after changes are made to the filtered data or when sort changes are emitted from MatSort.
                 * By default, the function retrieves the active sort and its direction and compares data
                 * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation
                 * of data ordering.
                 * @param data The array of data that should be sorted.
                 * @param sort The connected MatSort that holds the current sort state.
                 */
                _this.sortData = function (data, sort) {
                    var /** @type {?} */ active = sort.active;
                    var /** @type {?} */ direction = sort.direction;
                    if (!active || direction == '') {
                        return data;
                    }
                    return data.sort(function (a, b) {
                        var /** @type {?} */ valueA = _this.sortingDataAccessor(a, active);
                        var /** @type {?} */ valueB = _this.sortingDataAccessor(b, active);
                        // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if
                        // one value exists while the other doesn't. In this case, existing value should come first.
                        // This avoids inconsistent results when comparing values to undefined/null.
                        // If neither value exists, return 0 (equal).
                        var /** @type {?} */ comparatorResult = 0;
                        if (valueA != null && valueB != null) {
                            // Check if one value is greater than the other; if equal, comparatorResult should remain 0.
                            if (valueA > valueB) {
                                comparatorResult = 1;
                            }
                            else if (valueA < valueB) {
                                comparatorResult = -1;
                            }
                        }
                        else if (valueA != null) {
                            comparatorResult = 1;
                        }
                        else if (valueB != null) {
                            comparatorResult = -1;
                        }
                        return comparatorResult * (direction == 'asc' ? 1 : -1);
                    });
                };
                /**
                 * Checks if a data object matches the data source's filter string. By default, each data object
                 * is converted to a string of its properties and returns true if the filter has
                 * at least one occurrence in that string. By default, the filter string has its whitespace
                 * trimmed and the match is case-insensitive. May be overridden for a custom implementation of
                 * filter matching.
                 * @param data Data object used to check against the filter.
                 * @param filter Filter string that has been set on the data source.
                 * @return Whether the filter matches against the data
                 */
                _this.filterPredicate = function (data, filter) {
                    // Transform the data into a lowercase string of all property values.
                    var /** @type {?} */ accumulator = function (currentTerm, key) {
                        return currentTerm + data[key];
                    };
                    var /** @type {?} */ dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();
                    // Transform the filter by converting it to lowercase and removing whitespace.
                    var /** @type {?} */ transformedFilter = filter.trim().toLowerCase();
                    return dataStr.indexOf(transformedFilter) != -1;
                };
                _this._data = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"](initialData);
                _this._updateChangeSubscription();
                return _this;
            }

            Object.defineProperty(MatTableDataSource.prototype, "data", {
                /** Array of data that should be rendered by the table, where each object represents one row. */
                get: /**
                 * Array of data that should be rendered by the table, where each object represents one row.
                 * @return {?}
                 */
                function () {
                    return this._data.value;
                },
                set: /**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    this._data.next(data);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatTableDataSource.prototype, "filter", {
                /**
                 * Filter term that should be used to filter out objects from the data array. To override how
                 * data objects match to this filter string, provide a custom function for filterPredicate.
                 */
                get: /**
                 * Filter term that should be used to filter out objects from the data array. To override how
                 * data objects match to this filter string, provide a custom function for filterPredicate.
                 * @return {?}
                 */
                function () {
                    return this._filter.value;
                },
                set: /**
                 * @param {?} filter
                 * @return {?}
                 */
                function (filter) {
                    this._filter.next(filter);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatTableDataSource.prototype, "sort", {
                /**
                 * Instance of the MatSort directive used by the table to control its sorting. Sort changes
                 * emitted by the MatSort will trigger an update to the table's rendered data.
                 */
                get: /**
                 * Instance of the MatSort directive used by the table to control its sorting. Sort changes
                 * emitted by the MatSort will trigger an update to the table's rendered data.
                 * @return {?}
                 */
                function () {
                    return this._sort;
                },
                set: /**
                 * @param {?} sort
                 * @return {?}
                 */
                function (sort) {
                    this._sort = sort;
                    this._updateChangeSubscription();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatTableDataSource.prototype, "paginator", {
                /**
                 * Instance of the MatPaginator component used by the table to control what page of the data is
                 * displayed. Page changes emitted by the MatPaginator will trigger an update to the
                 * table's rendered data.
                 *
                 * Note that the data source uses the paginator's properties to calculate which page of data
                 * should be displayed. If the paginator receives its properties as template inputs,
                 * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been
                 * initialized before assigning it to this data source.
                 */
                get: /**
                 * Instance of the MatPaginator component used by the table to control what page of the data is
                 * displayed. Page changes emitted by the MatPaginator will trigger an update to the
                 * table's rendered data.
                 *
                 * Note that the data source uses the paginator's properties to calculate which page of data
                 * should be displayed. If the paginator receives its properties as template inputs,
                 * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been
                 * initialized before assigning it to this data source.
                 * @return {?}
                 */
                function () {
                    return this._paginator;
                },
                set: /**
                 * @param {?} paginator
                 * @return {?}
                 */
                function (paginator) {
                    this._paginator = paginator;
                    this._updateChangeSubscription();
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Subscribe to changes that should trigger an update to the table's rendered rows. When the
             * changes occur, process the current state of the filter, sort, and pagination along with
             * the provided base data and send it to the table for rendering.
             */
            /**
             * Subscribe to changes that should trigger an update to the table's rendered rows. When the
             * changes occur, process the current state of the filter, sort, and pagination along with
             * the provided base data and send it to the table for rendering.
             * @return {?}
             */
            MatTableDataSource.prototype._updateChangeSubscription = /**
             * Subscribe to changes that should trigger an update to the table's rendered rows. When the
             * changes occur, process the current state of the filter, sort, and pagination along with
             * the provided base data and send it to the table for rendering.
             * @return {?}
             */
            function () {
                var _this = this;
                // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.
                // The events should emit whenever the component emits a change or initializes, or if no
                // component is provided, a stream with just a null event should be provided.
                // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the
                // pipeline can progress to the next step. Note that the value from these streams are not used,
                // they purely act as a signal to progress in the pipeline.
                var /** @type {?} */ sortChange = this._sort ?
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["merge"])(this._sort.sortChange, this._sort.initialized) :
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])(null);
                var /** @type {?} */ pageChange = this._paginator ?
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["merge"])(this._paginator.page, this._paginator.initialized) :
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])(null);
                if (this._renderChangesSubscription) {
                    this._renderChangesSubscription.unsubscribe();
                }
                var /** @type {?} */ dataStream = this._data;
                // Watch for base data or filter changes to provide a filtered set of data.
                var /** @type {?} */ filteredData = Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["combineLatest"])(dataStream, this._filter)
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["map"])(function (_a) {
                        var data = _a[0];
                        return _this._filterData(data);
                    }));
                // Watch for filtered data or sort changes to provide an ordered set of data.
                var /** @type {?} */ orderedData = Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["combineLatest"])(filteredData, sortChange)
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["map"])(function (_a) {
                        var data = _a[0];
                        return _this._orderData(data);
                    }));
                // Watch for ordered data or page changes to provide a paged set of data.
                var /** @type {?} */ paginatedData = Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["combineLatest"])(orderedData, pageChange)
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["map"])(function (_a) {
                        var data = _a[0];
                        return _this._pageData(data);
                    }));
                // Watched for paged data changes and send the result to the table to render.
                paginatedData.subscribe(function (data) {
                    return _this._renderData.next(data);
                });
            };
            /**
             * Returns a filtered data array where each filter object contains the filter string within
             * the result of the filterTermAccessor function. If no filter is set, returns the data array
             * as provided.
             */
            /**
             * Returns a filtered data array where each filter object contains the filter string within
             * the result of the filterTermAccessor function. If no filter is set, returns the data array
             * as provided.
             * @param {?} data
             * @return {?}
             */
            MatTableDataSource.prototype._filterData = /**
             * Returns a filtered data array where each filter object contains the filter string within
             * the result of the filterTermAccessor function. If no filter is set, returns the data array
             * as provided.
             * @param {?} data
             * @return {?}
             */
            function (data) {
                var _this = this;
                // If there is a filter string, filter out data that does not contain it.
                // Each data object is converted to a string using the function defined by filterTermAccessor.
                // May be overridden for customization.
                this.filteredData =
                    !this.filter ? data : data.filter(function (obj) {
                        return _this.filterPredicate(obj, _this.filter);
                    });
                if (this.paginator) {
                    this._updatePaginator(this.filteredData.length);
                }
                return this.filteredData;
            };
            /**
             * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the
             * data array as provided. Uses the default data accessor for data lookup, unless a
             * sortDataAccessor function is defined.
             */
            /**
             * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the
             * data array as provided. Uses the default data accessor for data lookup, unless a
             * sortDataAccessor function is defined.
             * @param {?} data
             * @return {?}
             */
            MatTableDataSource.prototype._orderData = /**
             * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the
             * data array as provided. Uses the default data accessor for data lookup, unless a
             * sortDataAccessor function is defined.
             * @param {?} data
             * @return {?}
             */
            function (data) {
                // If there is no active sort or direction, return the data without trying to sort.
                if (!this.sort) {
                    return data;
                }
                return this.sortData(data.slice(), this.sort);
            };
            /**
             * Returns a paged splice of the provided data array according to the provided MatPaginator's page
             * index and length. If there is no paginator provided, returns the data array as provided.
             */
            /**
             * Returns a paged splice of the provided data array according to the provided MatPaginator's page
             * index and length. If there is no paginator provided, returns the data array as provided.
             * @param {?} data
             * @return {?}
             */
            MatTableDataSource.prototype._pageData = /**
             * Returns a paged splice of the provided data array according to the provided MatPaginator's page
             * index and length. If there is no paginator provided, returns the data array as provided.
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (!this.paginator) {
                    return data;
                }
                var /** @type {?} */ startIndex = this.paginator.pageIndex * this.paginator.pageSize;
                return data.slice().splice(startIndex, this.paginator.pageSize);
            };
            /**
             * Updates the paginator to reflect the length of the filtered data, and makes sure that the page
             * index does not exceed the paginator's last page. Values are changed in a resolved promise to
             * guard against making property changes within a round of change detection.
             */
            /**
             * Updates the paginator to reflect the length of the filtered data, and makes sure that the page
             * index does not exceed the paginator's last page. Values are changed in a resolved promise to
             * guard against making property changes within a round of change detection.
             * @param {?} filteredDataLength
             * @return {?}
             */
            MatTableDataSource.prototype._updatePaginator = /**
             * Updates the paginator to reflect the length of the filtered data, and makes sure that the page
             * index does not exceed the paginator's last page. Values are changed in a resolved promise to
             * guard against making property changes within a round of change detection.
             * @param {?} filteredDataLength
             * @return {?}
             */
            function (filteredDataLength) {
                var _this = this;
                Promise.resolve().then(function () {
                    if (!_this.paginator) {
                        return;
                    }
                    _this.paginator.length = filteredDataLength;
                    // If the page index is set beyond the page, reduce it to the last page.
                    if (_this.paginator.pageIndex > 0) {
                        var /** @type {?} */ lastPageIndex = Math.ceil(_this.paginator.length / _this.paginator.pageSize) - 1 || 0;
                        _this.paginator.pageIndex = Math.min(_this.paginator.pageIndex, lastPageIndex);
                    }
                });
            };
            /**
             * Used by the MatTable. Called when it connects to the data source.
             * @docs-private
             */
            /**
             * Used by the MatTable. Called when it connects to the data source.
             * \@docs-private
             * @return {?}
             */
            MatTableDataSource.prototype.connect = /**
             * Used by the MatTable. Called when it connects to the data source.
             * \@docs-private
             * @return {?}
             */
            function () {
                return this._renderData;
            };
            /**
             * Used by the MatTable. Called when it is destroyed. No-op.
             * @docs-private
             */
            /**
             * Used by the MatTable. Called when it is destroyed. No-op.
             * \@docs-private
             * @return {?}
             */
            MatTableDataSource.prototype.disconnect = /**
             * Used by the MatTable. Called when it is destroyed. No-op.
             * \@docs-private
             * @return {?}
             */
            function () {
            };
            return MatTableDataSource;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_2__["DataSource"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=table.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/tabs.es5.js":
    /*!*********************************************************!*\
  !*** ./node_modules/@angular/material/esm5/tabs.es5.js ***!
  \*********************************************************/
    /*! exports provided: MatInkBar, _MAT_INK_BAR_POSITIONER, MatTabBody, MatTabBodyPortal, MatTabHeader, MatTabLabelWrapper, MatTab, MatTabLabel, MatTabNav, MatTabLink, MatTabContent, MatTabsModule, MatTabChangeEvent, MatTabGroupBase, _MatTabGroupMixinBase, MatTabGroup, matTabsAnimations, ɵa23, ɵf23, ɵg23, ɵb23, ɵc23, ɵd23, ɵe23, ɵj23, ɵh23, ɵk23, ɵi23 */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatInkBar", function () {
            return MatInkBar;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MAT_INK_BAR_POSITIONER", function () {
            return _MAT_INK_BAR_POSITIONER;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTabBody", function () {
            return MatTabBody;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTabBodyPortal", function () {
            return MatTabBodyPortal;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTabHeader", function () {
            return MatTabHeader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTabLabelWrapper", function () {
            return MatTabLabelWrapper;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTab", function () {
            return MatTab;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTabLabel", function () {
            return MatTabLabel;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTabNav", function () {
            return MatTabNav;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTabLink", function () {
            return MatTabLink;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTabContent", function () {
            return MatTabContent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTabsModule", function () {
            return MatTabsModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTabChangeEvent", function () {
            return MatTabChangeEvent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTabGroupBase", function () {
            return MatTabGroupBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MatTabGroupMixinBase", function () {
            return _MatTabGroupMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTabGroup", function () {
            return MatTabGroup;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "matTabsAnimations", function () {
            return matTabsAnimations;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵa23", function () {
            return _MAT_INK_BAR_POSITIONER_FACTORY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵf23", function () {
            return MatTabBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵg23", function () {
            return _MatTabMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵb23", function () {
            return MatTabHeaderBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵc23", function () {
            return _MatTabHeaderMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵd23", function () {
            return MatTabLabelWrapperBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵe23", function () {
            return _MatTabLabelWrapperMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵj23", function () {
            return MatTabLinkBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵh23", function () {
            return MatTabNavBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵk23", function () {
            return _MatTabLinkMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵi23", function () {
            return _MatTabNavMixinBase;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm5/portal.es5.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var _angular_animations__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm5/animations.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm5/keycodes.es5.js");
        /* harmony import */
        var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm5/scrolling.es5.js");
        /* harmony import */
        var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm5/platform.es5.js");
        /* harmony import */
        var _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/observers */ "./node_modules/@angular/cdk/esm5/observers.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Injection token for the MatInkBar's Positioner.
         */
        var /** @type {?} */ _MAT_INK_BAR_POSITIONER = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('MatInkBarPositioner', {
            providedIn: 'root',
            factory: _MAT_INK_BAR_POSITIONER_FACTORY
        });

        /**
         * The default positioner function for the MatInkBar.
         * \@docs-private
         * @return {?}
         */
        function _MAT_INK_BAR_POSITIONER_FACTORY() {
            var /** @type {?} */ method = function (element) {
                return ({
                    left: element ? (element.offsetLeft || 0) + 'px' : '0',
                    width: element ? (element.offsetWidth || 0) + 'px' : '0',
                });
            };
            return method;
        }

        /**
         * The ink-bar is used to display and animate the line underneath the current active tab label.
         * \@docs-private
         */
        var MatInkBar = /** @class */ (function () {
            function MatInkBar(_elementRef, _ngZone, _inkBarPositioner) {
                this._elementRef = _elementRef;
                this._ngZone = _ngZone;
                this._inkBarPositioner = _inkBarPositioner;
            }

            /**
             * Calculates the styles from the provided element in order to align the ink-bar to that element.
             * Shows the ink bar if previously set as hidden.
             * @param element
             */
            /**
             * Calculates the styles from the provided element in order to align the ink-bar to that element.
             * Shows the ink bar if previously set as hidden.
             * @param {?} element
             * @return {?}
             */
            MatInkBar.prototype.alignToElement = /**
             * Calculates the styles from the provided element in order to align the ink-bar to that element.
             * Shows the ink bar if previously set as hidden.
             * @param {?} element
             * @return {?}
             */
            function (element) {
                var _this = this;
                this.show();
                if (typeof requestAnimationFrame !== 'undefined') {
                    this._ngZone.runOutsideAngular(function () {
                        requestAnimationFrame(function () {
                            return _this._setStyles(element);
                        });
                    });
                }
                else {
                    this._setStyles(element);
                }
            };
            /** Shows the ink bar. */
            /**
             * Shows the ink bar.
             * @return {?}
             */
            MatInkBar.prototype.show = /**
             * Shows the ink bar.
             * @return {?}
             */
            function () {
                this._elementRef.nativeElement.style.visibility = 'visible';
            };
            /** Hides the ink bar. */
            /**
             * Hides the ink bar.
             * @return {?}
             */
            MatInkBar.prototype.hide = /**
             * Hides the ink bar.
             * @return {?}
             */
            function () {
                this._elementRef.nativeElement.style.visibility = 'hidden';
            };
            /**
             * Sets the proper styles to the ink bar element.
             * @param {?} element
             * @return {?}
             */
            MatInkBar.prototype._setStyles = /**
             * Sets the proper styles to the ink bar element.
             * @param {?} element
             * @return {?}
             */
            function (element) {
                var /** @type {?} */ positions = this._inkBarPositioner(element);
                var /** @type {?} */ inkBar = this._elementRef.nativeElement;
                inkBar.style.left = positions.left;
                inkBar.style.width = positions.width;
            };
            MatInkBar.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: 'mat-ink-bar',
                        host: {
                            'class': 'mat-ink-bar',
                        },
                    },]
                },
            ];
            /** @nocollapse */
            MatInkBar.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"],},
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [_MAT_INK_BAR_POSITIONER,]
                        },]
                    },
                ];
            };
            return MatInkBar;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Used to flag tab labels for use with the portal directive
         */
        var MatTabLabel = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatTabLabel, _super);

            function MatTabLabel(templateRef, viewContainerRef) {
                return _super.call(this, templateRef, viewContainerRef) || this;
            }

            MatTabLabel.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[mat-tab-label], [matTabLabel]',
                    },]
                },
            ];
            /** @nocollapse */
            MatTabLabel.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"],},
                ];
            };
            return MatTabLabel;
        }(_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["CdkPortal"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Decorates the `ng-template` tags and reads out the template from it.
         */
        var MatTabContent = /** @class */ (function () {
            function MatTabContent(template) {
                this.template = template;
            }

            MatTabContent.decorators = [
                {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{selector: '[matTabContent]'},]},
            ];
            /** @nocollapse */
            MatTabContent.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],},
                ];
            };
            return MatTabContent;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatTabBase = /** @class */ (function () {
            function MatTabBase() {
            }

            return MatTabBase;
        }());
        var /** @type {?} */ _MatTabMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(MatTabBase);
        var MatTab = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatTab, _super);

            function MatTab(_viewContainerRef) {
                var _this = _super.call(this) || this;
                _this._viewContainerRef = _viewContainerRef;
                /**
                 * The plain text label for the tab, used when there is no template label.
                 */
                _this.textLabel = '';
                /**
                 * The portal that will be the hosted content of the tab
                 */
                _this._contentPortal = null;
                /**
                 * Emits whenever the label changes.
                 */
                _this._labelChange = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                /**
                 * Emits whenever the disable changes
                 */
                _this._disableChange = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                /**
                 * The relatively indexed position where 0 represents the center, negative is left, and positive
                 * represents the right.
                 */
                _this.position = null;
                /**
                 * The initial relatively index origin of the tab if it was created and selected after there
                 * was already a selected tab. Provides context of what position the tab should originate from.
                 */
                _this.origin = null;
                /**
                 * Whether the tab is currently active.
                 */
                _this.isActive = false;
                return _this;
            }

            Object.defineProperty(MatTab.prototype, "content", {
                /** @docs-private */
                get: /**
                 * \@docs-private
                 * @return {?}
                 */
                function () {
                    return this._contentPortal;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @param {?} changes
             * @return {?}
             */
            MatTab.prototype.ngOnChanges = /**
             * @param {?} changes
             * @return {?}
             */
            function (changes) {
                if (changes.hasOwnProperty('textLabel')) {
                    this._labelChange.next();
                }
                if (changes.hasOwnProperty('disabled')) {
                    this._disableChange.next();
                }
            };
            /**
             * @return {?}
             */
            MatTab.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._disableChange.complete();
                this._labelChange.complete();
            };
            /**
             * @return {?}
             */
            MatTab.prototype.ngOnInit = /**
             * @return {?}
             */
            function () {
                this._contentPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["TemplatePortal"](this._explicitContent || this._implicitContent, this._viewContainerRef);
            };
            MatTab.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-tab',
                        template: "<ng-template><ng-content></ng-content></ng-template>",
                        inputs: ['disabled'],
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        exportAs: 'matTab',
                    },]
                },
            ];
            /** @nocollapse */
            MatTab.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"],},
                ];
            };
            MatTab.propDecorators = {
                "templateLabel": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
                    args: [MatTabLabel,]
                },],
                "_explicitContent": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
                    args: [MatTabContent, {read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]},]
                },],
                "_implicitContent": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
                    args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],]
                },],
                "textLabel": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['label',]},],
            };
            return MatTab;
        }(_MatTabMixinBase));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Animations used by the Material tabs.
         */
        var /** @type {?} */ matTabsAnimations = {
            /** Animation translates a tab along the X axis. */
            translateTab: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["trigger"])('translateTab', [
                // Note: transitions to `none` instead of 0, because some browsers might blur the content.
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('center, void, left-origin-center, right-origin-center', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'none'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('left', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translate3d(-100%, 0, 0)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["state"])('right', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translate3d(100%, 0, 0)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('* => left, * => right, left => center, right => center', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])('500ms cubic-bezier(0.35, 0, 0.25, 1)')),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('void => left-origin-center', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translate3d(-100%, 0, 0)'}),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])('500ms cubic-bezier(0.35, 0, 0.25, 1)')
                ]),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["transition"])('void => right-origin-center', [
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["style"])({transform: 'translate3d(100%, 0, 0)'}),
                    Object(_angular_animations__WEBPACK_IMPORTED_MODULE_5__["animate"])('500ms cubic-bezier(0.35, 0, 0.25, 1)')
                ])
            ])
        };

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * The portal host directive for the contents of the tab.
         * \@docs-private
         */
        var MatTabBodyPortal = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatTabBodyPortal, _super);

            function MatTabBodyPortal(componentFactoryResolver, viewContainerRef, _host) {
                var _this = _super.call(this, componentFactoryResolver, viewContainerRef) || this;
                _this._host = _host;
                /**
                 * Subscription to events for when the tab body begins centering.
                 */
                _this._centeringSub = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                /**
                 * Subscription to events for when the tab body finishes leaving from center position.
                 */
                _this._leavingSub = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                return _this;
            }

            /** Set initial visibility or set up subscription for changing visibility. */
            /**
             * Set initial visibility or set up subscription for changing visibility.
             * @return {?}
             */
            MatTabBodyPortal.prototype.ngOnInit = /**
             * Set initial visibility or set up subscription for changing visibility.
             * @return {?}
             */
            function () {
                var _this = this;
                _super.prototype.ngOnInit.call(this);
                this._centeringSub = this._host._beforeCentering
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["startWith"])(this._host._isCenterPosition(this._host._position)))
                    .subscribe(function (isCentering) {
                        if (isCentering && !_this.hasAttached()) {
                            _this.attach(_this._host._content);
                        }
                    });
                this._leavingSub = this._host._afterLeavingCenter.subscribe(function () {
                    _this.detach();
                });
            };
            /** Clean up centering subscription. */
            /**
             * Clean up centering subscription.
             * @return {?}
             */
            MatTabBodyPortal.prototype.ngOnDestroy = /**
             * Clean up centering subscription.
             * @return {?}
             */
            function () {
                _super.prototype.ngOnDestroy.call(this);
                this._centeringSub.unsubscribe();
                this._leavingSub.unsubscribe();
            };
            MatTabBodyPortal.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[matTabBodyHost]'
                    },]
                },
            ];
            /** @nocollapse */
            MatTabBodyPortal.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"],},
                    {
                        type: MatTabBody,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
                                return MatTabBody;
                            }),]
                        },]
                    },
                ];
            };
            return MatTabBodyPortal;
        }(_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["CdkPortalOutlet"]));
        /**
         * Wrapper for the contents of a tab.
         * \@docs-private
         */
        var MatTabBody = /** @class */ (function () {
            function MatTabBody(_elementRef, _dir) {
                this._elementRef = _elementRef;
                this._dir = _dir;
                /**
                 * Event emitted when the tab begins to animate towards the center as the active tab.
                 */
                this._onCentering = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Event emitted before the centering of the tab begins.
                 */
                this._beforeCentering = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Event emitted before the centering of the tab begins.
                 */
                this._afterLeavingCenter = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Event emitted when the tab completes its animation towards the center.
                 */
                this._onCentered = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"](true);
            }

            Object.defineProperty(MatTabBody.prototype, "position", {
                set: /**
                 * The shifted index position of the tab body, where zero represents the active center tab.
                 * @param {?} position
                 * @return {?}
                 */
                function (position) {
                    if (position < 0) {
                        this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';
                    }
                    else if (position > 0) {
                        this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';
                    }
                    else {
                        this._position = 'center';
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatTabBody.prototype, "origin", {
                set: /**
                 * The origin position from which this tab should appear when it is centered into view.
                 * @param {?} origin
                 * @return {?}
                 */
                function (origin) {
                    if (origin == null) {
                        return;
                    }
                    var /** @type {?} */ dir = this._getLayoutDirection();
                    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {
                        this._origin = 'left';
                    }
                    else {
                        this._origin = 'right';
                    }
                },
                enumerable: true,
                configurable: true
            });
            /**
             * After initialized, check if the content is centered and has an origin. If so, set the
             * special position states that transition the tab from the left or right before centering.
             */
            /**
             * After initialized, check if the content is centered and has an origin. If so, set the
             * special position states that transition the tab from the left or right before centering.
             * @return {?}
             */
            MatTabBody.prototype.ngOnInit = /**
             * After initialized, check if the content is centered and has an origin. If so, set the
             * special position states that transition the tab from the left or right before centering.
             * @return {?}
             */
            function () {
                if (this._position == 'center' && this._origin) {
                    this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';
                }
            };
            /**
             * @param {?} e
             * @return {?}
             */
            MatTabBody.prototype._onTranslateTabStarted = /**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                var /** @type {?} */ isCentering = this._isCenterPosition(e.toState);
                this._beforeCentering.emit(isCentering);
                if (isCentering) {
                    this._onCentering.emit(this._elementRef.nativeElement.clientHeight);
                }
            };
            /**
             * @param {?} e
             * @return {?}
             */
            MatTabBody.prototype._onTranslateTabComplete = /**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                // If the transition to the center is complete, emit an event.
                if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {
                    this._onCentered.emit();
                }
                if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {
                    this._afterLeavingCenter.emit();
                }
            };
            /** The text direction of the containing app. */
            /**
             * The text direction of the containing app.
             * @return {?}
             */
            MatTabBody.prototype._getLayoutDirection = /**
             * The text direction of the containing app.
             * @return {?}
             */
            function () {
                return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
            };
            /** Whether the provided position state is considered center, regardless of origin. */
            /**
             * Whether the provided position state is considered center, regardless of origin.
             * @param {?} position
             * @return {?}
             */
            MatTabBody.prototype._isCenterPosition = /**
             * Whether the provided position state is considered center, regardless of origin.
             * @param {?} position
             * @return {?}
             */
            function (position) {
                return position == 'center' ||
                    position == 'left-origin-center' ||
                    position == 'right-origin-center';
            };
            MatTabBody.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-tab-body',
                        template: "<div class=\"mat-tab-body-content\" #content [@translateTab]=\"_position\" (@translateTab.start)=\"_onTranslateTabStarted($event)\" (@translateTab.done)=\"_onTranslateTabComplete($event)\"><ng-template matTabBodyHost></ng-template></div>",
                        styles: [".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}"],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        animations: [matTabsAnimations.translateTab],
                        host: {
                            'class': 'mat-tab-body',
                        },
                    },]
                },
            ];
            /** @nocollapse */
            MatTabBody.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {
                        type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                ];
            };
            MatTabBody.propDecorators = {
                "_onCentering": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "_beforeCentering": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "_afterLeavingCenter": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "_onCentered": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "_portalHost": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
                    args: [_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["PortalHostDirective"],]
                },],
                "_content": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['content',]},],
                "position": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "origin": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
            };
            return MatTabBody;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatTabLabelWrapperBase = /** @class */ (function () {
            function MatTabLabelWrapperBase() {
            }

            return MatTabLabelWrapperBase;
        }());
        var /** @type {?} */ _MatTabLabelWrapperMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(MatTabLabelWrapperBase);
        /**
         * Used in the `mat-tab-group` view to display tab labels.
         * \@docs-private
         */
        var MatTabLabelWrapper = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatTabLabelWrapper, _super);

            function MatTabLabelWrapper(elementRef) {
                var _this = _super.call(this) || this;
                _this.elementRef = elementRef;
                return _this;
            }

            /** Sets focus on the wrapper element */
            /**
             * Sets focus on the wrapper element
             * @return {?}
             */
            MatTabLabelWrapper.prototype.focus = /**
             * Sets focus on the wrapper element
             * @return {?}
             */
            function () {
                this.elementRef.nativeElement.focus();
            };
            /**
             * @return {?}
             */
            MatTabLabelWrapper.prototype.getOffsetLeft = /**
             * @return {?}
             */
            function () {
                return this.elementRef.nativeElement.offsetLeft;
            };
            /**
             * @return {?}
             */
            MatTabLabelWrapper.prototype.getOffsetWidth = /**
             * @return {?}
             */
            function () {
                return this.elementRef.nativeElement.offsetWidth;
            };
            MatTabLabelWrapper.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[matTabLabelWrapper]',
                        inputs: ['disabled'],
                        host: {
                            '[class.mat-tab-disabled]': 'disabled'
                        }
                    },]
                },
            ];
            /** @nocollapse */
            MatTabLabelWrapper.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                ];
            };
            return MatTabLabelWrapper;
        }(_MatTabLabelWrapperMixinBase));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * The distance in pixels that will be overshot when scrolling a tab label into view. This helps
         * provide a small affordance to the label next to it.
         */
        var /** @type {?} */ EXAGGERATED_OVERSCROLL = 60;
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatTabHeaderBase = /** @class */ (function () {
            function MatTabHeaderBase() {
            }

            return MatTabHeaderBase;
        }());
        var /** @type {?} */ _MatTabHeaderMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisableRipple"])(MatTabHeaderBase);
        /**
         * The header of the tab group which displays a list of all the tabs in the tab group. Includes
         * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the
         * width of the header container, then arrows will be displayed to allow the user to scroll
         * left and right across the header.
         * \@docs-private
         */
        var MatTabHeader = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatTabHeader, _super);

            function MatTabHeader(_elementRef, _changeDetectorRef, _viewportRuler, _dir) {
                var _this = _super.call(this) || this;
                _this._elementRef = _elementRef;
                _this._changeDetectorRef = _changeDetectorRef;
                _this._viewportRuler = _viewportRuler;
                _this._dir = _dir;
                /**
                 * The tab index that is focused.
                 */
                _this._focusIndex = 0;
                /**
                 * The distance in pixels that the tab labels should be translated to the left.
                 */
                _this._scrollDistance = 0;
                /**
                 * Whether the header should scroll to the selected index after the view has been checked.
                 */
                _this._selectedIndexChanged = false;
                /**
                 * Combines listeners that will re-align the ink bar whenever they're invoked.
                 */
                _this._realignInkBar = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                /**
                 * Whether the controls for pagination should be displayed
                 */
                _this._showPaginationControls = false;
                /**
                 * Whether the tab list can be scrolled more towards the end of the tab label list.
                 */
                _this._disableScrollAfter = true;
                /**
                 * Whether the tab list can be scrolled more towards the beginning of the tab label list.
                 */
                _this._disableScrollBefore = true;
                _this._selectedIndex = 0;
                /**
                 * Event emitted when the option is selected.
                 */
                _this.selectFocusedIndex = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Event emitted when a label is focused.
                 */
                _this.indexFocused = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                return _this;
            }

            Object.defineProperty(MatTabHeader.prototype, "selectedIndex", {
                get: /**
                 * The index of the active tab.
                 * @return {?}
                 */
                function () {
                    return this._selectedIndex;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    value = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceNumberProperty"])(value);
                    this._selectedIndexChanged = this._selectedIndex != value;
                    this._selectedIndex = value;
                    this._focusIndex = value;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatTabHeader.prototype.ngAfterContentChecked = /**
             * @return {?}
             */
            function () {
                // If the number of tab labels have changed, check if scrolling should be enabled
                if (this._tabLabelCount != this._labelWrappers.length) {
                    this._updatePagination();
                    this._tabLabelCount = this._labelWrappers.length;
                    this._changeDetectorRef.markForCheck();
                }
                // If the selected index has changed, scroll to the label and check if the scrolling controls
                // should be disabled.
                if (this._selectedIndexChanged) {
                    this._scrollToLabel(this._selectedIndex);
                    this._checkScrollingControls();
                    this._alignInkBarToSelectedTab();
                    this._selectedIndexChanged = false;
                    this._changeDetectorRef.markForCheck();
                }
                // If the scroll distance has been changed (tab selected, focused, scroll controls activated),
                // then translate the header to reflect this.
                if (this._scrollDistanceChanged) {
                    this._updateTabScrollPosition();
                    this._scrollDistanceChanged = false;
                    this._changeDetectorRef.markForCheck();
                }
            };
            /**
             * @param {?} event
             * @return {?}
             */
            MatTabHeader.prototype._handleKeydown = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                switch (event.keyCode) {
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["RIGHT_ARROW"]:
                        this._focusNextTab();
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["LEFT_ARROW"]:
                        this._focusPreviousTab();
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["HOME"]:
                        this._focusFirstTab();
                        event.preventDefault();
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["END"]:
                        this._focusLastTab();
                        event.preventDefault();
                        break;
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["ENTER"]:
                    case _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_9__["SPACE"]:
                        this.selectFocusedIndex.emit(this.focusIndex);
                        event.preventDefault();
                        break;
                }
            };
            /**
             * Aligns the ink bar to the selected tab on load.
             */
            /**
             * Aligns the ink bar to the selected tab on load.
             * @return {?}
             */
            MatTabHeader.prototype.ngAfterContentInit = /**
             * Aligns the ink bar to the selected tab on load.
             * @return {?}
             */
            function () {
                var _this = this;
                var /** @type {?} */ dirChange = this._dir ? this._dir.change : Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])(null);
                var /** @type {?} */ resize = this._viewportRuler.change(150);
                var /** @type {?} */ realign = function () {
                    _this._updatePagination();
                    _this._alignInkBarToSelectedTab();
                };
                // Defer the first call in order to allow for slower browsers to lay out the elements.
                // This helps in cases where the user lands directly on a page with paginated tabs.
                typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();
                this._realignInkBar = Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["merge"])(dirChange, resize).subscribe(realign);
            };
            /**
             * @return {?}
             */
            MatTabHeader.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._realignInkBar.unsubscribe();
            };
            /**
             * Callback for when the MutationObserver detects that the content has changed.
             */
            /**
             * Callback for when the MutationObserver detects that the content has changed.
             * @return {?}
             */
            MatTabHeader.prototype._onContentChanges = /**
             * Callback for when the MutationObserver detects that the content has changed.
             * @return {?}
             */
            function () {
                this._updatePagination();
                this._alignInkBarToSelectedTab();
                this._changeDetectorRef.markForCheck();
            };
            /**
             * Updating the view whether pagination should be enabled or not
             */
            /**
             * Updating the view whether pagination should be enabled or not
             * @return {?}
             */
            MatTabHeader.prototype._updatePagination = /**
             * Updating the view whether pagination should be enabled or not
             * @return {?}
             */
            function () {
                this._checkPaginationEnabled();
                this._checkScrollingControls();
                this._updateTabScrollPosition();
            };
            Object.defineProperty(MatTabHeader.prototype, "focusIndex", {
                /** Tracks which element has focus; used for keyboard navigation */
                get: /**
                 * Tracks which element has focus; used for keyboard navigation
                 * @return {?}
                 */
                function () {
                    return this._focusIndex;
                },
                /** When the focus index is set, we must manually send focus to the correct label */
                set: /**
                 * When the focus index is set, we must manually send focus to the correct label
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (!this._isValidIndex(value) || this._focusIndex == value) {
                        return;
                    }
                    this._focusIndex = value;
                    this.indexFocused.emit(value);
                    this._setTabFocus(value);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is
             * providing a valid index and return true.
             */
            /**
             * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is
             * providing a valid index and return true.
             * @param {?} index
             * @return {?}
             */
            MatTabHeader.prototype._isValidIndex = /**
             * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is
             * providing a valid index and return true.
             * @param {?} index
             * @return {?}
             */
            function (index) {
                if (!this._labelWrappers) {
                    return true;
                }
                var /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;
                return !!tab && !tab.disabled;
            };
            /**
             * Sets focus on the HTML element for the label wrapper and scrolls it into the view if
             * scrolling is enabled.
             */
            /**
             * Sets focus on the HTML element for the label wrapper and scrolls it into the view if
             * scrolling is enabled.
             * @param {?} tabIndex
             * @return {?}
             */
            MatTabHeader.prototype._setTabFocus = /**
             * Sets focus on the HTML element for the label wrapper and scrolls it into the view if
             * scrolling is enabled.
             * @param {?} tabIndex
             * @return {?}
             */
            function (tabIndex) {
                if (this._showPaginationControls) {
                    this._scrollToLabel(tabIndex);
                }
                if (this._labelWrappers && this._labelWrappers.length) {
                    this._labelWrappers.toArray()[tabIndex].focus();
                    // Do not let the browser manage scrolling to focus the element, this will be handled
                    // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width
                    // should be the full width minus the offset width.
                    var /** @type {?} */ containerEl = this._tabListContainer.nativeElement;
                    var /** @type {?} */ dir = this._getLayoutDirection();
                    if (dir == 'ltr') {
                        containerEl.scrollLeft = 0;
                    }
                    else {
                        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;
                    }
                }
            };
            /**
             * Moves the focus towards the beginning or the end of the list depending on the offset provided.
             * Valid offsets are 1 and -1.
             */
            /**
             * Moves the focus towards the beginning or the end of the list depending on the offset provided.
             * Valid offsets are 1 and -1.
             * @param {?} offset
             * @return {?}
             */
            MatTabHeader.prototype._moveFocus = /**
             * Moves the focus towards the beginning or the end of the list depending on the offset provided.
             * Valid offsets are 1 and -1.
             * @param {?} offset
             * @return {?}
             */
            function (offset) {
                if (this._labelWrappers) {
                    var /** @type {?} */ tabs = this._labelWrappers.toArray();
                    for (var /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {
                        if (this._isValidIndex(i)) {
                            this.focusIndex = i;
                            return;
                        }
                    }
                }
            };
            /** Increment the focus index by 1 until a valid tab is found. */
            /**
             * Increment the focus index by 1 until a valid tab is found.
             * @return {?}
             */
            MatTabHeader.prototype._focusNextTab = /**
             * Increment the focus index by 1 until a valid tab is found.
             * @return {?}
             */
            function () {
                this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);
            };
            /** Decrement the focus index by 1 until a valid tab is found. */
            /**
             * Decrement the focus index by 1 until a valid tab is found.
             * @return {?}
             */
            MatTabHeader.prototype._focusPreviousTab = /**
             * Decrement the focus index by 1 until a valid tab is found.
             * @return {?}
             */
            function () {
                this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);
            };
            /**
             * Focuses the first tab.
             * @return {?}
             */
            MatTabHeader.prototype._focusFirstTab = /**
             * Focuses the first tab.
             * @return {?}
             */
            function () {
                for (var /** @type {?} */ i = 0; i < this._labelWrappers.length; i++) {
                    if (this._isValidIndex(i)) {
                        this.focusIndex = i;
                        break;
                    }
                }
            };
            /**
             * Focuses the last tab.
             * @return {?}
             */
            MatTabHeader.prototype._focusLastTab = /**
             * Focuses the last tab.
             * @return {?}
             */
            function () {
                for (var /** @type {?} */ i = this._labelWrappers.length - 1; i > -1; i--) {
                    if (this._isValidIndex(i)) {
                        this.focusIndex = i;
                        break;
                    }
                }
            };
            /** The layout direction of the containing app. */
            /**
             * The layout direction of the containing app.
             * @return {?}
             */
            MatTabHeader.prototype._getLayoutDirection = /**
             * The layout direction of the containing app.
             * @return {?}
             */
            function () {
                return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
            };
            /** Performs the CSS transformation on the tab list that will cause the list to scroll. */
            /**
             * Performs the CSS transformation on the tab list that will cause the list to scroll.
             * @return {?}
             */
            MatTabHeader.prototype._updateTabScrollPosition = /**
             * Performs the CSS transformation on the tab list that will cause the list to scroll.
             * @return {?}
             */
            function () {
                var /** @type {?} */ scrollDistance = this.scrollDistance;
                var /** @type {?} */ translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;
                this._tabList.nativeElement.style.transform = "translate3d(" + translateX + "px, 0, 0)";
            };
            Object.defineProperty(MatTabHeader.prototype, "scrollDistance", {
                /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */
                get: /**
                 * Sets the distance in pixels that the tab header should be transformed in the X-axis.
                 * @return {?}
                 */
                function () {
                    return this._scrollDistance;
                },
                set: /**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));
                    // Mark that the scroll distance has changed so that after the view is checked, the CSS
                    // transformation can move the header.
                    this._scrollDistanceChanged = true;
                    this._checkScrollingControls();
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or
             * the end of the list, respectively). The distance to scroll is computed to be a third of the
             * length of the tab list view window.
             *
             * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
             * should be called sparingly.
             */
            /**
             * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or
             * the end of the list, respectively). The distance to scroll is computed to be a third of the
             * length of the tab list view window.
             *
             * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
             * should be called sparingly.
             * @param {?} scrollDir
             * @return {?}
             */
            MatTabHeader.prototype._scrollHeader = /**
             * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or
             * the end of the list, respectively). The distance to scroll is computed to be a third of the
             * length of the tab list view window.
             *
             * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
             * should be called sparingly.
             * @param {?} scrollDir
             * @return {?}
             */
            function (scrollDir) {
                var /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;
                // Move the scroll distance one-third the length of the tab list's viewport.
                this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;
            };
            /**
             * Moves the tab list such that the desired tab label (marked by index) is moved into view.
             *
             * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
             * should be called sparingly.
             */
            /**
             * Moves the tab list such that the desired tab label (marked by index) is moved into view.
             *
             * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
             * should be called sparingly.
             * @param {?} labelIndex
             * @return {?}
             */
            MatTabHeader.prototype._scrollToLabel = /**
             * Moves the tab list such that the desired tab label (marked by index) is moved into view.
             *
             * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
             * should be called sparingly.
             * @param {?} labelIndex
             * @return {?}
             */
            function (labelIndex) {
                var /** @type {?} */ selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;
                if (!selectedLabel) {
                    return;
                }
                // The view length is the visible width of the tab labels.
                var /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;
                var /** @type {?} */ labelBeforePos, /** @type {?} */ labelAfterPos;
                if (this._getLayoutDirection() == 'ltr') {
                    labelBeforePos = selectedLabel.getOffsetLeft();
                    labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();
                }
                else {
                    labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();
                    labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();
                }
                var /** @type {?} */ beforeVisiblePos = this.scrollDistance;
                var /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;
                if (labelBeforePos < beforeVisiblePos) {
                    // Scroll header to move label to the before direction
                    this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;
                }
                else if (labelAfterPos > afterVisiblePos) {
                    // Scroll header to move label to the after direction
                    this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;
                }
            };
            /**
             * Evaluate whether the pagination controls should be displayed. If the scroll width of the
             * tab list is wider than the size of the header container, then the pagination controls should
             * be shown.
             *
             * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
             * should be called sparingly.
             */
            /**
             * Evaluate whether the pagination controls should be displayed. If the scroll width of the
             * tab list is wider than the size of the header container, then the pagination controls should
             * be shown.
             *
             * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
             * should be called sparingly.
             * @return {?}
             */
            MatTabHeader.prototype._checkPaginationEnabled = /**
             * Evaluate whether the pagination controls should be displayed. If the scroll width of the
             * tab list is wider than the size of the header container, then the pagination controls should
             * be shown.
             *
             * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
             * should be called sparingly.
             * @return {?}
             */
            function () {
                var /** @type {?} */ isEnabled = this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;
                if (!isEnabled) {
                    this.scrollDistance = 0;
                }
                if (isEnabled !== this._showPaginationControls) {
                    this._changeDetectorRef.markForCheck();
                }
                this._showPaginationControls = isEnabled;
            };
            /**
             * Evaluate whether the before and after controls should be enabled or disabled.
             * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the
             * before button. If the header is at the end of the list (scroll distance is equal to the
             * maximum distance we can scroll), then disable the after button.
             *
             * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
             * should be called sparingly.
             */
            /**
             * Evaluate whether the before and after controls should be enabled or disabled.
             * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the
             * before button. If the header is at the end of the list (scroll distance is equal to the
             * maximum distance we can scroll), then disable the after button.
             *
             * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
             * should be called sparingly.
             * @return {?}
             */
            MatTabHeader.prototype._checkScrollingControls = /**
             * Evaluate whether the before and after controls should be enabled or disabled.
             * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the
             * before button. If the header is at the end of the list (scroll distance is equal to the
             * maximum distance we can scroll), then disable the after button.
             *
             * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
             * should be called sparingly.
             * @return {?}
             */
            function () {
                // Check if the pagination arrows should be activated.
                this._disableScrollBefore = this.scrollDistance == 0;
                this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();
                this._changeDetectorRef.markForCheck();
            };
            /**
             * Determines what is the maximum length in pixels that can be set for the scroll distance. This
             * is equal to the difference in width between the tab list container and tab header container.
             *
             * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
             * should be called sparingly.
             */
            /**
             * Determines what is the maximum length in pixels that can be set for the scroll distance. This
             * is equal to the difference in width between the tab list container and tab header container.
             *
             * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
             * should be called sparingly.
             * @return {?}
             */
            MatTabHeader.prototype._getMaxScrollDistance = /**
             * Determines what is the maximum length in pixels that can be set for the scroll distance. This
             * is equal to the difference in width between the tab list container and tab header container.
             *
             * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
             * should be called sparingly.
             * @return {?}
             */
            function () {
                var /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;
                var /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;
                return (lengthOfTabList - viewLength) || 0;
            };
            /** Tells the ink-bar to align itself to the current label wrapper */
            /**
             * Tells the ink-bar to align itself to the current label wrapper
             * @return {?}
             */
            MatTabHeader.prototype._alignInkBarToSelectedTab = /**
             * Tells the ink-bar to align itself to the current label wrapper
             * @return {?}
             */
            function () {
                var /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?
                    this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :
                    null;
                this._inkBar.alignToElement(selectedLabelWrapper);
            };
            MatTabHeader.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-tab-header',
                        template: "<div class=\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\" aria-hidden=\"true\" mat-ripple [matRippleDisabled]=\"_disableScrollBefore || disableRipple\" [class.mat-tab-header-pagination-disabled]=\"_disableScrollBefore\" (click)=\"_scrollHeader('before')\"><div class=\"mat-tab-header-pagination-chevron\"></div></div><div class=\"mat-tab-label-container\" #tabListContainer (keydown)=\"_handleKeydown($event)\"><div class=\"mat-tab-list\" #tabList role=\"tablist\" (cdkObserveContent)=\"_onContentChanges()\"><div class=\"mat-tab-labels\"><ng-content></ng-content></div><mat-ink-bar></mat-ink-bar></div></div><div class=\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\" aria-hidden=\"true\" mat-ripple [matRippleDisabled]=\"_disableScrollAfter || disableRipple\" [class.mat-tab-header-pagination-disabled]=\"_disableScrollAfter\" (click)=\"_scrollHeader('after')\"><div class=\"mat-tab-header-pagination-chevron\"></div></div>",
                        styles: [".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.mat-tab-label.mat-tab-disabled{cursor:default}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (max-width:599px){.mat-tab-label{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media screen and (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-header-pagination{position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-tab-labels{display:flex}"],
                        inputs: ['disableRipple'],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        host: {
                            'class': 'mat-tab-header',
                            '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',
                            '[class.mat-tab-header-rtl]': "_getLayoutDirection() == 'rtl'",
                        },
                    },]
                },
            ];
            /** @nocollapse */
            MatTabHeader.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"],},
                    {type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_10__["ViewportRuler"],},
                    {
                        type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                ];
            };
            MatTabHeader.propDecorators = {
                "_labelWrappers": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"],
                    args: [MatTabLabelWrapper,]
                },],
                "_inkBar": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [MatInkBar,]},],
                "_tabListContainer": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
                    args: ['tabListContainer',]
                },],
                "_tabList": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['tabList',]},],
                "selectedIndex": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selectFocusedIndex": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "indexFocused": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
            };
            return MatTabHeader;
        }(_MatTabHeaderMixinBase));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Used to generate unique ID's for each tab component
         */
        var /** @type {?} */ nextId = 0;
        /**
         * A simple change event emitted on focus or selection changes.
         */
        var /**
         * A simple change event emitted on focus or selection changes.
         */
        MatTabChangeEvent = /** @class */ (function () {
            function MatTabChangeEvent() {
            }

            return MatTabChangeEvent;
        }());
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatTabGroupBase = /** @class */ (function () {
            function MatTabGroupBase(_elementRef) {
                this._elementRef = _elementRef;
            }

            return MatTabGroupBase;
        }());
        var /** @type {?} */ _MatTabGroupMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisableRipple"])(MatTabGroupBase), 'primary');
        /**
         * Material design tab-group component.  Supports basic tab pairs (label + content) and includes
         * animated ink-bar, keyboard navigation, and screen reader.
         * See: https://material.io/design/components/tabs.html
         */
        var MatTabGroup = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatTabGroup, _super);

            function MatTabGroup(elementRef, _changeDetectorRef) {
                var _this = _super.call(this, elementRef) || this;
                _this._changeDetectorRef = _changeDetectorRef;
                /**
                 * The tab index that should be selected after the content has been checked.
                 */
                _this._indexToSelect = 0;
                /**
                 * Snapshot of the height of the tab body wrapper before another tab is activated.
                 */
                _this._tabBodyWrapperHeight = 0;
                /**
                 * Subscription to tabs being added/removed.
                 */
                _this._tabsSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                /**
                 * Subscription to changes in the tab labels.
                 */
                _this._tabLabelSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["Subscription"].EMPTY;
                _this._dynamicHeight = false;
                _this._selectedIndex = null;
                /**
                 * Position of the tab header.
                 */
                _this.headerPosition = 'above';
                /**
                 * Output to enable support for two-way binding on `[(selectedIndex)]`
                 */
                _this.selectedIndexChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Event emitted when focus has changed within a tab group.
                 */
                _this.focusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Event emitted when the body animation has completed
                 */
                _this.animationDone = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
                /**
                 * Event emitted when the tab selection has changed.
                 */
                _this.selectedTabChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"](true);
                _this._groupId = nextId++;
                return _this;
            }

            Object.defineProperty(MatTabGroup.prototype, "dynamicHeight", {
                get: /**
                 * Whether the tab group should grow to the size of the active tab.
                 * @return {?}
                 */
                function () {
                    return this._dynamicHeight;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._dynamicHeight = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceBooleanProperty"])(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatTabGroup.prototype, "selectedIndex", {
                get: /**
                 * The index of the active tab.
                 * @return {?}
                 */
                function () {
                    return this._selectedIndex;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._indexToSelect = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_8__["coerceNumberProperty"])(value, null);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatTabGroup.prototype, "backgroundColor", {
                get: /**
                 * Background color of the tab group.
                 * @return {?}
                 */
                function () {
                    return this._backgroundColor;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    var /** @type {?} */ nativeElement = this._elementRef.nativeElement;
                    nativeElement.classList.remove("mat-background-" + this.backgroundColor);
                    if (value) {
                        nativeElement.classList.add("mat-background-" + value);
                    }
                    this._backgroundColor = value;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * After the content is checked, this component knows what tabs have been defined
             * and what the selected index should be. This is where we can know exactly what position
             * each tab should be in according to the new selected index, and additionally we know how
             * a new selected tab should transition in (from the left or right).
             */
            /**
             * After the content is checked, this component knows what tabs have been defined
             * and what the selected index should be. This is where we can know exactly what position
             * each tab should be in according to the new selected index, and additionally we know how
             * a new selected tab should transition in (from the left or right).
             * @return {?}
             */
            MatTabGroup.prototype.ngAfterContentChecked = /**
             * After the content is checked, this component knows what tabs have been defined
             * and what the selected index should be. This is where we can know exactly what position
             * each tab should be in according to the new selected index, and additionally we know how
             * a new selected tab should transition in (from the left or right).
             * @return {?}
             */
            function () {
                var _this = this;
                // Clamp the next selected index to the boundsof 0 and the tabs length.
                // Note the `|| 0`, which ensures that values like NaN can't get through
                // and which would otherwise throw the component into an infinite loop
                // (since Math.max(NaN, 0) === NaN).
                var /** @type {?} */ indexToSelect = this._indexToSelect =
                    Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));
                // If there is a change in selected index, emit a change event. Should not trigger if
                // the selected index has not yet been initialized.
                if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {
                    var /** @type {?} */ tabChangeEvent = this._createChangeEvent(indexToSelect);
                    this.selectedTabChange.emit(tabChangeEvent);
                    // Emitting this value after change detection has run
                    // since the checked content may contain this variable'
                    Promise.resolve().then(function () {
                        return _this.selectedIndexChange.emit(indexToSelect);
                    });
                }
                // Setup the position for each tab and optionally setup an origin on the next selected tab.
                this._tabs.forEach(function (tab, index) {
                    tab.position = index - indexToSelect;
                    tab.isActive = index === indexToSelect;
                    // If there is already a selected tab, then set up an origin for the next selected tab
                    // if it doesn't have one already.
                    if (_this._selectedIndex != null && tab.position == 0 && !tab.origin) {
                        tab.origin = indexToSelect - _this._selectedIndex;
                    }
                });
                if (this._selectedIndex !== indexToSelect) {
                    this._selectedIndex = indexToSelect;
                    this._changeDetectorRef.markForCheck();
                }
            };
            /**
             * @return {?}
             */
            MatTabGroup.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                var _this = this;
                this._subscribeToTabLabels();
                // Subscribe to changes in the amount of tabs, in order to be
                // able to re-render the content as new tabs are added or removed.
                this._tabsSubscription = this._tabs.changes.subscribe(function () {
                    _this._subscribeToTabLabels();
                    _this._changeDetectorRef.markForCheck();
                });
            };
            /**
             * @return {?}
             */
            MatTabGroup.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._tabsSubscription.unsubscribe();
                this._tabLabelSubscription.unsubscribe();
            };
            /** Re-aligns the ink bar to the selected tab element. */
            /**
             * Re-aligns the ink bar to the selected tab element.
             * @return {?}
             */
            MatTabGroup.prototype.realignInkBar = /**
             * Re-aligns the ink bar to the selected tab element.
             * @return {?}
             */
            function () {
                if (this._tabHeader) {
                    this._tabHeader._alignInkBarToSelectedTab();
                }
            };
            /**
             * @param {?} index
             * @return {?}
             */
            MatTabGroup.prototype._focusChanged = /**
             * @param {?} index
             * @return {?}
             */
            function (index) {
                this.focusChange.emit(this._createChangeEvent(index));
            };
            /**
             * @param {?} index
             * @return {?}
             */
            MatTabGroup.prototype._createChangeEvent = /**
             * @param {?} index
             * @return {?}
             */
            function (index) {
                var /** @type {?} */ event = new MatTabChangeEvent;
                event.index = index;
                if (this._tabs && this._tabs.length) {
                    event.tab = this._tabs.toArray()[index];
                }
                return event;
            };
            /**
             * Subscribes to changes in the tab labels. This is needed, because the \@Input for the label is
             * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the
             * binding to be updated, we need to subscribe to changes in it and trigger change detection
             * manually.
             * @return {?}
             */
            MatTabGroup.prototype._subscribeToTabLabels = /**
             * Subscribes to changes in the tab labels. This is needed, because the \@Input for the label is
             * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the
             * binding to be updated, we need to subscribe to changes in it and trigger change detection
             * manually.
             * @return {?}
             */
            function () {
                var _this = this;
                if (this._tabLabelSubscription) {
                    this._tabLabelSubscription.unsubscribe();
                }
                this._tabLabelSubscription = rxjs__WEBPACK_IMPORTED_MODULE_4__["merge"].apply(void 0, this._tabs.map(function (tab) {
                    return tab._disableChange;
                }).concat(this._tabs.map(function (tab) {
                    return tab._labelChange;
                }))).subscribe(function () {
                    _this._changeDetectorRef.markForCheck();
                });
            };
            /** Returns a unique id for each tab label element */
            /**
             * Returns a unique id for each tab label element
             * @param {?} i
             * @return {?}
             */
            MatTabGroup.prototype._getTabLabelId = /**
             * Returns a unique id for each tab label element
             * @param {?} i
             * @return {?}
             */
            function (i) {
                return "mat-tab-label-" + this._groupId + "-" + i;
            };
            /** Returns a unique id for each tab content element */
            /**
             * Returns a unique id for each tab content element
             * @param {?} i
             * @return {?}
             */
            MatTabGroup.prototype._getTabContentId = /**
             * Returns a unique id for each tab content element
             * @param {?} i
             * @return {?}
             */
            function (i) {
                return "mat-tab-content-" + this._groupId + "-" + i;
            };
            /**
             * Sets the height of the body wrapper to the height of the activating tab if dynamic
             * height property is true.
             */
            /**
             * Sets the height of the body wrapper to the height of the activating tab if dynamic
             * height property is true.
             * @param {?} tabHeight
             * @return {?}
             */
            MatTabGroup.prototype._setTabBodyWrapperHeight = /**
             * Sets the height of the body wrapper to the height of the activating tab if dynamic
             * height property is true.
             * @param {?} tabHeight
             * @return {?}
             */
            function (tabHeight) {
                if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {
                    return;
                }
                var /** @type {?} */ wrapper = this._tabBodyWrapper.nativeElement;
                wrapper.style.height = this._tabBodyWrapperHeight + 'px';
                // This conditional forces the browser to paint the height so that
                // the animation to the new height can have an origin.
                if (this._tabBodyWrapper.nativeElement.offsetHeight) {
                    wrapper.style.height = tabHeight + 'px';
                }
            };
            /** Removes the height of the tab body wrapper. */
            /**
             * Removes the height of the tab body wrapper.
             * @return {?}
             */
            MatTabGroup.prototype._removeTabBodyWrapperHeight = /**
             * Removes the height of the tab body wrapper.
             * @return {?}
             */
            function () {
                this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;
                this._tabBodyWrapper.nativeElement.style.height = '';
                this.animationDone.emit();
            };
            /** Handle click events, setting new selected index if appropriate. */
            /**
             * Handle click events, setting new selected index if appropriate.
             * @param {?} tab
             * @param {?} tabHeader
             * @param {?} idx
             * @return {?}
             */
            MatTabGroup.prototype._handleClick = /**
             * Handle click events, setting new selected index if appropriate.
             * @param {?} tab
             * @param {?} tabHeader
             * @param {?} idx
             * @return {?}
             */
            function (tab, tabHeader, idx) {
                if (!tab.disabled) {
                    this.selectedIndex = tabHeader.focusIndex = idx;
                }
            };
            /** Retrieves the tabindex for the tab. */
            /**
             * Retrieves the tabindex for the tab.
             * @param {?} tab
             * @param {?} idx
             * @return {?}
             */
            MatTabGroup.prototype._getTabIndex = /**
             * Retrieves the tabindex for the tab.
             * @param {?} tab
             * @param {?} idx
             * @return {?}
             */
            function (tab, idx) {
                if (tab.disabled) {
                    return null;
                }
                return this.selectedIndex === idx ? 0 : -1;
            };
            MatTabGroup.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-tab-group',
                        exportAs: 'matTabGroup',
                        template: "<mat-tab-header #tabHeader [selectedIndex]=\"selectedIndex\" [disableRipple]=\"disableRipple\" (indexFocused)=\"_focusChanged($event)\" (selectFocusedIndex)=\"selectedIndex = $event\"><div class=\"mat-tab-label\" role=\"tab\" matTabLabelWrapper mat-ripple *ngFor=\"let tab of _tabs; let i = index\" [id]=\"_getTabLabelId(i)\" [attr.tabIndex]=\"_getTabIndex(tab, i)\" [attr.aria-controls]=\"_getTabContentId(i)\" [attr.aria-selected]=\"selectedIndex == i\" [class.mat-tab-label-active]=\"selectedIndex == i\" [disabled]=\"tab.disabled\" [matRippleDisabled]=\"tab.disabled || disableRipple\" (click)=\"_handleClick(tab, tabHeader, i)\"><div class=\"mat-tab-label-content\"><ng-template [ngIf]=\"tab.templateLabel\"><ng-template [cdkPortalOutlet]=\"tab.templateLabel\"></ng-template></ng-template><ng-template [ngIf]=\"!tab.templateLabel\">{{tab.textLabel}}</ng-template></div></div></mat-tab-header><div class=\"mat-tab-body-wrapper\" #tabBodyWrapper><mat-tab-body role=\"tabpanel\" *ngFor=\"let tab of _tabs; let i = index\" [id]=\"_getTabContentId(i)\" [attr.aria-labelledby]=\"_getTabLabelId(i)\" [class.mat-tab-body-active]=\"selectedIndex == i\" [content]=\"tab.content\" [position]=\"tab.position\" [origin]=\"tab.origin\" (_onCentered)=\"_removeTabBodyWrapperHeight()\" (_onCentering)=\"_setTabBodyWrapperHeight($event)\"></mat-tab-body></div>",
                        styles: [".mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.mat-tab-label.mat-tab-disabled{cursor:default}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (max-width:599px){.mat-tab-label{padding:0 12px}}@media (max-width:959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs] .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}"],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        inputs: ['color', 'disableRipple'],
                        host: {
                            'class': 'mat-tab-group',
                            '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',
                            '[class.mat-tab-group-inverted-header]': 'headerPosition === "below"',
                        },
                    },]
                },
            ];
            /** @nocollapse */
            MatTabGroup.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"],},
                ];
            };
            MatTabGroup.propDecorators = {
                "_tabs": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"], args: [MatTab,]},],
                "_tabBodyWrapper": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
                    args: ['tabBodyWrapper',]
                },],
                "_tabHeader": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['tabHeader',]},],
                "dynamicHeight": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selectedIndex": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "headerPosition": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "backgroundColor": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
                "selectedIndexChange": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "focusChange": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "animationDone": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
                "selectedTabChange": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]},],
            };
            return MatTabGroup;
        }(_MatTabGroupMixinBase));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * \@docs-private
         */
        var /**
         * \@docs-private
         */
        MatTabNavBase = /** @class */ (function () {
            function MatTabNavBase(_elementRef) {
                this._elementRef = _elementRef;
            }

            return MatTabNavBase;
        }());
        var /** @type {?} */ _MatTabNavMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisableRipple"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinColor"])(MatTabNavBase, 'primary'));
        /**
         * Navigation component matching the styles of the tab group header.
         * Provides anchored navigation with animated ink bar.
         */
        var MatTabNav = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatTabNav, _super);

            function MatTabNav(elementRef, _dir, _ngZone, _changeDetectorRef, _viewportRuler) {
                var _this = _super.call(this, elementRef) || this;
                _this._dir = _dir;
                _this._ngZone = _ngZone;
                _this._changeDetectorRef = _changeDetectorRef;
                _this._viewportRuler = _viewportRuler;
                /**
                 * Subject that emits when the component has been destroyed.
                 */
                _this._onDestroy = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
                return _this;
            }

            Object.defineProperty(MatTabNav.prototype, "backgroundColor", {
                get: /**
                 * Background color of the tab nav.
                 * @return {?}
                 */
                function () {
                    return this._backgroundColor;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    var /** @type {?} */ nativeElement = this._elementRef.nativeElement;
                    nativeElement.classList.remove("mat-background-" + this.backgroundColor);
                    if (value) {
                        nativeElement.classList.add("mat-background-" + value);
                    }
                    this._backgroundColor = value;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Notifies the component that the active link has been changed.
             * @deletion-target 7.0.0 `element` parameter to be removed.
             */
            /**
             * Notifies the component that the active link has been changed.
             * \@deletion-target 7.0.0 `element` parameter to be removed.
             * @param {?} element
             * @return {?}
             */
            MatTabNav.prototype.updateActiveLink = /**
             * Notifies the component that the active link has been changed.
             * \@deletion-target 7.0.0 `element` parameter to be removed.
             * @param {?} element
             * @return {?}
             */
            function (element) {
                // Note: keeping the `element` for backwards-compat, but isn't being used for anything.
                // @deletion-target 7.0.0
                this._activeLinkChanged = !!element;
                this._changeDetectorRef.markForCheck();
            };
            /**
             * @return {?}
             */
            MatTabNav.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                var _this = this;
                this._ngZone.runOutsideAngular(function () {
                    var /** @type {?} */ dirChange = _this._dir ? _this._dir.change : Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])(null);
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["merge"])(dirChange, _this._viewportRuler.change(10))
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["takeUntil"])(_this._onDestroy))
                        .subscribe(function () {
                            return _this._alignInkBar();
                        });
                });
            };
            /** Checks if the active link has been changed and, if so, will update the ink bar. */
            /**
             * Checks if the active link has been changed and, if so, will update the ink bar.
             * @return {?}
             */
            MatTabNav.prototype.ngAfterContentChecked = /**
             * Checks if the active link has been changed and, if so, will update the ink bar.
             * @return {?}
             */
            function () {
                if (this._activeLinkChanged) {
                    var /** @type {?} */ activeTab = this._tabLinks.find(function (tab) {
                        return tab.active;
                    });
                    this._activeLinkElement = activeTab ? activeTab._elementRef : null;
                    this._alignInkBar();
                    this._activeLinkChanged = false;
                }
            };
            /**
             * @return {?}
             */
            MatTabNav.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._onDestroy.next();
                this._onDestroy.complete();
            };
            /** Aligns the ink bar to the active link. */
            /**
             * Aligns the ink bar to the active link.
             * @return {?}
             */
            MatTabNav.prototype._alignInkBar = /**
             * Aligns the ink bar to the active link.
             * @return {?}
             */
            function () {
                if (this._activeLinkElement) {
                    this._inkBar.show();
                    this._inkBar.alignToElement(this._activeLinkElement.nativeElement);
                }
                else {
                    this._inkBar.hide();
                }
            };
            MatTabNav.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: '[mat-tab-nav-bar]',
                        exportAs: 'matTabNavBar, matTabNav',
                        inputs: ['color', 'disableRipple'],
                        template: "<div class=\"mat-tab-links\" (cdkObserveContent)=\"_alignInkBar()\"><ng-content></ng-content><mat-ink-bar></mat-ink-bar></div>",
                        styles: [".mat-tab-nav-bar{overflow:hidden;position:relative;flex-shrink:0}.mat-tab-links{position:relative;display:flex}.mat-tab-link{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden}.mat-tab-link:focus{outline:0}.mat-tab-link:focus:not(.mat-tab-disabled){opacity:1}.mat-tab-link.mat-tab-disabled{cursor:default}.mat-tab-link .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}[mat-stretch-tabs] .mat-tab-link{flex-basis:0;flex-grow:1}@media (max-width:599px){.mat-tab-link{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media screen and (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}"],
                        host: {'class': 'mat-tab-nav-bar'},
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                    },]
                },
            ];
            /** @nocollapse */
            MatTabNav.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {
                        type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]},]
                    },
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"],},
                    {type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_10__["ViewportRuler"],},
                ];
            };
            MatTabNav.propDecorators = {
                "_inkBar": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: [MatInkBar,]},],
                "_tabLinks": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"],
                    args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
                        return MatTabLink;
                    }), {descendants: true},]
                },],
                "backgroundColor": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
            };
            return MatTabNav;
        }(_MatTabNavMixinBase));
        var MatTabLinkBase = /** @class */ (function () {
            function MatTabLinkBase() {
            }

            return MatTabLinkBase;
        }());
        var /** @type {?} */ _MatTabLinkMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisableRipple"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(MatTabLinkBase)));
        /**
         * Link inside of a `mat-tab-nav-bar`.
         */
        var MatTabLink = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatTabLink, _super);

            function MatTabLink(_tabNavBar, _elementRef, ngZone, platform, globalOptions, tabIndex) {
                var _this = _super.call(this) || this;
                _this._tabNavBar = _tabNavBar;
                _this._elementRef = _elementRef;
                /**
                 * Whether the tab link is active or not.
                 */
                _this._isActive = false;
                /**
                 * Ripple configuration for ripples that are launched on pointer down.
                 * \@docs-private
                 */
                _this.rippleConfig = {};
                _this._tabLinkRipple = new _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["RippleRenderer"](_this, ngZone, _elementRef, platform);
                _this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);
                _this.tabIndex = parseInt(tabIndex) || 0;
                if (globalOptions) {
                    _this.rippleConfig = {
                        terminateOnPointerUp: globalOptions.terminateOnPointerUp,
                        speedFactor: globalOptions.baseSpeedFactor,
                        animation: globalOptions.animation,
                    };
                }
                return _this;
            }

            Object.defineProperty(MatTabLink.prototype, "active", {
                get: /**
                 * Whether the link is active.
                 * @return {?}
                 */
                function () {
                    return this._isActive;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (value !== this._isActive) {
                        this._isActive = value;
                        this._tabNavBar.updateActiveLink(this._elementRef);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatTabLink.prototype, "rippleDisabled", {
                /**
                 * Whether ripples are disabled on interaction
                 * @docs-private
                 */
                get: /**
                 * Whether ripples are disabled on interaction
                 * \@docs-private
                 * @return {?}
                 */
                function () {
                    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @return {?}
             */
            MatTabLink.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                this._tabLinkRipple._removeTriggerEvents();
            };
            /**
             * Handles the click event, preventing default navigation if the tab link is disabled.
             */
            /**
             * Handles the click event, preventing default navigation if the tab link is disabled.
             * @param {?} event
             * @return {?}
             */
            MatTabLink.prototype._handleClick = /**
             * Handles the click event, preventing default navigation if the tab link is disabled.
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (this.disabled) {
                    event.preventDefault();
                }
            };
            MatTabLink.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[mat-tab-link], [matTabLink]',
                        exportAs: 'matTabLink',
                        inputs: ['disabled', 'disableRipple', 'tabIndex'],
                        host: {
                            'class': 'mat-tab-link',
                            '[attr.aria-disabled]': 'disabled.toString()',
                            '[attr.tabIndex]': 'tabIndex',
                            '[class.mat-tab-disabled]': 'disabled',
                            '[class.mat-tab-label-active]': 'active',
                            '(click)': '_handleClick($event)'
                        }
                    },]
                },
            ];
            /** @nocollapse */
            MatTabLink.ctorParameters = function () {
                return [
                    {type: MatTabNav,},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"],},
                    {type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_11__["Platform"],},
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                            args: [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MAT_RIPPLE_GLOBAL_OPTIONS"],]
                        },]
                    },
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Attribute"],
                            args: ['tabindex',]
                        },]
                    },
                ];
            };
            MatTabLink.propDecorators = {
                "active": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
            };
            return MatTabLink;
        }(_MatTabLinkMixinBase));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatTabsModule = /** @class */ (function () {
            function MatTabsModule() {
            }

            MatTabsModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                        imports: [
                            _angular_common__WEBPACK_IMPORTED_MODULE_13__["CommonModule"],
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"],
                            _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__["PortalModule"],
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatRippleModule"],
                            _angular_cdk_observers__WEBPACK_IMPORTED_MODULE_12__["ObserversModule"],
                        ],
                        // Don't export all components because some are only to be used internally.
                        exports: [
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"],
                            MatTabGroup,
                            MatTabLabel,
                            MatTab,
                            MatTabNav,
                            MatTabLink,
                            MatTabContent,
                        ],
                        declarations: [
                            MatTabGroup,
                            MatTabLabel,
                            MatTab,
                            MatInkBar,
                            MatTabLabelWrapper,
                            MatTabNav,
                            MatTabLink,
                            MatTabBody,
                            MatTabBodyPortal,
                            MatTabHeader,
                            MatTabContent,
                        ],
                    },]
                },
            ];
            return MatTabsModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=tabs.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/tooltip.es5.js":
    /*!************************************************************!*\
  !*** ./node_modules/@angular/material/esm5/tooltip.es5.js ***!
  \************************************************************/
    /*! exports provided: MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, getMatTooltipInvalidPositionError, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MatTooltip, TooltipComponent, matTooltipAnimations */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTooltipModule", function () {
            return MatTooltipModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "SCROLL_THROTTLE_MS", function () {
            return SCROLL_THROTTLE_MS;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TOOLTIP_PANEL_CLASS", function () {
            return TOOLTIP_PANEL_CLASS;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "getMatTooltipInvalidPositionError", function () {
            return getMatTooltipInvalidPositionError;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_SCROLL_STRATEGY", function () {
            return MAT_TOOLTIP_SCROLL_STRATEGY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY", function () {
            return MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER", function () {
            return MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_DEFAULT_OPTIONS", function () {
            return MAT_TOOLTIP_DEFAULT_OPTIONS;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY", function () {
            return MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTooltip", function () {
            return MatTooltip;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TooltipComponent", function () {
            return TooltipComponent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "matTooltipAnimations", function () {
            return matTooltipAnimations;
        });
        /* harmony import */
        var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/fesm5/animations.js");
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/coercion */ "./node_modules/@angular/cdk/esm5/coercion.es5.js");
        /* harmony import */
        var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/keycodes */ "./node_modules/@angular/cdk/esm5/keycodes.es5.js");
        /* harmony import */
        var _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/layout */ "./node_modules/@angular/cdk/esm5/layout.es5.js");
        /* harmony import */
        var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
        /* harmony import */
        var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm5/platform.es5.js");
        /* harmony import */
        var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm5/portal.es5.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Animations used by MatTooltip.
         */
        var /** @type {?} */ matTooltipAnimations = {
            /** Animation that transitions a tooltip in and out. */
            tooltipState: Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["trigger"])('state', [
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('initial, void, hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({transform: 'scale(0)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["state"])('visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({transform: 'scale(1)'})),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('* => visible', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),
                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["transition"])('* => hidden', Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["animate"])('150ms cubic-bezier(0.4, 0.0, 1, 1)')),
            ])
        };

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Time in ms to throttle repositioning after scroll events.
         */
        var /** @type {?} */ SCROLL_THROTTLE_MS = 20;
        /**
         * CSS class that will be attached to the overlay panel.
         */
        var /** @type {?} */ TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';

        /**
         * Creates an error to be thrown if the user supplied an invalid tooltip position.
         * @param {?} position
         * @return {?}
         */
        function getMatTooltipInvalidPositionError(position) {
            return Error("Tooltip position \"" + position + "\" is invalid.");
        }

        /**
         * Injection token that determines the scroll handling while a tooltip is visible.
         */
        var /** @type {?} */ MAT_TOOLTIP_SCROLL_STRATEGY = new _angular_core__WEBPACK_IMPORTED_MODULE_11__["InjectionToken"]('mat-tooltip-scroll-strategy');

        /**
         * \@docs-private
         * @param {?} overlay
         * @return {?}
         */
        function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {
            return function () {
                return overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});
            };
        }

        /**
         * \@docs-private
         */
        var /** @type {?} */ MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {
            provide: MAT_TOOLTIP_SCROLL_STRATEGY,
            deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["Overlay"]],
            useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,
        };
        /**
         * Injection token to be used to override the default options for `matTooltip`.
         */
        var /** @type {?} */ MAT_TOOLTIP_DEFAULT_OPTIONS = new _angular_core__WEBPACK_IMPORTED_MODULE_11__["InjectionToken"]('mat-tooltip-default-options', {
            providedIn: 'root',
            factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY
        });

        /**
         * @return {?}
         */
        function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {
            return {
                showDelay: 0,
                hideDelay: 0,
                touchendHideDelay: 1500,
            };
        }

        /**
         * Directive that attaches a material design tooltip to the host element. Animates the showing and
         * hiding of a tooltip provided position (defaults to below the element).
         *
         * https://material.google.com/components/tooltips.html
         */
        var MatTooltip = /** @class */ (function () {
            function MatTooltip(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, _scrollStrategy, _dir, _defaultOptions) {
                var _this = this;
                this._overlay = _overlay;
                this._elementRef = _elementRef;
                this._scrollDispatcher = _scrollDispatcher;
                this._viewContainerRef = _viewContainerRef;
                this._ngZone = _ngZone;
                this._platform = _platform;
                this._ariaDescriber = _ariaDescriber;
                this._focusMonitor = _focusMonitor;
                this._scrollStrategy = _scrollStrategy;
                this._dir = _dir;
                this._defaultOptions = _defaultOptions;
                this._position = 'below';
                this._disabled = false;
                /**
                 * The default delay in ms before showing the tooltip after show is called
                 */
                this.showDelay = this._defaultOptions.showDelay;
                /**
                 * The default delay in ms before hiding the tooltip after hide is called
                 */
                this.hideDelay = this._defaultOptions.hideDelay;
                this._message = '';
                this._manualListeners = new Map();
                /**
                 * Emits when the component is destroyed.
                 */
                this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_12__["Subject"]();
                var /** @type {?} */ element = _elementRef.nativeElement;
                // The mouse events shouldn't be bound on iOS devices, because
                // they can prevent the first tap from firing its click event.
                if (!_platform.IOS) {
                    this._manualListeners.set('mouseenter', function () {
                        return _this.show();
                    });
                    this._manualListeners.set('mouseleave', function () {
                        return _this.hide();
                    });
                    this._manualListeners
                        .forEach(function (listener, event) {
                            return _elementRef.nativeElement.addEventListener(event, listener);
                        });
                }
                else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
                    // When we bind a gesture event on an element (in this case `longpress`), HammerJS
                    // will add some inline styles by default, including `user-select: none`. This is
                    // problematic on iOS, because it will prevent users from typing in inputs. If
                    // we're on iOS and the tooltip is attached on an input or textarea, we clear
                    // the `user-select` to avoid these issues.
                    element.style.webkitUserSelect = element.style.userSelect = '';
                }
                _focusMonitor.monitor(element).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._destroyed)).subscribe(function (origin) {
                    // Note that the focus monitor runs outside the Angular zone.
                    if (!origin) {
                        _ngZone.run(function () {
                            return _this.hide(0);
                        });
                    }
                    else if (origin !== 'program') {
                        _ngZone.run(function () {
                            return _this.show();
                        });
                    }
                });
            }

            Object.defineProperty(MatTooltip.prototype, "position", {
                get: /**
                 * Allows the user to define the position of the tooltip relative to the parent element
                 * @return {?}
                 */
                function () {
                    return this._position;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    if (value !== this._position) {
                        this._position = value;
                        if (this._overlayRef) {
                            this._updatePosition();
                            if (this._tooltipInstance) {
                                /** @type {?} */ ((this._tooltipInstance)).show(0);
                            }
                            this._overlayRef.updatePosition();
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatTooltip.prototype, "disabled", {
                get: /**
                 * Disables the display of the tooltip.
                 * @return {?}
                 */
                function () {
                    return this._disabled;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
                    // If tooltip is disabled, hide immediately.
                    if (this._disabled) {
                        this.hide(0);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatTooltip.prototype, "message", {
                get: /**
                 * The message to be displayed in the tooltip
                 * @return {?}
                 */
                function () {
                    return this._message;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);
                    // If the message is not a string (e.g. number), convert it to a string and trim it.
                    this._message = value != null ? ("" + value).trim() : '';
                    if (!this._message && this._isTooltipVisible()) {
                        this.hide(0);
                    }
                    else {
                        this._updateTooltipMessage();
                        this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(MatTooltip.prototype, "tooltipClass", {
                get: /**
                 * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.
                 * @return {?}
                 */
                function () {
                    return this._tooltipClass;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._tooltipClass = value;
                    if (this._tooltipInstance) {
                        this._setTooltipClass(this._tooltipClass);
                    }
                },
                enumerable: true,
                configurable: true
            });
            /**
             * Dispose the tooltip when destroyed.
             */
            /**
             * Dispose the tooltip when destroyed.
             * @return {?}
             */
            MatTooltip.prototype.ngOnDestroy = /**
             * Dispose the tooltip when destroyed.
             * @return {?}
             */
            function () {
                var _this = this;
                if (this._overlayRef) {
                    this._overlayRef.dispose();
                    this._tooltipInstance = null;
                }
                // Clean up the event listeners set in the constructor
                if (!this._platform.IOS) {
                    this._manualListeners.forEach(function (listener, event) {
                        return _this._elementRef.nativeElement.removeEventListener(event, listener);
                    });
                    this._manualListeners.clear();
                }
                this._destroyed.next();
                this._destroyed.complete();
                this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);
                this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);
            };
            /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */
            /**
             * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input
             * @param {?=} delay
             * @return {?}
             */
            MatTooltip.prototype.show = /**
             * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input
             * @param {?=} delay
             * @return {?}
             */
            function (delay) {
                var _this = this;
                if (delay === void 0) {
                    delay = this.showDelay;
                }
                if (this.disabled || !this.message) {
                    return;
                }
                var /** @type {?} */ overlayRef = this._createOverlay();
                this._detach();
                overlayRef.setDirection(this._dir ? this._dir.value : 'ltr');
                this._portal = this._portal || new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_9__["ComponentPortal"](TooltipComponent, this._viewContainerRef);
                this._tooltipInstance = overlayRef.attach(this._portal).instance;
                this._tooltipInstance.afterHidden()
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._destroyed))
                    .subscribe(function () {
                        return _this._detach();
                    });
                this._setTooltipClass(this._tooltipClass);
                this._updateTooltipMessage();
                /** @type {?} */
                ((this._tooltipInstance)).show(delay);
            };
            /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */
            /**
             * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input
             * @param {?=} delay
             * @return {?}
             */
            MatTooltip.prototype.hide = /**
             * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input
             * @param {?=} delay
             * @return {?}
             */
            function (delay) {
                if (delay === void 0) {
                    delay = this.hideDelay;
                }
                if (this._tooltipInstance) {
                    this._tooltipInstance.hide(delay);
                }
            };
            /** Shows/hides the tooltip */
            /**
             * Shows/hides the tooltip
             * @return {?}
             */
            MatTooltip.prototype.toggle = /**
             * Shows/hides the tooltip
             * @return {?}
             */
            function () {
                this._isTooltipVisible() ? this.hide() : this.show();
            };
            /** Returns true if the tooltip is currently visible to the user */
            /**
             * Returns true if the tooltip is currently visible to the user
             * @return {?}
             */
            MatTooltip.prototype._isTooltipVisible = /**
             * Returns true if the tooltip is currently visible to the user
             * @return {?}
             */
            function () {
                return !!this._tooltipInstance && this._tooltipInstance.isVisible();
            };
            /** Handles the keydown events on the host element. */
            /**
             * Handles the keydown events on the host element.
             * @param {?} e
             * @return {?}
             */
            MatTooltip.prototype._handleKeydown = /**
             * Handles the keydown events on the host element.
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (this._isTooltipVisible() && e.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__["ESCAPE"]) {
                    e.stopPropagation();
                    this.hide(0);
                }
            };
            /** Handles the touchend events on the host element. */
            /**
             * Handles the touchend events on the host element.
             * @return {?}
             */
            MatTooltip.prototype._handleTouchend = /**
             * Handles the touchend events on the host element.
             * @return {?}
             */
            function () {
                this.hide(this._defaultOptions.touchendHideDelay);
            };
            /**
             * Create the overlay config and position strategy
             * @return {?}
             */
            MatTooltip.prototype._createOverlay = /**
             * Create the overlay config and position strategy
             * @return {?}
             */
            function () {
                var _this = this;
                if (this._overlayRef) {
                    return this._overlayRef;
                }
                // Create connected position strategy that listens for scroll events to reposition.
                var /** @type {?} */ strategy = this._overlay.position()
                    .flexibleConnectedTo(this._elementRef)
                    .withTransformOriginOn('.mat-tooltip')
                    .withFlexibleDimensions(false)
                    .withViewportMargin(8);
                var /** @type {?} */ scrollableAncestors = this._scrollDispatcher
                    .getAncestorScrollContainers(this._elementRef);
                strategy.withScrollableContainers(scrollableAncestors);
                strategy.positionChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._destroyed)).subscribe(function (change) {
                    if (_this._tooltipInstance) {
                        if (change.scrollableViewProperties.isOverlayClipped && _this._tooltipInstance.isVisible()) {
                            // After position changes occur and the overlay is clipped by
                            // a parent scrollable then close the tooltip.
                            // After position changes occur and the overlay is clipped by
                            // a parent scrollable then close the tooltip.
                            _this._ngZone.run(function () {
                                return _this.hide(0);
                            });
                        }
                    }
                });
                this._overlayRef = this._overlay.create({
                    positionStrategy: strategy,
                    panelClass: TOOLTIP_PANEL_CLASS,
                    scrollStrategy: this._scrollStrategy()
                });
                this._updatePosition();
                this._overlayRef.detachments()
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._destroyed))
                    .subscribe(function () {
                        return _this._detach();
                    });
                return this._overlayRef;
            };
            /**
             * Detaches the currently-attached tooltip.
             * @return {?}
             */
            MatTooltip.prototype._detach = /**
             * Detaches the currently-attached tooltip.
             * @return {?}
             */
            function () {
                if (this._overlayRef && this._overlayRef.hasAttached()) {
                    this._overlayRef.detach();
                }
                this._tooltipInstance = null;
            };
            /**
             * Updates the position of the current tooltip.
             * @return {?}
             */
            MatTooltip.prototype._updatePosition = /**
             * Updates the position of the current tooltip.
             * @return {?}
             */
            function () {
                var /** @type {?} */ position = /** @type {?} */ (((this._overlayRef)).getConfig().positionStrategy);
                var /** @type {?} */ origin = this._getOrigin();
                var /** @type {?} */ overlay = this._getOverlayPosition();
                position.withPositions([
                    Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__assign"])({}, origin.main, overlay.main),
                    Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__assign"])({}, origin.fallback, overlay.fallback)
                ]);
            };
            /**
             * Returns the origin position and a fallback position based on the user's position preference.
             * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).
             */
            /**
             * Returns the origin position and a fallback position based on the user's position preference.
             * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).
             * @return {?}
             */
            MatTooltip.prototype._getOrigin = /**
             * Returns the origin position and a fallback position based on the user's position preference.
             * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).
             * @return {?}
             */
            function () {
                var /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';
                var /** @type {?} */ position = this.position;
                var /** @type {?} */ originPosition;
                if (position == 'above' || position == 'below') {
                    originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};
                }
                else if (position == 'before' ||
                    (position == 'left' && isLtr) ||
                    (position == 'right' && !isLtr)) {
                    originPosition = {originX: 'start', originY: 'center'};
                }
                else if (position == 'after' ||
                    (position == 'right' && isLtr) ||
                    (position == 'left' && !isLtr)) {
                    originPosition = {originX: 'end', originY: 'center'};
                }
                else {
                    throw getMatTooltipInvalidPositionError(position);
                }
                var _a = this._invertPosition(originPosition.originX, originPosition.originY), x = _a.x, y = _a.y;
                return {
                    main: originPosition,
                    fallback: {originX: x, originY: y}
                };
            };
            /** Returns the overlay position and a fallback position based on the user's preference */
            /**
             * Returns the overlay position and a fallback position based on the user's preference
             * @return {?}
             */
            MatTooltip.prototype._getOverlayPosition = /**
             * Returns the overlay position and a fallback position based on the user's preference
             * @return {?}
             */
            function () {
                var /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';
                var /** @type {?} */ position = this.position;
                var /** @type {?} */ overlayPosition;
                if (position == 'above') {
                    overlayPosition = {overlayX: 'center', overlayY: 'bottom'};
                }
                else if (position == 'below') {
                    overlayPosition = {overlayX: 'center', overlayY: 'top'};
                }
                else if (position == 'before' ||
                    (position == 'left' && isLtr) ||
                    (position == 'right' && !isLtr)) {
                    overlayPosition = {overlayX: 'end', overlayY: 'center'};
                }
                else if (position == 'after' ||
                    (position == 'right' && isLtr) ||
                    (position == 'left' && !isLtr)) {
                    overlayPosition = {overlayX: 'start', overlayY: 'center'};
                }
                else {
                    throw getMatTooltipInvalidPositionError(position);
                }
                var _a = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY), x = _a.x, y = _a.y;
                return {
                    main: overlayPosition,
                    fallback: {overlayX: x, overlayY: y}
                };
            };
            /**
             * Updates the tooltip message and repositions the overlay according to the new message length
             * @return {?}
             */
            MatTooltip.prototype._updateTooltipMessage = /**
             * Updates the tooltip message and repositions the overlay according to the new message length
             * @return {?}
             */
            function () {
                var _this = this;
                // Must wait for the message to be painted to the tooltip so that the overlay can properly
                // calculate the correct positioning based on the size of the text.
                if (this._tooltipInstance) {
                    this._tooltipInstance.message = this.message;
                    this._tooltipInstance._markForCheck();
                    this._ngZone.onMicrotaskEmpty.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__["takeUntil"])(this._destroyed)).subscribe(function () {
                        if (_this._tooltipInstance) {
                            /** @type {?} */ ((_this._overlayRef)).updatePosition();
                        }
                    });
                }
            };
            /**
             * Updates the tooltip class
             * @param {?} tooltipClass
             * @return {?}
             */
            MatTooltip.prototype._setTooltipClass = /**
             * Updates the tooltip class
             * @param {?} tooltipClass
             * @return {?}
             */
            function (tooltipClass) {
                if (this._tooltipInstance) {
                    this._tooltipInstance.tooltipClass = tooltipClass;
                    this._tooltipInstance._markForCheck();
                }
            };
            /**
             * Inverts an overlay position.
             * @param {?} x
             * @param {?} y
             * @return {?}
             */
            MatTooltip.prototype._invertPosition = /**
             * Inverts an overlay position.
             * @param {?} x
             * @param {?} y
             * @return {?}
             */
            function (x, y) {
                if (this.position === 'above' || this.position === 'below') {
                    if (y === 'top') {
                        y = 'bottom';
                    }
                    else if (y === 'bottom') {
                        y = 'top';
                    }
                }
                else {
                    if (x === 'end') {
                        x = 'start';
                    }
                    else if (x === 'start') {
                        x = 'end';
                    }
                }
                return {x: x, y: y};
            };
            MatTooltip.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Directive"], args: [{
                        selector: '[matTooltip]',
                        exportAs: 'matTooltip',
                        host: {
                            '(longpress)': 'show()',
                            '(keydown)': '_handleKeydown($event)',
                            '(touchend)': '_handleTouchend()',
                        },
                    },]
                },
            ];
            /** @nocollapse */
            MatTooltip.ctorParameters = function () {
                return [
                    {type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["Overlay"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ElementRef"],},
                    {type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["ScrollDispatcher"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ViewContainerRef"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["NgZone"],},
                    {type: _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_8__["Platform"],},
                    {type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__["AriaDescriber"],},
                    {type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_2__["FocusMonitor"],},
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Inject"],
                            args: [MAT_TOOLTIP_SCROLL_STRATEGY,]
                        },]
                    },
                    {
                        type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_3__["Directionality"],
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Optional"]},]
                    },
                    {
                        type: undefined,
                        decorators: [{type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Optional"]}, {
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Inject"],
                            args: [MAT_TOOLTIP_DEFAULT_OPTIONS,]
                        },]
                    },
                ];
            };
            MatTooltip.propDecorators = {
                "position": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"],
                    args: ['matTooltipPosition',]
                },],
                "disabled": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"],
                    args: ['matTooltipDisabled',]
                },],
                "showDelay": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"],
                    args: ['matTooltipShowDelay',]
                },],
                "hideDelay": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"],
                    args: ['matTooltipHideDelay',]
                },],
                "message": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"], args: ['matTooltip',]},],
                "tooltipClass": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Input"],
                    args: ['matTooltipClass',]
                },],
            };
            return MatTooltip;
        }());
        /**
         * Internal component that wraps the tooltip's content.
         * \@docs-private
         */
        var TooltipComponent = /** @class */ (function () {
            function TooltipComponent(_changeDetectorRef, _breakpointObserver) {
                this._changeDetectorRef = _changeDetectorRef;
                this._breakpointObserver = _breakpointObserver;
                /**
                 * Property watched by the animation framework to show or hide the tooltip
                 */
                this._visibility = 'initial';
                /**
                 * Whether interactions on the page should close the tooltip
                 */
                this._closeOnInteraction = false;
                /**
                 * Subject for notifying that the tooltip has been hidden from the view
                 */
                this._onHide = new rxjs__WEBPACK_IMPORTED_MODULE_12__["Subject"]();
                /**
                 * Stream that emits whether the user has a handset-sized display.
                 */
                this._isHandset = this._breakpointObserver.observe(_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_6__["Breakpoints"].Handset);
            }

            /**
             * Shows the tooltip with an animation originating from the provided origin
             * @param delay Amount of milliseconds to the delay showing the tooltip.
             */
            /**
             * Shows the tooltip with an animation originating from the provided origin
             * @param {?} delay Amount of milliseconds to the delay showing the tooltip.
             * @return {?}
             */
            TooltipComponent.prototype.show = /**
             * Shows the tooltip with an animation originating from the provided origin
             * @param {?} delay Amount of milliseconds to the delay showing the tooltip.
             * @return {?}
             */
            function (delay) {
                var _this = this;
                // Cancel the delayed hide if it is scheduled
                if (this._hideTimeoutId) {
                    clearTimeout(this._hideTimeoutId);
                }
                // Body interactions should cancel the tooltip if there is a delay in showing.
                this._closeOnInteraction = true;
                this._showTimeoutId = setTimeout(function () {
                    _this._visibility = 'visible';
                    // Mark for check so if any parent component has set the
                    // ChangeDetectionStrategy to OnPush it will be checked anyways
                    // Mark for check so if any parent component has set the
                    // ChangeDetectionStrategy to OnPush it will be checked anyways
                    _this._markForCheck();
                }, delay);
            };
            /**
             * Begins the animation to hide the tooltip after the provided delay in ms.
             * @param delay Amount of milliseconds to delay showing the tooltip.
             */
            /**
             * Begins the animation to hide the tooltip after the provided delay in ms.
             * @param {?} delay Amount of milliseconds to delay showing the tooltip.
             * @return {?}
             */
            TooltipComponent.prototype.hide = /**
             * Begins the animation to hide the tooltip after the provided delay in ms.
             * @param {?} delay Amount of milliseconds to delay showing the tooltip.
             * @return {?}
             */
            function (delay) {
                var _this = this;
                // Cancel the delayed show if it is scheduled
                if (this._showTimeoutId) {
                    clearTimeout(this._showTimeoutId);
                }
                this._hideTimeoutId = setTimeout(function () {
                    _this._visibility = 'hidden';
                    // Mark for check so if any parent component has set the
                    // ChangeDetectionStrategy to OnPush it will be checked anyways
                    // Mark for check so if any parent component has set the
                    // ChangeDetectionStrategy to OnPush it will be checked anyways
                    _this._markForCheck();
                }, delay);
            };
            /** Returns an observable that notifies when the tooltip has been hidden from view. */
            /**
             * Returns an observable that notifies when the tooltip has been hidden from view.
             * @return {?}
             */
            TooltipComponent.prototype.afterHidden = /**
             * Returns an observable that notifies when the tooltip has been hidden from view.
             * @return {?}
             */
            function () {
                return this._onHide.asObservable();
            };
            /** Whether the tooltip is being displayed. */
            /**
             * Whether the tooltip is being displayed.
             * @return {?}
             */
            TooltipComponent.prototype.isVisible = /**
             * Whether the tooltip is being displayed.
             * @return {?}
             */
            function () {
                return this._visibility === 'visible';
            };
            /**
             * @return {?}
             */
            TooltipComponent.prototype._animationStart = /**
             * @return {?}
             */
            function () {
                this._closeOnInteraction = false;
            };
            /**
             * @param {?} event
             * @return {?}
             */
            TooltipComponent.prototype._animationDone = /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                var /** @type {?} */ toState = /** @type {?} */ (event.toState);
                if (toState === 'hidden' && !this.isVisible()) {
                    this._onHide.next();
                }
                if (toState === 'visible' || toState === 'hidden') {
                    this._closeOnInteraction = true;
                }
            };
            /**
             * Interactions on the HTML body should close the tooltip immediately as defined in the
             * material design spec.
             * https://material.google.com/components/tooltips.html#tooltips-interaction
             */
            /**
             * Interactions on the HTML body should close the tooltip immediately as defined in the
             * material design spec.
             * https://material.google.com/components/tooltips.html#tooltips-interaction
             * @return {?}
             */
            TooltipComponent.prototype._handleBodyInteraction = /**
             * Interactions on the HTML body should close the tooltip immediately as defined in the
             * material design spec.
             * https://material.google.com/components/tooltips.html#tooltips-interaction
             * @return {?}
             */
            function () {
                if (this._closeOnInteraction) {
                    this.hide(0);
                }
            };
            /**
             * Marks that the tooltip needs to be checked in the next change detection run.
             * Mainly used for rendering the initial text before positioning a tooltip, which
             * can be problematic in components with OnPush change detection.
             */
            /**
             * Marks that the tooltip needs to be checked in the next change detection run.
             * Mainly used for rendering the initial text before positioning a tooltip, which
             * can be problematic in components with OnPush change detection.
             * @return {?}
             */
            TooltipComponent.prototype._markForCheck = /**
             * Marks that the tooltip needs to be checked in the next change detection run.
             * Mainly used for rendering the initial text before positioning a tooltip, which
             * can be problematic in components with OnPush change detection.
             * @return {?}
             */
            function () {
                this._changeDetectorRef.markForCheck();
            };
            TooltipComponent.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["Component"], args: [{
                        selector: 'mat-tooltip-component',
                        template: "<div class=\"mat-tooltip\" [ngClass]=\"tooltipClass\" [class.mat-tooltip-handset]=\"(_isHandset | async)!.matches\" [@state]=\"_visibility\" (@state.start)=\"_animationStart()\" (@state.done)=\"_animationDone($event)\">{{message}}</div>",
                        styles: [".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:2px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}"],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ChangeDetectionStrategy"].OnPush,
                        animations: [matTooltipAnimations.tooltipState],
                        host: {
                            // Forces the element to have a layout in IE and Edge. This fixes issues where the element
                            // won't be rendered if the animations are disabled or there is no web animations polyfill.
                            '[style.zoom]': '_visibility === "visible" ? 1 : null',
                            '(body:click)': 'this._handleBodyInteraction()',
                            'aria-hidden': 'true',
                        }
                    },]
                },
            ];
            /** @nocollapse */
            TooltipComponent.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["ChangeDetectorRef"],},
                    {type: _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_6__["BreakpointObserver"],},
                ];
            };
            return TooltipComponent;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var MatTooltipModule = /** @class */ (function () {
            function MatTooltipModule() {
            }

            MatTooltipModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_11__["NgModule"], args: [{
                        imports: [
                            _angular_common__WEBPACK_IMPORTED_MODULE_13__["CommonModule"],
                            _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_7__["OverlayModule"],
                            _angular_material_core__WEBPACK_IMPORTED_MODULE_14__["MatCommonModule"],
                        ],
                        exports: [MatTooltip, TooltipComponent, _angular_material_core__WEBPACK_IMPORTED_MODULE_14__["MatCommonModule"]],
                        declarations: [MatTooltip, TooltipComponent],
                        entryComponents: [TooltipComponent],
                        providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]
                    },]
                },
            ];
            return MatTooltipModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=tooltip.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/esm5/tree.es5.js":
    /*!*********************************************************!*\
  !*** ./node_modules/@angular/material/esm5/tree.es5.js ***!
  \*********************************************************/
    /*! exports provided: _MatTreeNodeMixinBase, _MatNestedTreeNodeMixinBase, MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MatTreeNodeMixinBase", function () {
            return _MatTreeNodeMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "_MatNestedTreeNodeMixinBase", function () {
            return _MatNestedTreeNodeMixinBase;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTreeNode", function () {
            return MatTreeNode;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTreeNodeDef", function () {
            return MatTreeNodeDef;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatNestedTreeNode", function () {
            return MatNestedTreeNode;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTreeNodePadding", function () {
            return MatTreeNodePadding;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTree", function () {
            return MatTree;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTreeModule", function () {
            return MatTreeModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTreeNodeToggle", function () {
            return MatTreeNodeToggle;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTreeNodeOutlet", function () {
            return MatTreeNodeOutlet;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTreeFlattener", function () {
            return MatTreeFlattener;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTreeFlatDataSource", function () {
            return MatTreeFlatDataSource;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTreeNestedDataSource", function () {
            return MatTreeNestedDataSource;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
        /* harmony import */
        var _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/tree */ "./node_modules/@angular/cdk/esm5/tree.es5.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm5/collections.es5.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /**
         * @license
         * Copyright Google LLC All Rights Reserved.
         *
         * Use of this source code is governed by an MIT-style license that can be
         * found in the LICENSE file at https://angular.io/license
         */


        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes
         * inside the outlet.
         */
        var MatTreeNodeOutlet = /** @class */ (function () {
            function MatTreeNodeOutlet(viewContainer) {
                this.viewContainer = viewContainer;
            }

            MatTreeNodeOutlet.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[matTreeNodeOutlet]'
                    },]
                },
            ];
            /** @nocollapse */
            MatTreeNodeOutlet.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"],},
                ];
            };
            return MatTreeNodeOutlet;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var /** @type {?} */ _MatTreeNodeMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNode"]));
        var /** @type {?} */ _MatNestedTreeNodeMixinBase = Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinTabIndex"])(Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_3__["mixinDisabled"])(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkNestedTreeNode"]));
        /**
         * Wrapper for the CdkTree node with Material design styles.
         * @template T
         */
        var MatTreeNode = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatTreeNode, _super);

            function MatTreeNode(_elementRef, _tree, tabIndex) {
                var _this = _super.call(this, _elementRef, _tree) || this;
                _this._elementRef = _elementRef;
                _this._tree = _tree;
                _this.role = 'treeitem';
                _this.tabIndex = Number(tabIndex) || 0;
                return _this;
            }

            MatTreeNode.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: 'mat-tree-node',
                        exportAs: 'matTreeNode',
                        inputs: ['disabled', 'tabIndex'],
                        host: {
                            '[attr.aria-expanded]': 'isExpanded',
                            '[attr.aria-level]': 'role === "treeitem" ? level : null',
                            '[attr.role]': 'role',
                            'class': 'mat-tree-node'
                        },
                        providers: [{
                            provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNode"],
                            useExisting: MatTreeNode
                        }]
                    },]
                },
            ];
            /** @nocollapse */
            MatTreeNode.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {type: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTree"],},
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Attribute"],
                            args: ['tabindex',]
                        },]
                    },
                ];
            };
            MatTreeNode.propDecorators = {
                "role": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]},],
            };
            return MatTreeNode;
        }(_MatTreeNodeMixinBase));
        /**
         * Wrapper for the CdkTree node definition with Material design styles.
         * @template T
         */
        var MatTreeNodeDef = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatTreeNodeDef, _super);

            function MatTreeNodeDef() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            MatTreeNodeDef.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[matTreeNodeDef]',
                        inputs: [
                            'when: matTreeNodeDefWhen'
                        ],
                        providers: [{
                            provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodeDef"],
                            useExisting: MatTreeNodeDef
                        }]
                    },]
                },
            ];
            /** @nocollapse */
            MatTreeNodeDef.propDecorators = {
                "data": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['matTreeNode',]},],
            };
            return MatTreeNodeDef;
        }(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodeDef"]));
        /**
         * Wrapper for the CdkTree nested node with Material design styles.
         * @template T
         */
        var MatNestedTreeNode = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatNestedTreeNode, _super);

            function MatNestedTreeNode(_elementRef, _tree, _differs, tabIndex) {
                var _this = _super.call(this, _elementRef, _tree, _differs) || this;
                _this._elementRef = _elementRef;
                _this._tree = _tree;
                _this._differs = _differs;
                _this.tabIndex = Number(tabIndex) || 0;
                return _this;
            }

            // This is a workaround for https://github.com/angular/angular/issues/23091
            // In aot mode, the lifecycle hooks from parent class are not called.
            // TODO(tinayuangao): Remove when the angular issue #23091 is fixed
            /**
             * @return {?}
             */
            MatNestedTreeNode.prototype.ngAfterContentInit = /**
             * @return {?}
             */
            function () {
                _super.prototype.ngAfterContentInit.call(this);
            };
            /**
             * @return {?}
             */
            MatNestedTreeNode.prototype.ngOnDestroy = /**
             * @return {?}
             */
            function () {
                _super.prototype.ngOnDestroy.call(this);
            };
            MatNestedTreeNode.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: 'mat-nested-tree-node',
                        exportAs: 'matNestedTreeNode',
                        host: {
                            '[attr.aria-expanded]': 'isExpanded',
                            '[attr.role]': 'role',
                            'class': 'mat-nested-tree-node',
                        },
                        inputs: ['disabled', 'tabIndex'],
                        providers: [
                            {
                                provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkNestedTreeNode"],
                                useExisting: MatNestedTreeNode
                            },
                            {
                                provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNode"],
                                useExisting: MatNestedTreeNode
                            }
                        ]
                    },]
                },
            ];
            /** @nocollapse */
            MatNestedTreeNode.ctorParameters = function () {
                return [
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"],},
                    {type: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTree"],},
                    {type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"],},
                    {
                        type: undefined,
                        decorators: [{
                            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Attribute"],
                            args: ['tabindex',]
                        },]
                    },
                ];
            };
            MatNestedTreeNode.propDecorators = {
                "node": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['matNestedTreeNode',]},],
                "nodeOutlet": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"],
                    args: [MatTreeNodeOutlet,]
                },],
            };
            return MatNestedTreeNode;
        }(_MatNestedTreeNodeMixinBase));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Wrapper for the CdkTree padding with Material design styles.
         * @template T
         */
        var MatTreeNodePadding = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatTreeNodePadding, _super);

            function MatTreeNodePadding() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            MatTreeNodePadding.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[matTreeNodePadding]',
                        providers: [{
                            provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodePadding"],
                            useExisting: MatTreeNodePadding
                        }]
                    },]
                },
            ];
            /** @nocollapse */
            MatTreeNodePadding.propDecorators = {
                "level": [{type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['matTreeNodePadding',]},],
                "indent": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
                    args: ['matTreeNodePaddingIndent',]
                },],
            };
            return MatTreeNodePadding;
        }(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodePadding"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Wrapper for the CdkTable with Material design styles.
         * @template T
         */
        var MatTree = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatTree, _super);

            function MatTree() {
                return _super !== null && _super.apply(this, arguments) || this;
            }

            MatTree.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                        selector: 'mat-tree',
                        exportAs: 'matTree',
                        template: "<ng-container matTreeNodeOutlet></ng-container>",
                        host: {
                            'class': 'mat-tree',
                            'role': 'tree',
                        },
                        styles: [".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}"],
                        encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
                        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
                        providers: [{
                            provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTree"],
                            useExisting: MatTree
                        }]
                    },]
                },
            ];
            /** @nocollapse */
            MatTree.propDecorators = {
                "_nodeOutlet": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
                    args: [MatTreeNodeOutlet,]
                },],
            };
            return MatTree;
        }(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTree"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Wrapper for the CdkTree's toggle with Material design styles.
         * @template T
         */
        var MatTreeNodeToggle = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatTreeNodeToggle, _super);

            function MatTreeNodeToggle() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.recursive = false;
                return _this;
            }

            MatTreeNodeToggle.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                        selector: '[matTreeNodeToggle]',
                        host: {
                            '(click)': '_toggle($event)',
                        },
                        providers: [{
                            provide: _angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodeToggle"],
                            useExisting: MatTreeNodeToggle
                        }]
                    },]
                },
            ];
            /** @nocollapse */
            MatTreeNodeToggle.propDecorators = {
                "recursive": [{
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
                    args: ['matTreeNodeToggleRecursive',]
                },],
            };
            return MatTreeNodeToggle;
        }(_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeNodeToggle"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        var /** @type {?} */ MAT_TREE_DIRECTIVES = [
            MatNestedTreeNode,
            MatTreeNodeDef,
            MatTreeNodePadding,
            MatTreeNodeToggle,
            MatTree,
            MatTreeNode,
            MatTreeNodeOutlet
        ];
        var MatTreeModule = /** @class */ (function () {
            function MatTreeModule() {
            }

            MatTreeModule.decorators = [
                {
                    type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                        imports: [_angular_cdk_tree__WEBPACK_IMPORTED_MODULE_2__["CdkTreeModule"], _angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"]],
                        exports: MAT_TREE_DIRECTIVES,
                        declarations: MAT_TREE_DIRECTIVES,
                    },]
                },
            ];
            return MatTreeModule;
        }());

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Tree flattener to convert a normal type of node to node with children & level information.
         * Transform nested nodes of type `T` to flattened nodes of type `F`.
         *
         * For example, the input data of type `T` is nested, and contains its children data:
         *   SomeNode: {
 *     key: 'Fruits',
 *     children: [
 *       NodeOne: {
 *         key: 'Apple',
 *       },
 *       NodeTwo: {
 *        key: 'Pear',
 *      }
 *    ]
 *  }
         *  After flattener flatten the tree, the structure will become
         *  SomeNode: {
 *    key: 'Fruits',
 *    expandable: true,
 *    level: 1
 *  },
         *  NodeOne: {
 *    key: 'Apple',
 *    expandable: false,
 *    level: 2
 *  },
         *  NodeTwo: {
 *   key: 'Pear',
 *   expandable: false,
 *   level: 2
 * }
         * and the output flattened type is `F` with additional information.
         * @template T, F
         */
        var /**
         * Tree flattener to convert a normal type of node to node with children & level information.
         * Transform nested nodes of type `T` to flattened nodes of type `F`.
         *
         * For example, the input data of type `T` is nested, and contains its children data:
         *   SomeNode: {
 *     key: 'Fruits',
 *     children: [
 *       NodeOne: {
 *         key: 'Apple',
 *       },
 *       NodeTwo: {
 *        key: 'Pear',
 *      }
 *    ]
 *  }
         *  After flattener flatten the tree, the structure will become
         *  SomeNode: {
 *    key: 'Fruits',
 *    expandable: true,
 *    level: 1
 *  },
         *  NodeOne: {
 *    key: 'Apple',
 *    expandable: false,
 *    level: 2
 *  },
         *  NodeTwo: {
 *   key: 'Pear',
 *   expandable: false,
 *   level: 2
 * }
         * and the output flattened type is `F` with additional information.
         * @template T, F
         */
        MatTreeFlattener = /** @class */ (function () {
            function MatTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {
                this.transformFunction = transformFunction;
                this.getLevel = getLevel;
                this.isExpandable = isExpandable;
                this.getChildren = getChildren;
            }

            /**
             * @param {?} node
             * @param {?} level
             * @param {?} resultNodes
             * @param {?} parentMap
             * @return {?}
             */
            MatTreeFlattener.prototype._flattenNode = /**
             * @param {?} node
             * @param {?} level
             * @param {?} resultNodes
             * @param {?} parentMap
             * @return {?}
             */
            function (node, level, resultNodes, parentMap) {
                var _this = this;
                var /** @type {?} */ flatNode = this.transformFunction(node, level);
                resultNodes.push(flatNode);
                if (this.isExpandable(flatNode)) {
                    this.getChildren(node).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["take"])(1)).subscribe(function (children) {
                        children.forEach(function (child, index) {
                            var /** @type {?} */ childParentMap = parentMap.slice();
                            childParentMap.push(index != children.length - 1);
                            _this._flattenNode(child, level + 1, resultNodes, childParentMap);
                        });
                    });
                }
                return resultNodes;
            };
            /**
             * Flatten a list of node type T to flattened version of node F.
             * Please note that type T may be nested, and the length of `structuredData` may be different
             * from that of returned list `F[]`.
             */
            /**
             * Flatten a list of node type T to flattened version of node F.
             * Please note that type T may be nested, and the length of `structuredData` may be different
             * from that of returned list `F[]`.
             * @param {?} structuredData
             * @return {?}
             */
            MatTreeFlattener.prototype.flattenNodes = /**
             * Flatten a list of node type T to flattened version of node F.
             * Please note that type T may be nested, and the length of `structuredData` may be different
             * from that of returned list `F[]`.
             * @param {?} structuredData
             * @return {?}
             */
            function (structuredData) {
                var _this = this;
                var /** @type {?} */ resultNodes = [];
                structuredData.forEach(function (node) {
                    return _this._flattenNode(node, 0, resultNodes, []);
                });
                return resultNodes;
            };
            /**
             * Expand flattened node with current expansion status.
             * The returned list may have different length.
             */
            /**
             * Expand flattened node with current expansion status.
             * The returned list may have different length.
             * @param {?} nodes
             * @param {?} treeControl
             * @return {?}
             */
            MatTreeFlattener.prototype.expandFlattenedNodes = /**
             * Expand flattened node with current expansion status.
             * The returned list may have different length.
             * @param {?} nodes
             * @param {?} treeControl
             * @return {?}
             */
            function (nodes, treeControl) {
                var _this = this;
                var /** @type {?} */ results = [];
                var /** @type {?} */ currentExpand = [];
                currentExpand[0] = true;
                nodes.forEach(function (node) {
                    var /** @type {?} */ expand = true;
                    for (var /** @type {?} */ i = 0; i <= _this.getLevel(node); i++) {
                        expand = expand && currentExpand[i];
                    }
                    if (expand) {
                        results.push(node);
                    }
                    if (_this.isExpandable(node)) {
                        currentExpand[_this.getLevel(node) + 1] = treeControl.isExpanded(node);
                    }
                });
                return results;
            };
            return MatTreeFlattener;
        }());
        /**
         * Data source for flat tree.
         * The data source need to handle expansion/collapsion of the tree node and change the data feed
         * to `MatTree`.
         * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted
         * to type `F` for `MatTree` to consume.
         * @template T, F
         */
        var /**
         * Data source for flat tree.
         * The data source need to handle expansion/collapsion of the tree node and change the data feed
         * to `MatTree`.
         * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted
         * to type `F` for `MatTree` to consume.
         * @template T, F
         */
        MatTreeFlatDataSource = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatTreeFlatDataSource, _super);

            function MatTreeFlatDataSource(treeControl, treeFlattener, initialData) {
                if (initialData === void 0) {
                    initialData = [];
                }
                var _this = _super.call(this) || this;
                _this.treeControl = treeControl;
                _this.treeFlattener = treeFlattener;
                _this._flattenedData = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"]([]);
                _this._expandedData = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"]([]);
                _this._data = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"](initialData);
                return _this;
            }

            Object.defineProperty(MatTreeFlatDataSource.prototype, "data", {
                get: /**
                 * @return {?}
                 */
                function () {
                    return this._data.value;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._data.next(value);
                    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));
                    this.treeControl.dataNodes = this._flattenedData.value;
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @param {?} collectionViewer
             * @return {?}
             */
            MatTreeFlatDataSource.prototype.connect = /**
             * @param {?} collectionViewer
             * @return {?}
             */
            function (collectionViewer) {
                var _this = this;
                var /** @type {?} */ changes = [
                    collectionViewer.viewChange,
                    /** @type {?} */ ((this.treeControl.expansionModel.onChange)),
                    this._flattenedData
                ];
                return rxjs__WEBPACK_IMPORTED_MODULE_6__["merge"].apply(void 0, changes).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["map"])(function () {
                    _this._expandedData.next(_this.treeFlattener.expandFlattenedNodes(_this._flattenedData.value, _this.treeControl));
                    return _this._expandedData.value;
                }));
            };
            /**
             * @return {?}
             */
            MatTreeFlatDataSource.prototype.disconnect = /**
             * @return {?}
             */
            function () {
                // no op
            };
            return MatTreeFlatDataSource;
        }(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__["DataSource"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */
        /**
         * Data source for nested tree.
         *
         * The data source for nested tree doesn't have to consider node flattener, or the way to expand
         * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.
         * @template T
         */
        var /**
         * Data source for nested tree.
         *
         * The data source for nested tree doesn't have to consider node flattener, or the way to expand
         * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.
         * @template T
         */
        MatTreeNestedDataSource = /** @class */ (function (_super) {
            Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__extends"])(MatTreeNestedDataSource, _super);

            function MatTreeNestedDataSource() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this._data = new rxjs__WEBPACK_IMPORTED_MODULE_6__["BehaviorSubject"]([]);
                return _this;
            }

            Object.defineProperty(MatTreeNestedDataSource.prototype, "data", {
                /**
                 * Data for the nested treee
                 */
                get: /**
                 * Data for the nested treee
                 * @return {?}
                 */
                function () {
                    return this._data.value;
                },
                set: /**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    this._data.next(value);
                },
                enumerable: true,
                configurable: true
            });
            /**
             * @param {?} collectionViewer
             * @return {?}
             */
            MatTreeNestedDataSource.prototype.connect = /**
             * @param {?} collectionViewer
             * @return {?}
             */
            function (collectionViewer) {
                var _this = this;
                return rxjs__WEBPACK_IMPORTED_MODULE_6__["merge"].apply(void 0, [collectionViewer.viewChange, this._data]).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["map"])(function () {
                    return _this.data;
                }));
            };
            /**
             * @return {?}
             */
            MatTreeNestedDataSource.prototype.disconnect = /**
             * @return {?}
             */
            function () {
                // no op
            };
            return MatTreeNestedDataSource;
        }(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_5__["DataSource"]));

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */

        /**
         * @fileoverview added by tsickle
         * @suppress {checkTypes} checked by tsc
         */


//# sourceMappingURL=tree.es5.js.map


        /***/
    }),

    /***/ "./node_modules/@angular/material/grid-list/typings/index.ngfactory.js":
    /*!*****************************************************************************!*\
  !*** ./node_modules/@angular/material/grid-list/typings/index.ngfactory.js ***!
  \*****************************************************************************/
    /*! exports provided: MatGridListModuleNgFactory, RenderType_MatGridList, View_MatGridList_0, View_MatGridList_Host_0, MatGridListNgFactory, RenderType_MatGridTile, View_MatGridTile_0, View_MatGridTile_Host_0, MatGridTileNgFactory, RenderType_MatGridTileText, View_MatGridTileText_0, View_MatGridTileText_Host_0, MatGridTileTextNgFactory */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatGridListModuleNgFactory", function () {
            return MatGridListModuleNgFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_MatGridList", function () {
            return RenderType_MatGridList;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatGridList_0", function () {
            return View_MatGridList_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatGridList_Host_0", function () {
            return View_MatGridList_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatGridListNgFactory", function () {
            return MatGridListNgFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_MatGridTile", function () {
            return RenderType_MatGridTile;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatGridTile_0", function () {
            return View_MatGridTile_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatGridTile_Host_0", function () {
            return View_MatGridTile_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatGridTileNgFactory", function () {
            return MatGridTileNgFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_MatGridTileText", function () {
            return RenderType_MatGridTileText;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatGridTileText_0", function () {
            return View_MatGridTileText_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatGridTileText_Host_0", function () {
            return View_MatGridTileText_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatGridTileTextNgFactory", function () {
            return MatGridTileTextNgFactory;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material/grid-list */ "./node_modules/@angular/material/esm5/grid-list.es5.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */




        var MatGridListModuleNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcmf"](_angular_material_grid_list__WEBPACK_IMPORTED_MODULE_1__["MatGridListModule"], [], function (_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmod"]([_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](512, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵCodegenComponentFactoryResolver"], [[8, []], [3, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleRef"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["BidiModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatCommonModule"], [[2, _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MATERIAL_SANITY_CHECKS"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatLineModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__["MatLineModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_1__["MatGridListModule"], _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_1__["MatGridListModule"], [])]);
        });

        var styles_MatGridList = [".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}"];
        var RenderType_MatGridList = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcrt"]({
            encapsulation: 2,
            styles: styles_MatGridList,
            data: {}
        });

        function View_MatGridList_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](2, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 1, "div", [], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 0)], null, null);
        }

        function View_MatGridList_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 2, "mat-grid-list", [["class", "mat-grid-list"]], null, null, null, View_MatGridList_0, RenderType_MatGridList)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 2211840, null, 1, _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_1__["MatGridList"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], [2, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__["Directionality"]]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](603979776, 1, {_tiles: 1})], function (_ck, _v) {
                _ck(_v, 1, 0);
            }, null);
        }

        var MatGridListNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵccf"]("mat-grid-list", _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_1__["MatGridList"], View_MatGridList_Host_0, {
            cols: "cols",
            gutterSize: "gutterSize",
            rowHeight: "rowHeight"
        }, {}, ["*"]);

        var styles_MatGridTile = [".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}"];
        var RenderType_MatGridTile = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcrt"]({
            encapsulation: 2,
            styles: styles_MatGridTile,
            data: {}
        });

        function View_MatGridTile_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](2, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 1, "figure", [["class", "mat-figure"]], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 0)], null, null);
        }

        function View_MatGridTile_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 1, "mat-grid-tile", [["class", "mat-grid-tile"]], null, null, null, View_MatGridTile_0, RenderType_MatGridTile)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 49152, null, 0, _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_1__["MatGridTile"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]], null, null)], null, null);
        }

        var MatGridTileNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵccf"]("mat-grid-tile", _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_1__["MatGridTile"], View_MatGridTile_Host_0, {
            rowspan: "rowspan",
            colspan: "colspan"
        }, {}, ["*"]);

        var styles_MatGridTileText = [];
        var RenderType_MatGridTileText = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcrt"]({
            encapsulation: 2,
            styles: styles_MatGridTileText,
            data: {}
        });

        function View_MatGridTileText_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](2, [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 0), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](1, 0, null, null, 1, "div", [["class", "mat-grid-list-text"]], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 1), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 2)], null, null);
        }

        function View_MatGridTileText_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 2, "mat-grid-tile-header", [], null, null, null, View_MatGridTileText_0, RenderType_MatGridTileText)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 1097728, null, 1, _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_1__["MatGridTileText"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](603979776, 1, {_lines: 1})], null, null);
        }

        var MatGridTileTextNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵccf"]("mat-grid-tile-header, mat-grid-tile-footer", _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_1__["MatGridTileText"], View_MatGridTileText_Host_0, {}, {}, ["[mat-grid-avatar], [matGridAvatar]", "[mat-line], [matLine]", "*"]);


        /***/
    }),

    /***/ "./node_modules/@angular/material/menu/typings/index.ngfactory.js":
    /*!************************************************************************!*\
  !*** ./node_modules/@angular/material/menu/typings/index.ngfactory.js ***!
  \************************************************************************/
    /*! exports provided: MatMenuModuleNgFactory, RenderType_MatMenu, View_MatMenu_0, View_MatMenu_Host_0, MatMenuNgFactory, RenderType_MatMenuItem, View_MatMenuItem_0, View_MatMenuItem_Host_0, MatMenuItemNgFactory */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatMenuModuleNgFactory", function () {
            return MatMenuModuleNgFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_MatMenu", function () {
            return RenderType_MatMenu;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatMenu_0", function () {
            return View_MatMenu_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatMenu_Host_0", function () {
            return View_MatMenu_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatMenuNgFactory", function () {
            return MatMenuNgFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_MatMenuItem", function () {
            return RenderType_MatMenuItem;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatMenuItem_0", function () {
            return View_MatMenuItem_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatMenuItem_Host_0", function () {
            return View_MatMenuItem_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatMenuItemNgFactory", function () {
            return MatMenuItemNgFactory;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_material_menu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material/menu */ "./node_modules/@angular/material/esm5/menu.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm5/platform.es5.js");
        /* harmony import */
        var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm5/portal.es5.js");
        /* harmony import */
        var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm5/scrolling.es5.js");
        /* harmony import */
        var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm5/animations.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */











        var MatMenuModuleNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcmf"](_angular_material_menu__WEBPACK_IMPORTED_MODULE_1__["MatMenuModule"], [], function (_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmod"]([_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](512, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵCodegenComponentFactoryResolver"], [[8, []], [3, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleRef"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](4608, _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgLocalization"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgLocaleLocalization"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"], [2, _angular_common__WEBPACK_IMPORTED_MODULE_2__["ɵangular_packages_common_common_a"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](4608, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["Overlay"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["Overlay"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["ScrollStrategyOptions"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["OverlayContainer"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["OverlayPositionBuilder"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["OverlayKeyboardDispatcher"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["Directionality"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](5120, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["ɵc"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["ɵd"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["Overlay"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](5120, _angular_material_menu__WEBPACK_IMPORTED_MODULE_1__["MAT_MENU_SCROLL_STRATEGY"], _angular_material_menu__WEBPACK_IMPORTED_MODULE_1__["ɵd24"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["Overlay"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["BidiModule"], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["BidiModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"], [[2, _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MATERIAL_SANITY_CHECKS"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["PlatformModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["PlatformModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatRippleModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatRippleModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__["PortalModule"], _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__["PortalModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__["ScrollDispatchModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__["ScrollDispatchModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["OverlayModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["OverlayModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_menu__WEBPACK_IMPORTED_MODULE_1__["MatMenuModule"], _angular_material_menu__WEBPACK_IMPORTED_MODULE_1__["MatMenuModule"], [])]);
        });

        var styles_MatMenu = [".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:2px;outline:0}.mat-menu-panel:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content{padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;position:relative}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:'';display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}.mat-menu-panel.ng-animating .mat-menu-item-submenu-trigger{pointer-events:none}button.mat-menu-item{width:100%}.mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}"];
        var RenderType_MatMenu = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcrt"]({
            encapsulation: 2,
            styles: styles_MatMenu,
            data: {
                "animation": [{
                    type: 7,
                    name: "transformMenu",
                    definitions: [{
                        type: 0,
                        name: "void",
                        styles: {type: 6, styles: {opacity: 0, transform: "scale(0.01, 0.01)"}, offset: null},
                        options: undefined
                    }, {
                        type: 1,
                        expr: "void => enter",
                        animation: {
                            type: 2,
                            steps: [{
                                type: 11,
                                selector: ".mat-menu-content",
                                animation: {type: 6, styles: {opacity: 0}, offset: null},
                                options: null
                            }, {
                                type: 4,
                                styles: {type: 6, styles: {opacity: 1, transform: "scale(1, 0.5)"}, offset: null},
                                timings: "100ms linear"
                            }, {
                                type: 3,
                                steps: [{
                                    type: 11,
                                    selector: ".mat-menu-content",
                                    animation: {
                                        type: 4,
                                        styles: {type: 6, styles: {opacity: 1}, offset: null},
                                        timings: "400ms cubic-bezier(0.55, 0, 0.55, 0.2)"
                                    },
                                    options: null
                                }, {
                                    type: 4,
                                    styles: {type: 6, styles: {transform: "scale(1, 1)"}, offset: null},
                                    timings: "300ms cubic-bezier(0.25, 0.8, 0.25, 1)"
                                }],
                                options: null
                            }],
                            options: null
                        },
                        options: null
                    }, {
                        type: 1,
                        expr: "* => void",
                        animation: {
                            type: 4,
                            styles: {type: 6, styles: {opacity: 0}, offset: null},
                            timings: "150ms 50ms linear"
                        },
                        options: null
                    }],
                    options: {}
                }, {
                    type: 7,
                    name: "fadeInItems",
                    definitions: [{
                        type: 0,
                        name: "showing",
                        styles: {type: 6, styles: {opacity: 1}, offset: null},
                        options: undefined
                    }, {
                        type: 1,
                        expr: "void => *",
                        animation: [{type: 6, styles: {opacity: 0}, offset: null}, {
                            type: 4,
                            styles: null,
                            timings: "400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)"
                        }],
                        options: null
                    }],
                    options: {}
                }]
            }
        });

        function View_MatMenu_1(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 3, "div", [["class", "mat-menu-panel"], ["role", "menu"], ["tabindex", "-1"]], [[24, "@transformMenu", 0]], [[null, "keydown"], [null, "click"], [null, "@transformMenu.start"], [null, "@transformMenu.done"]], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (("keydown" === en)) {
                    var pd_0 = (_co._handleKeydown($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (("click" === en)) {
                    var pd_1 = (_co.closed.emit("click") !== false);
                    ad = (pd_1 && ad);
                }
                if (("@transformMenu.start" === en)) {
                    var pd_2 = ((_co._isAnimating = true) !== false);
                    ad = (pd_2 && ad);
                }
                if (("@transformMenu.done" === en)) {
                    var pd_3 = (_co._onAnimationDone($event) !== false);
                    ad = (pd_3 && ad);
                }
                return ad;
            }, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 278528, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgClass"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]], {
                klass: [0, "klass"],
                ngClass: [1, "ngClass"]
            }, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](2, 0, null, null, 1, "div", [["class", "mat-menu-content"]], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 0)], function (_ck, _v) {
                var _co = _v.component;
                var currVal_1 = "mat-menu-panel";
                var currVal_2 = _co._classList;
                _ck(_v, 1, 0, currVal_1, currVal_2);
            }, function (_ck, _v) {
                var _co = _v.component;
                var currVal_0 = _co._panelAnimationState;
                _ck(_v, 0, 0, currVal_0);
            });
        }

        function View_MatMenu_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](2, [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](402653184, 1, {templateRef: 0}), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵand"](0, [[1, 2]], null, 0, null, View_MatMenu_1))], null, null);
        }

        function View_MatMenu_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 4, "mat-menu", [], null, null, null, View_MatMenu_0, RenderType_MatMenu)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵprd"](6144, null, _angular_material_menu__WEBPACK_IMPORTED_MODULE_1__["ɵf24"], null, [_angular_material_menu__WEBPACK_IMPORTED_MODULE_1__["MatMenu"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](2, 1228800, null, 2, _angular_material_menu__WEBPACK_IMPORTED_MODULE_1__["MatMenu"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"], _angular_material_menu__WEBPACK_IMPORTED_MODULE_1__["MAT_MENU_DEFAULT_OPTIONS"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](603979776, 1, {items: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](335544320, 2, {lazyContent: 0})], null, null);
        }

        var MatMenuNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵccf"]("mat-menu", _angular_material_menu__WEBPACK_IMPORTED_MODULE_1__["MatMenu"], View_MatMenu_Host_0, {
            backdropClass: "backdropClass",
            xPosition: "xPosition",
            yPosition: "yPosition",
            overlapTrigger: "overlapTrigger",
            hasBackdrop: "hasBackdrop",
            panelClass: "class",
            classList: "classList"
        }, {closed: "closed", close: "close"}, ["*"]);

        var styles_MatMenuItem = [];
        var RenderType_MatMenuItem = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcrt"]({
            encapsulation: 2,
            styles: styles_MatMenuItem,
            data: {}
        });

        function View_MatMenuItem_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](2, [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 0), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](1, 0, null, null, 1, "div", [["class", "mat-menu-ripple mat-ripple"], ["matRipple", ""]], [[2, "mat-ripple-unbounded", null]], null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](2, 212992, null, 0, _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatRipple"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["Platform"], [2, _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MAT_RIPPLE_GLOBAL_OPTIONS"]], [2, _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_9__["ANIMATION_MODULE_TYPE"]]], {
                disabled: [0, "disabled"],
                trigger: [1, "trigger"]
            }, null)], function (_ck, _v) {
                var _co = _v.component;
                var currVal_1 = (_co.disableRipple || _co.disabled);
                var currVal_2 = _co._getHostElement();
                _ck(_v, 2, 0, currVal_1, currVal_2);
            }, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 2).unbounded;
                _ck(_v, 1, 0, currVal_0);
            });
        }

        function View_MatMenuItem_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 1, "div", [["class", "mat-menu-item"], ["mat-menu-item", ""], ["role", "menuitem"]], [[2, "mat-menu-item-highlighted", null], [2, "mat-menu-item-submenu-trigger", null], [1, "tabindex", 0], [1, "aria-disabled", 0], [1, "disabled", 0]], [[null, "click"], [null, "mouseenter"]], function (_v, en, $event) {
                var ad = true;
                if (("click" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._checkDisabled($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (("mouseenter" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._handleMouseEnter() !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, View_MatMenuItem_0, RenderType_MatMenuItem)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 180224, null, 0, _angular_material_menu__WEBPACK_IMPORTED_MODULE_1__["MatMenuItem"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_10__["FocusMonitor"], [2, _angular_material_menu__WEBPACK_IMPORTED_MODULE_1__["ɵf24"]]], null, null)], null, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._highlighted;
                var currVal_1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._triggersSubmenu;
                var currVal_2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._getTabIndex();
                var currVal_3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).disabled.toString();
                var currVal_4 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).disabled || null);
                _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4);
            });
        }

        var MatMenuItemNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵccf"]("[mat-menu-item]", _angular_material_menu__WEBPACK_IMPORTED_MODULE_1__["MatMenuItem"], View_MatMenuItem_Host_0, {
            disabled: "disabled",
            disableRipple: "disableRipple"
        }, {}, ["*"]);


        /***/
    }),

    /***/ "./node_modules/@angular/material/paginator/typings/index.ngfactory.js":
    /*!*****************************************************************************!*\
  !*** ./node_modules/@angular/material/paginator/typings/index.ngfactory.js ***!
  \*****************************************************************************/
    /*! exports provided: MatPaginatorModuleNgFactory, RenderType_MatPaginator, View_MatPaginator_0, View_MatPaginator_Host_0, MatPaginatorNgFactory */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatPaginatorModuleNgFactory", function () {
            return MatPaginatorModuleNgFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_MatPaginator", function () {
            return RenderType_MatPaginator;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatPaginator_0", function () {
            return View_MatPaginator_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatPaginator_Host_0", function () {
            return View_MatPaginator_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatPaginatorNgFactory", function () {
            return MatPaginatorNgFactory;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material/paginator */ "./node_modules/@angular/material/esm5/paginator.es5.js");
        /* harmony import */
        var _tooltip_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tooltip/typings/index.ngfactory */ "./node_modules/@angular/material/tooltip/typings/index.ngfactory.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_material_select__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/select */ "./node_modules/@angular/material/esm5/select.es5.js");
        /* harmony import */
        var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/tooltip */ "./node_modules/@angular/material/esm5/tooltip.es5.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm5/platform.es5.js");
        /* harmony import */
        var _angular_material_button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm5/button.es5.js");
        /* harmony import */
        var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm5/portal.es5.js");
        /* harmony import */
        var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm5/scrolling.es5.js");
        /* harmony import */
        var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/form-field */ "./node_modules/@angular/material/esm5/form-field.es5.js");
        /* harmony import */
        var _core_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../core/typings/index.ngfactory */ "./node_modules/@angular/material/core/typings/index.ngfactory.js");
        /* harmony import */
        var _form_field_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../form-field/typings/index.ngfactory */ "./node_modules/@angular/material/form-field/typings/index.ngfactory.js");
        /* harmony import */
        var _select_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../select/typings/index.ngfactory */ "./node_modules/@angular/material/select/typings/index.ngfactory.js");
        /* harmony import */
        var _angular_forms__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
        /* harmony import */
        var _button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../button/typings/index.ngfactory */ "./node_modules/@angular/material/button/typings/index.ngfactory.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */




















        var MatPaginatorModuleNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcmf"](_angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__["MatPaginatorModule"], [], function (_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmod"]([_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](512, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵCodegenComponentFactoryResolver"], [[8, [_tooltip_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_2__["TooltipComponentNgFactory"]]], [3, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleRef"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](4608, _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgLocalization"], _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgLocaleLocalization"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"], [2, _angular_common__WEBPACK_IMPORTED_MODULE_3__["ɵangular_packages_common_common_a"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](4608, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["Overlay"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["Overlay"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["ScrollStrategyOptions"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["OverlayContainer"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["OverlayPositionBuilder"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["OverlayKeyboardDispatcher"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"], _angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](5120, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["ɵc"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["ɵd"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["Overlay"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](5120, _angular_material_select__WEBPACK_IMPORTED_MODULE_6__["MAT_SELECT_SCROLL_STRATEGY"], _angular_material_select__WEBPACK_IMPORTED_MODULE_6__["MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["Overlay"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](5120, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MAT_TOOLTIP_SCROLL_STRATEGY"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["Overlay"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](5120, _angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__["MatPaginatorIntl"], _angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__["MAT_PAGINATOR_INTL_PROVIDER_FACTORY"], [[3, _angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__["MatPaginatorIntl"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_common__WEBPACK_IMPORTED_MODULE_3__["CommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_3__["CommonModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["BidiModule"], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["BidiModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatCommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatCommonModule"], [[2, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MATERIAL_SANITY_CHECKS"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__["PlatformModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__["PlatformModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatRippleModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatRippleModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_button__WEBPACK_IMPORTED_MODULE_10__["MatButtonModule"], _angular_material_button__WEBPACK_IMPORTED_MODULE_10__["MatButtonModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_11__["PortalModule"], _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_11__["PortalModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_12__["ScrollDispatchModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_12__["ScrollDispatchModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["OverlayModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["OverlayModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatPseudoCheckboxModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatPseudoCheckboxModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatOptionModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatOptionModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_13__["MatFormFieldModule"], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_13__["MatFormFieldModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_select__WEBPACK_IMPORTED_MODULE_6__["MatSelectModule"], _angular_material_select__WEBPACK_IMPORTED_MODULE_6__["MatSelectModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MatTooltipModule"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MatTooltipModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__["MatPaginatorModule"], _angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__["MatPaginatorModule"], [])]);
        });

        var styles_MatPaginator = [".mat-paginator{display:block}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;min-height:56px;padding:0 8px;flex-wrap:wrap-reverse}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center;min-height:48px}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}"];
        var RenderType_MatPaginator = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcrt"]({
            encapsulation: 2,
            styles: styles_MatPaginator,
            data: {}
        });

        function View_MatPaginator_3(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 2, "mat-option", [["class", "mat-option"], ["role", "option"]], [[1, "tabindex", 0], [2, "mat-selected", null], [2, "mat-option-multiple", null], [2, "mat-active", null], [8, "id", 0], [1, "aria-selected", 0], [1, "aria-disabled", 0], [2, "mat-option-disabled", null]], [[null, "click"], [null, "keydown"]], function (_v, en, $event) {
                var ad = true;
                if (("click" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._selectViaInteraction() !== false);
                    ad = (pd_0 && ad);
                }
                if (("keydown" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._handleKeydown($event) !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, _core_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_14__["View_MatOption_0"], _core_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_14__["RenderType_MatOption"])), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 8568832, [[8, 4]], 0, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatOption"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"], [2, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MAT_OPTION_PARENT_COMPONENT"]], [2, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatOptgroup"]]], {value: [0, "value"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵted"](2, 0, ["", ""]))], function (_ck, _v) {
                var currVal_8 = _v.context.$implicit;
                _ck(_v, 1, 0, currVal_8);
            }, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._getTabIndex();
                var currVal_1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).selected;
                var currVal_2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).multiple;
                var currVal_3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).active;
                var currVal_4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).id;
                var currVal_5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).selected.toString();
                var currVal_6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).disabled.toString();
                var currVal_7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).disabled;
                _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7);
                var currVal_9 = _v.context.$implicit;
                _ck(_v, 2, 0, currVal_9);
            });
        }

        function View_MatPaginator_2(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 17, "mat-form-field", [["class", "mat-paginator-page-size-select mat-form-field"]], [[2, "mat-form-field-appearance-standard", null], [2, "mat-form-field-appearance-fill", null], [2, "mat-form-field-appearance-outline", null], [2, "mat-form-field-appearance-legacy", null], [2, "mat-form-field-invalid", null], [2, "mat-form-field-can-float", null], [2, "mat-form-field-should-float", null], [2, "mat-form-field-hide-placeholder", null], [2, "mat-form-field-disabled", null], [2, "mat-form-field-autofilled", null], [2, "mat-focused", null], [2, "mat-accent", null], [2, "mat-warn", null], [2, "ng-untouched", null], [2, "ng-touched", null], [2, "ng-pristine", null], [2, "ng-dirty", null], [2, "ng-valid", null], [2, "ng-invalid", null], [2, "ng-pending", null]], null, null, _form_field_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_15__["View_MatFormField_0"], _form_field_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_15__["RenderType_MatFormField"])), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 7389184, null, 7, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_13__["MatFormField"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"], [2, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MAT_LABEL_GLOBAL_OPTIONS"]], [2, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"]], [2, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_13__["MAT_FORM_FIELD_DEFAULT_OPTIONS"]], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__["Platform"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](335544320, 1, {_control: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](335544320, 2, {_placeholderChild: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](335544320, 3, {_labelChild: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](603979776, 4, {_errorChildren: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](603979776, 5, {_hintChildren: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](603979776, 6, {_prefixChildren: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](603979776, 7, {_suffixChildren: 1}), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](9, 0, null, 1, 8, "mat-select", [["class", "mat-select"], ["role", "listbox"]], [[1, "id", 0], [1, "tabindex", 0], [1, "aria-label", 0], [1, "aria-labelledby", 0], [1, "aria-required", 0], [1, "aria-disabled", 0], [1, "aria-invalid", 0], [1, "aria-owns", 0], [1, "aria-multiselectable", 0], [1, "aria-describedby", 0], [1, "aria-activedescendant", 0], [2, "mat-select-disabled", null], [2, "mat-select-invalid", null], [2, "mat-select-required", null]], [[null, "selectionChange"], [null, "keydown"], [null, "focus"], [null, "blur"]], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (("keydown" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11)._handleKeydown($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (("focus" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11)._onFocus() !== false);
                    ad = (pd_1 && ad);
                }
                if (("blur" === en)) {
                    var pd_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11)._onBlur() !== false);
                    ad = (pd_2 && ad);
                }
                if (("selectionChange" === en)) {
                    var pd_3 = (_co._changePageSize($event.value) !== false);
                    ad = (pd_3 && ad);
                }
                return ad;
            }, _select_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_16__["View_MatSelect_0"], _select_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_16__["RenderType_MatSelect"])), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵprd"](6144, null, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MAT_OPTION_PARENT_COMPONENT"], null, [_angular_material_select__WEBPACK_IMPORTED_MODULE_6__["MatSelect"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](11, 2080768, null, 3, _angular_material_select__WEBPACK_IMPORTED_MODULE_6__["MatSelect"], [_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_12__["ViewportRuler"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"], _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["ErrorStateMatcher"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], [2, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"]], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_17__["NgForm"]], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_17__["FormGroupDirective"]], [2, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_13__["MatFormField"]], [8, null], [8, null], _angular_material_select__WEBPACK_IMPORTED_MODULE_6__["MAT_SELECT_SCROLL_STRATEGY"]], {
                value: [0, "value"],
                ariaLabel: [1, "ariaLabel"]
            }, {selectionChange: "selectionChange"}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](603979776, 8, {options: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](603979776, 9, {optionGroups: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](335544320, 10, {customTrigger: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵprd"](2048, [[1, 4]], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_13__["MatFormFieldControl"], null, [_angular_material_select__WEBPACK_IMPORTED_MODULE_6__["MatSelect"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵand"](16777216, null, 1, 1, null, View_MatPaginator_3)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](17, 802816, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgForOf"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"]], {ngForOf: [0, "ngForOf"]}, null)], function (_ck, _v) {
                var _co = _v.component;
                var currVal_34 = _co.pageSize;
                var currVal_35 = _co._intl.itemsPerPageLabel;
                _ck(_v, 11, 0, currVal_34, currVal_35);
                var currVal_36 = _co._displayedPageSizeOptions;
                _ck(_v, 17, 0, currVal_36);
            }, function (_ck, _v) {
                var currVal_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).appearance == "standard");
                var currVal_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).appearance == "fill");
                var currVal_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).appearance == "outline");
                var currVal_3 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).appearance == "legacy");
                var currVal_4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._control.errorState;
                var currVal_5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._canLabelFloat;
                var currVal_6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._shouldLabelFloat();
                var currVal_7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._hideControlPlaceholder();
                var currVal_8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._control.disabled;
                var currVal_9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._control.autofilled;
                var currVal_10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._control.focused;
                var currVal_11 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).color == "accent");
                var currVal_12 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).color == "warn");
                var currVal_13 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._shouldForward("untouched");
                var currVal_14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._shouldForward("touched");
                var currVal_15 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._shouldForward("pristine");
                var currVal_16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._shouldForward("dirty");
                var currVal_17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._shouldForward("valid");
                var currVal_18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._shouldForward("invalid");
                var currVal_19 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._shouldForward("pending");
                _ck(_v, 0, 1, [currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7, currVal_8, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17, currVal_18, currVal_19]);
                var currVal_20 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11).id;
                var currVal_21 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11).tabIndex;
                var currVal_22 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11)._ariaLabel;
                var currVal_23 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11).ariaLabelledby;
                var currVal_24 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11).required.toString();
                var currVal_25 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11).disabled.toString();
                var currVal_26 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11).errorState;
                var currVal_27 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11).panelOpen ? _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11)._optionIds : null);
                var currVal_28 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11).multiple;
                var currVal_29 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11)._ariaDescribedby || null);
                var currVal_30 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11)._getAriaActiveDescendant();
                var currVal_31 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11).disabled;
                var currVal_32 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11).errorState;
                var currVal_33 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 11).required;
                _ck(_v, 9, 1, [currVal_20, currVal_21, currVal_22, currVal_23, currVal_24, currVal_25, currVal_26, currVal_27, currVal_28, currVal_29, currVal_30, currVal_31, currVal_32, currVal_33]);
            });
        }

        function View_MatPaginator_4(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 1, "div", [], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵted"](1, null, ["", ""]))], null, function (_ck, _v) {
                var _co = _v.component;
                var currVal_0 = _co.pageSize;
                _ck(_v, 1, 0, currVal_0);
            });
        }

        function View_MatPaginator_1(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 6, "div", [["class", "mat-paginator-page-size"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](1, 0, null, null, 1, "div", [["class", "mat-paginator-page-size-label"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵted"](2, null, ["", ""])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵand"](16777216, null, null, 1, null, View_MatPaginator_2)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](4, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgIf"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]], {ngIf: [0, "ngIf"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵand"](16777216, null, null, 1, null, View_MatPaginator_4)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](6, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgIf"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]], {ngIf: [0, "ngIf"]}, null)], function (_ck, _v) {
                var _co = _v.component;
                var currVal_1 = (_co._displayedPageSizeOptions.length > 1);
                _ck(_v, 4, 0, currVal_1);
                var currVal_2 = (_co._displayedPageSizeOptions.length <= 1);
                _ck(_v, 6, 0, currVal_2);
            }, function (_ck, _v) {
                var _co = _v.component;
                var currVal_0 = _co._intl.itemsPerPageLabel;
                _ck(_v, 2, 0, currVal_0);
            });
        }

        function View_MatPaginator_5(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 16777216, null, null, 4, "button", [["class", "mat-paginator-navigation-first"], ["mat-icon-button", ""], ["type", "button"]], [[1, "aria-label", 0], [8, "disabled", 0]], [[null, "click"], [null, "longpress"], [null, "keydown"], [null, "touchend"]], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (("longpress" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 2).show() !== false);
                    ad = (pd_0 && ad);
                }
                if (("keydown" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 2)._handleKeydown($event) !== false);
                    ad = (pd_1 && ad);
                }
                if (("touchend" === en)) {
                    var pd_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 2)._handleTouchend() !== false);
                    ad = (pd_2 && ad);
                }
                if (("click" === en)) {
                    var pd_3 = (_co.firstPage() !== false);
                    ad = (pd_3 && ad);
                }
                return ad;
            }, _button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_18__["View_MatButton_0"], _button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_18__["RenderType_MatButton"])), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 180224, null, 0, _angular_material_button__WEBPACK_IMPORTED_MODULE_10__["MatButton"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__["Platform"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_19__["FocusMonitor"]], {disabled: [0, "disabled"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](2, 147456, null, 0, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MatTooltip"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["Overlay"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_12__["ScrollDispatcher"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__["Platform"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_19__["AriaDescriber"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_19__["FocusMonitor"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MAT_TOOLTIP_SCROLL_STRATEGY"], [2, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"]], [2, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MAT_TOOLTIP_DEFAULT_OPTIONS"]]], {
                position: [0, "position"],
                message: [1, "message"]
            }, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](3, 0, null, 0, 1, ":svg:svg", [["class", "mat-paginator-icon"], ["focusable", "false"], ["viewBox", "0 0 24 24"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](4, 0, null, null, 0, ":svg:path", [["d", "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵand"](0, null, null, 0))], function (_ck, _v) {
                var _co = _v.component;
                var currVal_2 = !_co.hasPreviousPage();
                _ck(_v, 1, 0, currVal_2);
                var currVal_3 = "above";
                var currVal_4 = _co._intl.firstPageLabel;
                _ck(_v, 2, 0, currVal_3, currVal_4);
            }, function (_ck, _v) {
                var _co = _v.component;
                var currVal_0 = _co._intl.firstPageLabel;
                var currVal_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).disabled || null);
                _ck(_v, 0, 0, currVal_0, currVal_1);
            });
        }

        function View_MatPaginator_6(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 16777216, null, null, 4, "button", [["class", "mat-paginator-navigation-last"], ["mat-icon-button", ""], ["type", "button"]], [[1, "aria-label", 0], [8, "disabled", 0]], [[null, "click"], [null, "longpress"], [null, "keydown"], [null, "touchend"]], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (("longpress" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 2).show() !== false);
                    ad = (pd_0 && ad);
                }
                if (("keydown" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 2)._handleKeydown($event) !== false);
                    ad = (pd_1 && ad);
                }
                if (("touchend" === en)) {
                    var pd_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 2)._handleTouchend() !== false);
                    ad = (pd_2 && ad);
                }
                if (("click" === en)) {
                    var pd_3 = (_co.lastPage() !== false);
                    ad = (pd_3 && ad);
                }
                return ad;
            }, _button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_18__["View_MatButton_0"], _button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_18__["RenderType_MatButton"])), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 180224, null, 0, _angular_material_button__WEBPACK_IMPORTED_MODULE_10__["MatButton"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__["Platform"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_19__["FocusMonitor"]], {disabled: [0, "disabled"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](2, 147456, null, 0, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MatTooltip"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["Overlay"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_12__["ScrollDispatcher"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__["Platform"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_19__["AriaDescriber"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_19__["FocusMonitor"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MAT_TOOLTIP_SCROLL_STRATEGY"], [2, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"]], [2, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MAT_TOOLTIP_DEFAULT_OPTIONS"]]], {
                position: [0, "position"],
                message: [1, "message"]
            }, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](3, 0, null, 0, 1, ":svg:svg", [["class", "mat-paginator-icon"], ["focusable", "false"], ["viewBox", "0 0 24 24"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](4, 0, null, null, 0, ":svg:path", [["d", "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵand"](0, null, null, 0))], function (_ck, _v) {
                var _co = _v.component;
                var currVal_2 = !_co.hasNextPage();
                _ck(_v, 1, 0, currVal_2);
                var currVal_3 = "above";
                var currVal_4 = _co._intl.lastPageLabel;
                _ck(_v, 2, 0, currVal_3, currVal_4);
            }, function (_ck, _v) {
                var _co = _v.component;
                var currVal_0 = _co._intl.lastPageLabel;
                var currVal_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1).disabled || null);
                _ck(_v, 0, 0, currVal_0, currVal_1);
            });
        }

        function View_MatPaginator_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](2, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 19, "div", [["class", "mat-paginator-container"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵand"](16777216, null, null, 1, null, View_MatPaginator_1)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](2, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgIf"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]], {ngIf: [0, "ngIf"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](3, 0, null, null, 16, "div", [["class", "mat-paginator-range-actions"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](4, 0, null, null, 1, "div", [["class", "mat-paginator-range-label"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵted"](5, null, ["", ""])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵand"](16777216, null, null, 1, null, View_MatPaginator_5)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](7, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgIf"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]], {ngIf: [0, "ngIf"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](8, 16777216, null, null, 4, "button", [["class", "mat-paginator-navigation-previous"], ["mat-icon-button", ""], ["type", "button"]], [[1, "aria-label", 0], [8, "disabled", 0]], [[null, "click"], [null, "longpress"], [null, "keydown"], [null, "touchend"]], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (("longpress" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 10).show() !== false);
                    ad = (pd_0 && ad);
                }
                if (("keydown" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 10)._handleKeydown($event) !== false);
                    ad = (pd_1 && ad);
                }
                if (("touchend" === en)) {
                    var pd_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 10)._handleTouchend() !== false);
                    ad = (pd_2 && ad);
                }
                if (("click" === en)) {
                    var pd_3 = (_co.previousPage() !== false);
                    ad = (pd_3 && ad);
                }
                return ad;
            }, _button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_18__["View_MatButton_0"], _button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_18__["RenderType_MatButton"])), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](9, 180224, null, 0, _angular_material_button__WEBPACK_IMPORTED_MODULE_10__["MatButton"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__["Platform"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_19__["FocusMonitor"]], {disabled: [0, "disabled"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](10, 147456, null, 0, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MatTooltip"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["Overlay"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_12__["ScrollDispatcher"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__["Platform"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_19__["AriaDescriber"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_19__["FocusMonitor"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MAT_TOOLTIP_SCROLL_STRATEGY"], [2, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"]], [2, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MAT_TOOLTIP_DEFAULT_OPTIONS"]]], {
                position: [0, "position"],
                message: [1, "message"]
            }, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](11, 0, null, 0, 1, ":svg:svg", [["class", "mat-paginator-icon"], ["focusable", "false"], ["viewBox", "0 0 24 24"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](12, 0, null, null, 0, ":svg:path", [["d", "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](13, 16777216, null, null, 4, "button", [["class", "mat-paginator-navigation-next"], ["mat-icon-button", ""], ["type", "button"]], [[1, "aria-label", 0], [8, "disabled", 0]], [[null, "click"], [null, "longpress"], [null, "keydown"], [null, "touchend"]], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (("longpress" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 15).show() !== false);
                    ad = (pd_0 && ad);
                }
                if (("keydown" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 15)._handleKeydown($event) !== false);
                    ad = (pd_1 && ad);
                }
                if (("touchend" === en)) {
                    var pd_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 15)._handleTouchend() !== false);
                    ad = (pd_2 && ad);
                }
                if (("click" === en)) {
                    var pd_3 = (_co.nextPage() !== false);
                    ad = (pd_3 && ad);
                }
                return ad;
            }, _button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_18__["View_MatButton_0"], _button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_18__["RenderType_MatButton"])), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](14, 180224, null, 0, _angular_material_button__WEBPACK_IMPORTED_MODULE_10__["MatButton"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__["Platform"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_19__["FocusMonitor"]], {disabled: [0, "disabled"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](15, 147456, null, 0, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MatTooltip"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["Overlay"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_12__["ScrollDispatcher"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_9__["Platform"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_19__["AriaDescriber"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_19__["FocusMonitor"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MAT_TOOLTIP_SCROLL_STRATEGY"], [2, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_5__["Directionality"]], [2, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MAT_TOOLTIP_DEFAULT_OPTIONS"]]], {
                position: [0, "position"],
                message: [1, "message"]
            }, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](16, 0, null, 0, 1, ":svg:svg", [["class", "mat-paginator-icon"], ["focusable", "false"], ["viewBox", "0 0 24 24"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](17, 0, null, null, 0, ":svg:path", [["d", "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵand"](16777216, null, null, 1, null, View_MatPaginator_6)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](19, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgIf"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]], {ngIf: [0, "ngIf"]}, null)], function (_ck, _v) {
                var _co = _v.component;
                var currVal_0 = !_co.hidePageSize;
                _ck(_v, 2, 0, currVal_0);
                var currVal_2 = _co.showFirstLastButtons;
                _ck(_v, 7, 0, currVal_2);
                var currVal_5 = !_co.hasPreviousPage();
                _ck(_v, 9, 0, currVal_5);
                var currVal_6 = "above";
                var currVal_7 = _co._intl.previousPageLabel;
                _ck(_v, 10, 0, currVal_6, currVal_7);
                var currVal_10 = !_co.hasNextPage();
                _ck(_v, 14, 0, currVal_10);
                var currVal_11 = "above";
                var currVal_12 = _co._intl.nextPageLabel;
                _ck(_v, 15, 0, currVal_11, currVal_12);
                var currVal_13 = _co.showFirstLastButtons;
                _ck(_v, 19, 0, currVal_13);
            }, function (_ck, _v) {
                var _co = _v.component;
                var currVal_1 = _co._intl.getRangeLabel(_co.pageIndex, _co.pageSize, _co.length);
                _ck(_v, 5, 0, currVal_1);
                var currVal_3 = _co._intl.previousPageLabel;
                var currVal_4 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 9).disabled || null);
                _ck(_v, 8, 0, currVal_3, currVal_4);
                var currVal_8 = _co._intl.nextPageLabel;
                var currVal_9 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 14).disabled || null);
                _ck(_v, 13, 0, currVal_8, currVal_9);
            });
        }

        function View_MatPaginator_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 1, "mat-paginator", [["class", "mat-paginator"]], null, null, null, View_MatPaginator_0, RenderType_MatPaginator)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 245760, null, 0, _angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__["MatPaginator"], [_angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__["MatPaginatorIntl"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]], null, null)], function (_ck, _v) {
                _ck(_v, 1, 0);
            }, null);
        }

        var MatPaginatorNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵccf"]("mat-paginator", _angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__["MatPaginator"], View_MatPaginator_Host_0, {
            pageIndex: "pageIndex",
            length: "length",
            pageSize: "pageSize",
            pageSizeOptions: "pageSizeOptions",
            hidePageSize: "hidePageSize",
            showFirstLastButtons: "showFirstLastButtons"
        }, {page: "page"}, []);


        /***/
    }),

    /***/ "./node_modules/@angular/material/sort/typings/index.ngfactory.js":
    /*!************************************************************************!*\
  !*** ./node_modules/@angular/material/sort/typings/index.ngfactory.js ***!
  \************************************************************************/
    /*! exports provided: MatSortModuleNgFactory, RenderType_MatSortHeader, View_MatSortHeader_0, View_MatSortHeader_Host_0, MatSortHeaderNgFactory */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSortModuleNgFactory", function () {
            return MatSortModuleNgFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_MatSortHeader", function () {
            return RenderType_MatSortHeader;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatSortHeader_0", function () {
            return View_MatSortHeader_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatSortHeader_Host_0", function () {
            return View_MatSortHeader_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatSortHeaderNgFactory", function () {
            return MatSortHeaderNgFactory;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_material_sort__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material/sort */ "./node_modules/@angular/material/esm5/sort.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_cdk_table__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/table */ "./node_modules/@angular/cdk/esm5/table.es5.js");
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */




        var MatSortModuleNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcmf"](_angular_material_sort__WEBPACK_IMPORTED_MODULE_1__["MatSortModule"], [], function (_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmod"]([_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](512, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵCodegenComponentFactoryResolver"], [[8, []], [3, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleRef"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](4608, _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgLocalization"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgLocaleLocalization"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"], [2, _angular_common__WEBPACK_IMPORTED_MODULE_2__["ɵangular_packages_common_common_a"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](5120, _angular_material_sort__WEBPACK_IMPORTED_MODULE_1__["MatSortHeaderIntl"], _angular_material_sort__WEBPACK_IMPORTED_MODULE_1__["MAT_SORT_HEADER_INTL_PROVIDER_FACTORY"], [[3, _angular_material_sort__WEBPACK_IMPORTED_MODULE_1__["MatSortHeaderIntl"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_sort__WEBPACK_IMPORTED_MODULE_1__["MatSortModule"], _angular_material_sort__WEBPACK_IMPORTED_MODULE_1__["MatSortModule"], [])]);
        });

        var styles_MatSortHeader = [".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}"];
        var RenderType_MatSortHeader = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcrt"]({
            encapsulation: 2,
            styles: styles_MatSortHeader,
            data: {
                "animation": [{
                    type: 7,
                    name: "indicator",
                    definitions: [{
                        type: 0,
                        name: "active-asc, asc",
                        styles: {type: 6, styles: {transform: "translateY(0px)"}, offset: null},
                        options: undefined
                    }, {
                        type: 0,
                        name: "active-desc, desc",
                        styles: {type: 6, styles: {transform: "translateY(10px)"}, offset: null},
                        options: undefined
                    }, {
                        type: 1,
                        expr: "active-asc <=> active-desc",
                        animation: {type: 4, styles: null, timings: "225ms cubic-bezier(0.4,0.0,0.2,1)"},
                        options: null
                    }],
                    options: {}
                }, {
                    type: 7,
                    name: "leftPointer",
                    definitions: [{
                        type: 0,
                        name: "active-asc, asc",
                        styles: {type: 6, styles: {transform: "rotate(-45deg)"}, offset: null},
                        options: undefined
                    }, {
                        type: 0,
                        name: "active-desc, desc",
                        styles: {type: 6, styles: {transform: "rotate(45deg)"}, offset: null},
                        options: undefined
                    }, {
                        type: 1,
                        expr: "active-asc <=> active-desc",
                        animation: {type: 4, styles: null, timings: "225ms cubic-bezier(0.4,0.0,0.2,1)"},
                        options: null
                    }],
                    options: {}
                }, {
                    type: 7,
                    name: "rightPointer",
                    definitions: [{
                        type: 0,
                        name: "active-asc, asc",
                        styles: {type: 6, styles: {transform: "rotate(45deg)"}, offset: null},
                        options: undefined
                    }, {
                        type: 0,
                        name: "active-desc, desc",
                        styles: {type: 6, styles: {transform: "rotate(-45deg)"}, offset: null},
                        options: undefined
                    }, {
                        type: 1,
                        expr: "active-asc <=> active-desc",
                        animation: {type: 4, styles: null, timings: "225ms cubic-bezier(0.4,0.0,0.2,1)"},
                        options: null
                    }],
                    options: {}
                }, {
                    type: 7,
                    name: "arrowOpacity",
                    definitions: [{
                        type: 0,
                        name: "desc-to-active, asc-to-active, active",
                        styles: {type: 6, styles: {opacity: 1}, offset: null},
                        options: undefined
                    }, {
                        type: 0,
                        name: "desc-to-hint, asc-to-hint, hint",
                        styles: {type: 6, styles: {opacity: 0.54}, offset: null},
                        options: undefined
                    }, {
                        type: 0,
                        name: "hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc",
                        styles: {type: 6, styles: {opacity: 0}, offset: null},
                        options: undefined
                    }, {
                        type: 1,
                        expr: "* => asc, * => desc, * => active, * => hint",
                        animation: {type: 4, styles: null, timings: "0ms"},
                        options: null
                    }, {
                        type: 1,
                        expr: "* <=> *",
                        animation: {type: 4, styles: null, timings: "225ms cubic-bezier(0.4,0.0,0.2,1)"},
                        options: null
                    }],
                    options: {}
                }, {
                    type: 7,
                    name: "arrowPosition",
                    definitions: [{
                        type: 1,
                        expr: "* => desc-to-hint, * => desc-to-active",
                        animation: {
                            type: 4,
                            styles: {
                                type: 5,
                                steps: [{type: 6, styles: {transform: "translateY(-25%)"}, offset: null}, {
                                    type: 6,
                                    styles: {transform: "translateY(0)"},
                                    offset: null
                                }]
                            },
                            timings: "225ms cubic-bezier(0.4,0.0,0.2,1)"
                        },
                        options: null
                    }, {
                        type: 1,
                        expr: "* => hint-to-desc, * => active-to-desc",
                        animation: {
                            type: 4,
                            styles: {
                                type: 5,
                                steps: [{type: 6, styles: {transform: "translateY(0)"}, offset: null}, {
                                    type: 6,
                                    styles: {transform: "translateY(25%)"},
                                    offset: null
                                }]
                            },
                            timings: "225ms cubic-bezier(0.4,0.0,0.2,1)"
                        },
                        options: null
                    }, {
                        type: 1,
                        expr: "* => asc-to-hint, * => asc-to-active",
                        animation: {
                            type: 4,
                            styles: {
                                type: 5,
                                steps: [{type: 6, styles: {transform: "translateY(25%)"}, offset: null}, {
                                    type: 6,
                                    styles: {transform: "translateY(0)"},
                                    offset: null
                                }]
                            },
                            timings: "225ms cubic-bezier(0.4,0.0,0.2,1)"
                        },
                        options: null
                    }, {
                        type: 1,
                        expr: "* => hint-to-asc, * => active-to-asc",
                        animation: {
                            type: 4,
                            styles: {
                                type: 5,
                                steps: [{type: 6, styles: {transform: "translateY(0)"}, offset: null}, {
                                    type: 6,
                                    styles: {transform: "translateY(-25%)"},
                                    offset: null
                                }]
                            },
                            timings: "225ms cubic-bezier(0.4,0.0,0.2,1)"
                        },
                        options: null
                    }, {
                        type: 0,
                        name: "desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active",
                        styles: {type: 6, styles: {transform: "translateY(0)"}, offset: null},
                        options: undefined
                    }, {
                        type: 0,
                        name: "hint-to-desc, active-to-desc, desc",
                        styles: {type: 6, styles: {transform: "translateY(-25%)"}, offset: null},
                        options: undefined
                    }, {
                        type: 0,
                        name: "hint-to-asc, active-to-asc, asc",
                        styles: {type: 6, styles: {transform: "translateY(25%)"}, offset: null},
                        options: undefined
                    }],
                    options: {}
                }, {
                    type: 7,
                    name: "allowChildren",
                    definitions: [{
                        type: 1,
                        expr: "* <=> *",
                        animation: [{
                            type: 11,
                            selector: "@*",
                            animation: {type: 9, options: null},
                            options: {optional: true}
                        }],
                        options: null
                    }],
                    options: {}
                }]
            }
        });

        function View_MatSortHeader_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](2, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 8, "div", [["class", "mat-sort-header-container"]], [[2, "mat-sort-header-sorted", null], [2, "mat-sort-header-position-before", null]], null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](1, 0, null, null, 1, "button", [["class", "mat-sort-header-button"], ["type", "button"]], [[1, "disabled", 0], [1, "aria-label", 0]], [[null, "focus"], [null, "blur"]], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (("focus" === en)) {
                    var pd_0 = (_co._setIndicatorHintVisible(true) !== false);
                    ad = (pd_0 && ad);
                }
                if (("blur" === en)) {
                    var pd_1 = (_co._setIndicatorHintVisible(false) !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵncd"](null, 0), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](3, 0, null, null, 5, "div", [["class", "mat-sort-header-arrow"]], [[24, "@arrowOpacity", 0], [24, "@arrowPosition", 0], [24, "@allowChildren", 0]], [[null, "@arrowPosition.start"], [null, "@arrowPosition.done"]], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (("@arrowPosition.start" === en)) {
                    var pd_0 = ((_co._disableViewStateAnimation = true) !== false);
                    ad = (pd_0 && ad);
                }
                if (("@arrowPosition.done" === en)) {
                    var pd_1 = ((_co._disableViewStateAnimation = false) !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](4, 0, null, null, 0, "div", [["class", "mat-sort-header-stem"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](5, 0, null, null, 3, "div", [["class", "mat-sort-header-indicator"]], [[24, "@indicator", 0]], null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](6, 0, null, null, 0, "div", [["class", "mat-sort-header-pointer-left"]], [[24, "@leftPointer", 0]], null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](7, 0, null, null, 0, "div", [["class", "mat-sort-header-pointer-right"]], [[24, "@rightPointer", 0]], null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](8, 0, null, null, 0, "div", [["class", "mat-sort-header-pointer-middle"]], null, null, null, null, null))], null, function (_ck, _v) {
                var _co = _v.component;
                var currVal_0 = _co._isSorted();
                var currVal_1 = (_co.arrowPosition == "before");
                _ck(_v, 0, 0, currVal_0, currVal_1);
                var currVal_2 = (_co._isDisabled() || null);
                var currVal_3 = _co._intl.sortButtonLabel(_co.id);
                _ck(_v, 1, 0, currVal_2, currVal_3);
                var currVal_4 = _co._getArrowViewState();
                var currVal_5 = _co._getArrowViewState();
                var currVal_6 = _co._getArrowDirectionState();
                _ck(_v, 3, 0, currVal_4, currVal_5, currVal_6);
                var currVal_7 = _co._getArrowDirectionState();
                _ck(_v, 5, 0, currVal_7);
                var currVal_8 = _co._getArrowDirectionState();
                _ck(_v, 6, 0, currVal_8);
                var currVal_9 = _co._getArrowDirectionState();
                _ck(_v, 7, 0, currVal_9);
            });
        }

        function View_MatSortHeader_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 1, "div", [["mat-sort-header", ""]], [[1, "aria-sort", 0], [2, "mat-sort-header-disabled", null]], [[null, "click"], [null, "mouseenter"], [null, "longpress"], [null, "mouseleave"]], function (_v, en, $event) {
                var ad = true;
                if (("click" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._handleClick() !== false);
                    ad = (pd_0 && ad);
                }
                if (("mouseenter" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._setIndicatorHintVisible(true) !== false);
                    ad = (pd_1 && ad);
                }
                if (("longpress" === en)) {
                    var pd_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._setIndicatorHintVisible(true) !== false);
                    ad = (pd_2 && ad);
                }
                if (("mouseleave" === en)) {
                    var pd_3 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._setIndicatorHintVisible(false) !== false);
                    ad = (pd_3 && ad);
                }
                return ad;
            }, View_MatSortHeader_0, RenderType_MatSortHeader)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 245760, null, 0, _angular_material_sort__WEBPACK_IMPORTED_MODULE_1__["MatSortHeader"], [_angular_material_sort__WEBPACK_IMPORTED_MODULE_1__["MatSortHeaderIntl"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"], [2, _angular_material_sort__WEBPACK_IMPORTED_MODULE_1__["MatSort"]], [2, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_3__["CdkColumnDef"]]], {id: [0, "id"]}, null)], function (_ck, _v) {
                var currVal_2 = "";
                _ck(_v, 1, 0, currVal_2);
            }, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._getAriaSortAttribute();
                var currVal_1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._isDisabled();
                _ck(_v, 0, 0, currVal_0, currVal_1);
            });
        }

        var MatSortHeaderNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵccf"]("[mat-sort-header]", _angular_material_sort__WEBPACK_IMPORTED_MODULE_1__["MatSortHeader"], View_MatSortHeader_Host_0, {
            disabled: "disabled",
            id: "mat-sort-header",
            arrowPosition: "arrowPosition",
            start: "start",
            disableClear: "disableClear"
        }, {}, ["*"]);


        /***/
    }),

    /***/ "./node_modules/@angular/material/table/typings/index.ngfactory.js":
    /*!*************************************************************************!*\
  !*** ./node_modules/@angular/material/table/typings/index.ngfactory.js ***!
  \*************************************************************************/
    /*! exports provided: MatTableModuleNgFactory, RenderType_MatTable, View_MatTable_0, View_MatTable_Host_0, MatTableNgFactory, RenderType_MatHeaderRow, View_MatHeaderRow_0, View_MatHeaderRow_Host_0, MatHeaderRowNgFactory, RenderType_MatFooterRow, View_MatFooterRow_0, View_MatFooterRow_Host_0, MatFooterRowNgFactory, RenderType_MatRow, View_MatRow_0, View_MatRow_Host_0, MatRowNgFactory */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTableModuleNgFactory", function () {
            return MatTableModuleNgFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_MatTable", function () {
            return RenderType_MatTable;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatTable_0", function () {
            return View_MatTable_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatTable_Host_0", function () {
            return View_MatTable_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTableNgFactory", function () {
            return MatTableNgFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_MatHeaderRow", function () {
            return RenderType_MatHeaderRow;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatHeaderRow_0", function () {
            return View_MatHeaderRow_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatHeaderRow_Host_0", function () {
            return View_MatHeaderRow_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatHeaderRowNgFactory", function () {
            return MatHeaderRowNgFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_MatFooterRow", function () {
            return RenderType_MatFooterRow;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatFooterRow_0", function () {
            return View_MatFooterRow_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatFooterRow_Host_0", function () {
            return View_MatFooterRow_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatFooterRowNgFactory", function () {
            return MatFooterRowNgFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_MatRow", function () {
            return RenderType_MatRow;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatRow_0", function () {
            return View_MatRow_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_MatRow_Host_0", function () {
            return View_MatRow_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatRowNgFactory", function () {
            return MatRowNgFactory;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_material_table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material/table */ "./node_modules/@angular/material/esm5/table.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_cdk_table__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/table */ "./node_modules/@angular/cdk/esm5/table.es5.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */






        var MatTableModuleNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcmf"](_angular_material_table__WEBPACK_IMPORTED_MODULE_1__["MatTableModule"], [], function (_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmod"]([_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](512, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵCodegenComponentFactoryResolver"], [[8, []], [3, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleRef"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](4608, _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgLocalization"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgLocaleLocalization"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"], [2, _angular_common__WEBPACK_IMPORTED_MODULE_2__["ɵangular_packages_common_common_a"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_3__["CdkTableModule"], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_3__["CdkTableModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["BidiModule"], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["BidiModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MatCommonModule"], [[2, _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MATERIAL_SANITY_CHECKS"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_table__WEBPACK_IMPORTED_MODULE_1__["MatTableModule"], _angular_material_table__WEBPACK_IMPORTED_MODULE_1__["MatTableModule"], [])]);
        });

        var styles_MatTable = ["mat-table{display:block}mat-header-row{min-height:56px}mat-footer-row,mat-row{min-height:48px}mat-footer-row,mat-header-row,mat-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-footer-row::after,mat-header-row::after,mat-row::after{display:inline-block;min-height:inherit;content:''}mat-cell:first-child,mat-footer-cell:first-child,mat-header-cell:first-child{padding-left:24px}[dir=rtl] mat-cell:first-child,[dir=rtl] mat-footer-cell:first-child,[dir=rtl] mat-header-cell:first-child{padding-left:0;padding-right:24px}mat-cell:last-child,mat-footer-cell:last-child,mat-header-cell:last-child{padding-right:24px}[dir=rtl] mat-cell:last-child,[dir=rtl] mat-footer-cell:last-child,[dir=rtl] mat-header-cell:last-child{padding-right:0;padding-left:24px}mat-cell,mat-footer-cell,mat-header-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-footer-row,tr.mat-row{height:48px}th.mat-header-cell{text-align:left}td.mat-cell,td.mat-footer-cell,th.mat-header-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}td.mat-cell:first-child,td.mat-footer-cell:first-child,th.mat-header-cell:first-child{padding-left:24px}td.mat-cell:last-child,td.mat-footer-cell:last-child,th.mat-header-cell:last-child{padding-right:24px}"];
        var RenderType_MatTable = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcrt"]({
            encapsulation: 2,
            styles: styles_MatTable,
            data: {}
        });

        function View_MatTable_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](2, [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](402653184, 1, {_rowOutlet: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](402653184, 2, {_headerRowOutlet: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](402653184, 3, {_footerRowOutlet: 0}), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](3, 16777216, null, null, 1, null, null, null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](4, 16384, [[2, 4]], 0, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_3__["HeaderRowOutlet"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](5, 16777216, null, null, 1, null, null, null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](6, 16384, [[1, 4]], 0, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_3__["DataRowOutlet"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](7, 16777216, null, null, 1, null, null, null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](8, 16384, [[3, 4]], 0, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_3__["FooterRowOutlet"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]], null, null)], null, null);
        }

        function View_MatTable_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 5, "mat-table", [["class", "mat-table"]], null, null, null, View_MatTable_0, RenderType_MatTable)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 2342912, null, 4, _angular_material_table__WEBPACK_IMPORTED_MODULE_1__["MatTable"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], [8, null]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](603979776, 1, {_contentColumnDefs: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](603979776, 2, {_contentRowDefs: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](603979776, 3, {_contentHeaderRowDefs: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵqud"](603979776, 4, {_contentFooterRowDefs: 1})], function (_ck, _v) {
                _ck(_v, 1, 0);
            }, null);
        }

        var MatTableNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵccf"]("mat-table, table[mat-table]", _angular_material_table__WEBPACK_IMPORTED_MODULE_1__["MatTable"], View_MatTable_Host_0, {
            trackBy: "trackBy",
            dataSource: "dataSource",
            multiTemplateDataRows: "multiTemplateDataRows"
        }, {}, []);

        var styles_MatHeaderRow = [];
        var RenderType_MatHeaderRow = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcrt"]({
            encapsulation: 2,
            styles: styles_MatHeaderRow,
            data: {}
        });

        function View_MatHeaderRow_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](2, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 16777216, null, null, 1, null, null, null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 16384, null, 0, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_3__["CdkCellOutlet"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]], null, null)], null, null);
        }

        function View_MatHeaderRow_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 1, "mat-header-row", [["class", "mat-header-row"], ["role", "row"]], null, null, null, View_MatHeaderRow_0, RenderType_MatHeaderRow)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 49152, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_1__["MatHeaderRow"], [], null, null)], null, null);
        }

        var MatHeaderRowNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵccf"]("mat-header-row, tr[mat-header-row]", _angular_material_table__WEBPACK_IMPORTED_MODULE_1__["MatHeaderRow"], View_MatHeaderRow_Host_0, {}, {}, []);

        var styles_MatFooterRow = [];
        var RenderType_MatFooterRow = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcrt"]({
            encapsulation: 2,
            styles: styles_MatFooterRow,
            data: {}
        });

        function View_MatFooterRow_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](2, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 16777216, null, null, 1, null, null, null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 16384, null, 0, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_3__["CdkCellOutlet"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]], null, null)], null, null);
        }

        function View_MatFooterRow_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 1, "mat-footer-row", [["class", "mat-footer-row"], ["role", "row"]], null, null, null, View_MatFooterRow_0, RenderType_MatFooterRow)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 49152, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_1__["MatFooterRow"], [], null, null)], null, null);
        }

        var MatFooterRowNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵccf"]("mat-footer-row, tr[mat-footer-row]", _angular_material_table__WEBPACK_IMPORTED_MODULE_1__["MatFooterRow"], View_MatFooterRow_Host_0, {}, {}, []);

        var styles_MatRow = [];
        var RenderType_MatRow = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcrt"]({
            encapsulation: 2,
            styles: styles_MatRow,
            data: {}
        });

        function View_MatRow_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](2, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 16777216, null, null, 1, null, null, null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 16384, null, 0, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_3__["CdkCellOutlet"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]], null, null)], null, null);
        }

        function View_MatRow_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 1, "mat-row", [["class", "mat-row"], ["role", "row"]], null, null, null, View_MatRow_0, RenderType_MatRow)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 49152, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_1__["MatRow"], [], null, null)], null, null);
        }

        var MatRowNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵccf"]("mat-row, tr[mat-row]", _angular_material_table__WEBPACK_IMPORTED_MODULE_1__["MatRow"], View_MatRow_Host_0, {}, {}, []);


        /***/
    }),

    /***/ "./node_modules/@angular/material/tooltip/typings/index.ngfactory.js":
    /*!***************************************************************************!*\
  !*** ./node_modules/@angular/material/tooltip/typings/index.ngfactory.js ***!
  \***************************************************************************/
    /*! exports provided: MatTooltipModuleNgFactory, RenderType_TooltipComponent, View_TooltipComponent_0, View_TooltipComponent_Host_0, TooltipComponentNgFactory */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "MatTooltipModuleNgFactory", function () {
            return MatTooltipModuleNgFactory;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_TooltipComponent", function () {
            return RenderType_TooltipComponent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_TooltipComponent_0", function () {
            return View_TooltipComponent_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_TooltipComponent_Host_0", function () {
            return View_TooltipComponent_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "TooltipComponentNgFactory", function () {
            return TooltipComponentNgFactory;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material/tooltip */ "./node_modules/@angular/material/esm5/tooltip.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm5/portal.es5.js");
        /* harmony import */
        var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm5/platform.es5.js");
        /* harmony import */
        var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm5/scrolling.es5.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/layout */ "./node_modules/@angular/cdk/esm5/layout.es5.js");
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */










        var MatTooltipModuleNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcmf"](_angular_material_tooltip__WEBPACK_IMPORTED_MODULE_1__["MatTooltipModule"], [], function (_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmod"]([_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](512, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵCodegenComponentFactoryResolver"], [[8, [TooltipComponentNgFactory]], [3, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleRef"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](4608, _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgLocalization"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgLocaleLocalization"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"], [2, _angular_common__WEBPACK_IMPORTED_MODULE_2__["ɵangular_packages_common_common_a"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](4608, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["Overlay"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["Overlay"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["ScrollStrategyOptions"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["OverlayContainer"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["OverlayPositionBuilder"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["OverlayKeyboardDispatcher"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["Directionality"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](5120, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["ɵc"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["ɵd"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["Overlay"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](5120, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_1__["MAT_TOOLTIP_SCROLL_STRATEGY"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_1__["MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["Overlay"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["BidiModule"], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__["BidiModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["PortalModule"], _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__["PortalModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["PlatformModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__["PlatformModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_7__["ScrollDispatchModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_7__["ScrollDispatchModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["OverlayModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["OverlayModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatCommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MatCommonModule"], [[2, _angular_material_core__WEBPACK_IMPORTED_MODULE_8__["MATERIAL_SANITY_CHECKS"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_1__["MatTooltipModule"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_1__["MatTooltipModule"], [])]);
        });

        var styles_TooltipComponent = [".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:2px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}"];
        var RenderType_TooltipComponent = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcrt"]({
            encapsulation: 2,
            styles: styles_TooltipComponent,
            data: {
                "animation": [{
                    type: 7,
                    name: "state",
                    definitions: [{
                        type: 0,
                        name: "initial, void, hidden",
                        styles: {type: 6, styles: {transform: "scale(0)"}, offset: null},
                        options: undefined
                    }, {
                        type: 0,
                        name: "visible",
                        styles: {type: 6, styles: {transform: "scale(1)"}, offset: null},
                        options: undefined
                    }, {
                        type: 1,
                        expr: "* => visible",
                        animation: {type: 4, styles: null, timings: "150ms cubic-bezier(0.0, 0.0, 0.2, 1)"},
                        options: null
                    }, {
                        type: 1,
                        expr: "* => hidden",
                        animation: {type: 4, styles: null, timings: "150ms cubic-bezier(0.4, 0.0, 1, 1)"},
                        options: null
                    }],
                    options: {}
                }]
            }
        });

        function View_TooltipComponent_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](2, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 3, "div", [["class", "mat-tooltip"]], [[2, "mat-tooltip-handset", null], [24, "@state", 0]], [[null, "@state.start"], [null, "@state.done"]], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (("@state.start" === en)) {
                    var pd_0 = (_co._animationStart() !== false);
                    ad = (pd_0 && ad);
                }
                if (("@state.done" === en)) {
                    var pd_1 = (_co._animationDone($event) !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 278528, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgClass"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]], {
                klass: [0, "klass"],
                ngClass: [1, "ngClass"]
            }, null), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵpid"](131072, _angular_common__WEBPACK_IMPORTED_MODULE_2__["AsyncPipe"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵted"](3, null, ["", ""]))], function (_ck, _v) {
                var _co = _v.component;
                var currVal_2 = "mat-tooltip";
                var currVal_3 = _co.tooltipClass;
                _ck(_v, 1, 0, currVal_2, currVal_3);
            }, function (_ck, _v) {
                var _co = _v.component;
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵunv"](_v, 0, 0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 2).transform(_co._isHandset)).matches;
                var currVal_1 = _co._visibility;
                _ck(_v, 0, 0, currVal_0, currVal_1);
                var currVal_4 = _co.message;
                _ck(_v, 3, 0, currVal_4);
            });
        }

        function View_TooltipComponent_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵeld"](0, 0, null, null, 1, "mat-tooltip-component", [["aria-hidden", "true"]], [[4, "zoom", null]], [["body", "click"]], function (_v, en, $event) {
                var ad = true;
                if (("body:click" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._handleBodyInteraction() !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, View_TooltipComponent_0, RenderType_TooltipComponent)), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵdid"](1, 49152, null, 0, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_1__["TooltipComponent"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"], _angular_cdk_layout__WEBPACK_IMPORTED_MODULE_9__["BreakpointObserver"]], null, null)], null, function (_ck, _v) {
                var currVal_0 = ((_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵnov"](_v, 1)._visibility === "visible") ? 1 : null);
                _ck(_v, 0, 0, currVal_0);
            });
        }

        var TooltipComponentNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵccf"]("mat-tooltip-component", _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_1__["TooltipComponent"], View_TooltipComponent_Host_0, {}, {}, []);


        /***/
    }),

    /***/ "./node_modules/@ngrx/entity/fesm5/entity.js":
    /*!***************************************************!*\
  !*** ./node_modules/@ngrx/entity/fesm5/entity.js ***!
  \***************************************************/
    /*! exports provided: createEntityAdapter */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "createEntityAdapter", function () {
            return createEntityAdapter;
        });
        /* harmony import */
        var _ngrx_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");

        /**
         * @license NgRx 6.0.1
         * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin
         * License: MIT
         */


        function getInitialEntityState() {
            return {
                ids: [],
                entities: {},
            };
        }

        function createInitialStateFactory() {
            function getInitialState(additionalState) {
                if (additionalState === void 0) {
                    additionalState = {};
                }
                return Object.assign(getInitialEntityState(), additionalState);
            }

            return {getInitialState: getInitialState};
        }

        function createSelectorsFactory() {
            function getSelectors(selectState) {
                var selectIds = function (state) {
                    return state.ids;
                };
                var selectEntities = function (state) {
                    return state.entities;
                };
                var selectAll = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectIds, selectEntities, function (ids, entities) {
                    return ids.map(function (id) {
                        return entities[id];
                    });
                });
                var selectTotal = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectIds, function (ids) {
                    return ids.length;
                });
                if (!selectState) {
                    return {
                        selectIds: selectIds,
                        selectEntities: selectEntities,
                        selectAll: selectAll,
                        selectTotal: selectTotal,
                    };
                }
                return {
                    selectIds: Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectState, selectIds),
                    selectEntities: Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectState, selectEntities),
                    selectAll: Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectState, selectAll),
                    selectTotal: Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectState, selectTotal),
                };
            }

            return {getSelectors: getSelectors};
        }

        var __assign$1 = (undefined && undefined.__assign) || Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        var __read = (undefined && undefined.__read) || function (o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
            }
            catch (error) {
                e = {error: error};
            }
            finally {
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                }
                finally {
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var __spread = (undefined && undefined.__spread) || function () {
            for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
            return ar;
        };
        var DidMutate;
        (function (DidMutate) {
            DidMutate[DidMutate["EntitiesOnly"] = 0] = "EntitiesOnly";
            DidMutate[DidMutate["Both"] = 1] = "Both";
            DidMutate[DidMutate["None"] = 2] = "None";
        })(DidMutate || (DidMutate = {}));

        function createStateOperator(mutator) {
            return function operation(arg, state) {
                var clonedEntityState = {
                    ids: __spread(state.ids),
                    entities: __assign$1({}, state.entities),
                };
                var didMutate = mutator(arg, clonedEntityState);
                if (didMutate === DidMutate.Both) {
                    return Object.assign({}, state, clonedEntityState);
                }
                if (didMutate === DidMutate.EntitiesOnly) {
                    return __assign$1({}, state, {entities: clonedEntityState.entities});
                }
                return state;
            };
        }

        var __values$1 = (undefined && undefined.__values) || function (o) {
            var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
            if (m) return m.call(o);
            return {
                next: function () {
                    if (o && i >= o.length) o = void 0;
                    return {value: o && o[i++], done: !o};
                }
            };
        };

        function createUnsortedStateAdapter(selectId) {
            function addOneMutably(entity, state) {
                var key = selectId(entity);
                if (key in state.entities) {
                    return DidMutate.None;
                }
                state.ids.push(key);
                state.entities[key] = entity;
                return DidMutate.Both;
            }

            function addManyMutably(entities, state) {
                var didMutate = false;
                try {
                    for (var entities_1 = __values$1(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {
                        var entity = entities_1_1.value;
                        didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;
                    }
                }
                catch (e_1_1) {
                    e_1 = {error: e_1_1};
                }
                finally {
                    try {
                        if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);
                    }
                    finally {
                        if (e_1) throw e_1.error;
                    }
                }
                return didMutate ? DidMutate.Both : DidMutate.None;
                var e_1, _a;
            }

            function addAllMutably(entities, state) {
                state.ids = [];
                state.entities = {};
                addManyMutably(entities, state);
                return DidMutate.Both;
            }

            function removeOneMutably(key, state) {
                return removeManyMutably([key], state);
            }

            function removeManyMutably(keys, state) {
                var didMutate = keys
                    .filter(function (key) {
                        return key in state.entities;
                    })
                    .map(function (key) {
                        return delete state.entities[key];
                    }).length > 0;
                if (didMutate) {
                    state.ids = state.ids.filter(function (id) {
                        return id in state.entities;
                    });
                }
                return didMutate ? DidMutate.Both : DidMutate.None;
            }

            function removeAll(state) {
                return Object.assign({}, state, {
                    ids: [],
                    entities: {},
                });
            }

            function takeNewKey(keys, update, state) {
                var original = state.entities[update.id];
                var updated = Object.assign({}, original, update.changes);
                var newKey = selectId(updated);
                var hasNewKey = newKey !== update.id;
                if (hasNewKey) {
                    keys[update.id] = newKey;
                    delete state.entities[update.id];
                }
                state.entities[newKey] = updated;
                return hasNewKey;
            }

            function updateOneMutably(update, state) {
                return updateManyMutably([update], state);
            }

            function updateManyMutably(updates, state) {
                var newKeys = {};
                updates = updates.filter(function (update) {
                    return update.id in state.entities;
                });
                var didMutateEntities = updates.length > 0;
                if (didMutateEntities) {
                    var didMutateIds = updates.filter(function (update) {
                        return takeNewKey(newKeys, update, state);
                    }).length > 0;
                    if (didMutateIds) {
                        state.ids = state.ids.map(function (id) {
                            return newKeys[id] || id;
                        });
                        return DidMutate.Both;
                    }
                    else {
                        return DidMutate.EntitiesOnly;
                    }
                }
                return DidMutate.None;
            }

            function upsertOneMutably(entity, state) {
                return upsertManyMutably([entity], state);
            }

            function upsertManyMutably(entities, state) {
                var added = [];
                var updated = [];
                try {
                    for (var entities_2 = __values$1(entities), entities_2_1 = entities_2.next(); !entities_2_1.done; entities_2_1 = entities_2.next()) {
                        var entity = entities_2_1.value;
                        var id = selectId(entity);
                        if (id in state.entities) {
                            updated.push({id: id, changes: entity});
                        }
                        else {
                            added.push(entity);
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = {error: e_2_1};
                }
                finally {
                    try {
                        if (entities_2_1 && !entities_2_1.done && (_a = entities_2.return)) _a.call(entities_2);
                    }
                    finally {
                        if (e_2) throw e_2.error;
                    }
                }
                var didMutateByUpdated = updateManyMutably(updated, state);
                var didMutateByAdded = addManyMutably(added, state);
                switch (true) {
                    case didMutateByAdded === DidMutate.None &&
                    didMutateByUpdated === DidMutate.None:
                        return DidMutate.None;
                    case didMutateByAdded === DidMutate.Both ||
                    didMutateByUpdated === DidMutate.Both:
                        return DidMutate.Both;
                    default:
                        return DidMutate.EntitiesOnly;
                }
                var e_2, _a;
            }

            return {
                removeAll: removeAll,
                addOne: createStateOperator(addOneMutably),
                addMany: createStateOperator(addManyMutably),
                addAll: createStateOperator(addAllMutably),
                updateOne: createStateOperator(updateOneMutably),
                updateMany: createStateOperator(updateManyMutably),
                upsertOne: createStateOperator(upsertOneMutably),
                upsertMany: createStateOperator(upsertManyMutably),
                removeOne: createStateOperator(removeOneMutably),
                removeMany: createStateOperator(removeManyMutably),
            };
        }

        var __values = (undefined && undefined.__values) || function (o) {
            var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
            if (m) return m.call(o);
            return {
                next: function () {
                    if (o && i >= o.length) o = void 0;
                    return {value: o && o[i++], done: !o};
                }
            };
        };

        function createSortedStateAdapter(selectId, sort) {
            var _a = createUnsortedStateAdapter(selectId), removeOne = _a.removeOne, removeMany = _a.removeMany,
                removeAll = _a.removeAll;

            function addOneMutably(entity, state) {
                return addManyMutably([entity], state);
            }

            function addManyMutably(newModels, state) {
                var models = newModels.filter(function (model) {
                    return !(selectId(model) in state.entities);
                });
                if (models.length === 0) {
                    return DidMutate.None;
                }
                else {
                    merge(models, state);
                    return DidMutate.Both;
                }
            }

            function addAllMutably(models, state) {
                state.entities = {};
                state.ids = [];
                addManyMutably(models, state);
                return DidMutate.Both;
            }

            function updateOneMutably(update, state) {
                return updateManyMutably([update], state);
            }

            function takeUpdatedModel(models, update, state) {
                if (!(update.id in state.entities)) {
                    return false;
                }
                var original = state.entities[update.id];
                var updated = Object.assign({}, original, update.changes);
                var newKey = selectId(updated);
                delete state.entities[update.id];
                models.push(updated);
                return newKey !== update.id;
            }

            function updateManyMutably(updates, state) {
                var models = [];
                var didMutateIds = updates.filter(function (update) {
                        return takeUpdatedModel(models, update, state);
                    }).length >
                    0;
                if (models.length === 0) {
                    return DidMutate.None;
                }
                else {
                    var originalIds_1 = state.ids;
                    var updatedIndexes_1 = [];
                    state.ids = state.ids.filter(function (id, index) {
                        if (id in state.entities) {
                            return true;
                        }
                        else {
                            updatedIndexes_1.push(index);
                            return false;
                        }
                    });
                    merge(models, state);
                    if (!didMutateIds &&
                        updatedIndexes_1.every(function (i) {
                            return state.ids[i] === originalIds_1[i];
                        })) {
                        return DidMutate.EntitiesOnly;
                    }
                    else {
                        return DidMutate.Both;
                    }
                }
            }

            function upsertOneMutably(entity, state) {
                return upsertManyMutably([entity], state);
            }

            function upsertManyMutably(entities, state) {
                var added = [];
                var updated = [];
                try {
                    for (var entities_1 = __values(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {
                        var entity = entities_1_1.value;
                        var id = selectId(entity);
                        if (id in state.entities) {
                            updated.push({id: id, changes: entity});
                        }
                        else {
                            added.push(entity);
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = {error: e_1_1};
                }
                finally {
                    try {
                        if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);
                    }
                    finally {
                        if (e_1) throw e_1.error;
                    }
                }
                var didMutateByUpdated = updateManyMutably(updated, state);
                var didMutateByAdded = addManyMutably(added, state);
                switch (true) {
                    case didMutateByAdded === DidMutate.None &&
                    didMutateByUpdated === DidMutate.None:
                        return DidMutate.None;
                    case didMutateByAdded === DidMutate.Both ||
                    didMutateByUpdated === DidMutate.Both:
                        return DidMutate.Both;
                    default:
                        return DidMutate.EntitiesOnly;
                }
                var e_1, _a;
            }

            function merge(models, state) {
                models.sort(sort);
                var ids = [];
                var i = 0;
                var j = 0;
                while (i < models.length && j < state.ids.length) {
                    var model = models[i];
                    var modelId = selectId(model);
                    var entityId = state.ids[j];
                    var entity = state.entities[entityId];
                    if (sort(model, entity) <= 0) {
                        ids.push(modelId);
                        i++;
                    }
                    else {
                        ids.push(entityId);
                        j++;
                    }
                }
                if (i < models.length) {
                    state.ids = ids.concat(models.slice(i).map(selectId));
                }
                else {
                    state.ids = ids.concat(state.ids.slice(j));
                }
                models.forEach(function (model, i) {
                    state.entities[selectId(model)] = model;
                });
            }

            return {
                removeOne: removeOne,
                removeMany: removeMany,
                removeAll: removeAll,
                addOne: createStateOperator(addOneMutably),
                updateOne: createStateOperator(updateOneMutably),
                upsertOne: createStateOperator(upsertOneMutably),
                addAll: createStateOperator(addAllMutably),
                addMany: createStateOperator(addManyMutably),
                updateMany: createStateOperator(updateManyMutably),
                upsertMany: createStateOperator(upsertManyMutably),
            };
        }

        var __assign = (undefined && undefined.__assign) || Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };

        function createEntityAdapter(options) {
            if (options === void 0) {
                options = {};
            }
            var _a = __assign({
                sortComparer: false, selectId: function (instance) {
                    return instance.id;
                }
            }, options), selectId = _a.selectId, sortComparer = _a.sortComparer;
            var stateFactory = createInitialStateFactory();
            var selectorsFactory = createSelectorsFactory();
            var stateAdapter = sortComparer
                ? createSortedStateAdapter(selectId, sortComparer)
                : createUnsortedStateAdapter(selectId);
            return __assign({
                selectId: selectId,
                sortComparer: sortComparer
            }, stateFactory, selectorsFactory, stateAdapter);
        }

        /**
         * DO NOT EDIT
         *
         * This file is automatically generated at build
         */

        /**
         * Generated bundle index. Do not edit.
         */


//# sourceMappingURL=entity.js.map


        /***/
    }),

    /***/ "./src/app/dashboard-example/dashboard-example-routing.module.ts":
    /*!***********************************************************************!*\
  !*** ./src/app/dashboard-example/dashboard-example-routing.module.ts ***!
  \***********************************************************************/
    /*! exports provided: DashboardExampleRoutingModule, ɵ0 */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DashboardExampleRoutingModule", function () {
            return DashboardExampleRoutingModule;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ɵ0", function () {
            return ɵ0;
        });
        /* harmony import */
        var _angular_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
        /* harmony import */
        var _dashboard_dashboard_container_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dashboard/dashboard-container.component */ "./src/app/dashboard-example/dashboard/dashboard-container.component.ts");


        var ɵ0 = {state: 'dashboard-example'};
        var routes = [
            {
                path: '',
                component: _dashboard_dashboard_container_component__WEBPACK_IMPORTED_MODULE_1__["DashboardContainerComponent"],
                data: ɵ0
            }
        ];
        var DashboardExampleRoutingModule = /** @class */ (function () {
            function DashboardExampleRoutingModule() {
            }

            return DashboardExampleRoutingModule;
        }());


        /***/
    }),

    /***/ "./src/app/dashboard-example/dashboard-example.module.ngfactory.js":
    /*!*************************************************************************!*\
  !*** ./src/app/dashboard-example/dashboard-example.module.ngfactory.js ***!
  \*************************************************************************/
    /*! exports provided: DashboardExampleModuleNgFactory */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DashboardExampleModuleNgFactory", function () {
            return DashboardExampleModuleNgFactory;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _dashboard_example_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dashboard-example.module */ "./src/app/dashboard-example/dashboard-example.module.ts");
        /* harmony import */
        var _dashboard_dashboard_container_component_ngfactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dashboard/dashboard-container.component.ngfactory */ "./src/app/dashboard-example/dashboard/dashboard-container.component.ngfactory.js");
        /* harmony import */
        var _node_modules_angular_material_tooltip_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../node_modules/@angular/material/tooltip/typings/index.ngfactory */ "./node_modules/@angular/material/tooltip/typings/index.ngfactory.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
        /* harmony import */
        var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_material_menu__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/menu */ "./node_modules/@angular/material/esm5/menu.es5.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var _angular_material_select__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/select */ "./node_modules/@angular/material/esm5/select.es5.js");
        /* harmony import */
        var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/tooltip */ "./node_modules/@angular/material/esm5/tooltip.es5.js");
        /* harmony import */
        var _angular_material_paginator__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/paginator */ "./node_modules/@angular/material/esm5/paginator.es5.js");
        /* harmony import */
        var _angular_material_sort__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/sort */ "./node_modules/@angular/material/esm5/sort.es5.js");
        /* harmony import */
        var _angular_router__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
        /* harmony import */
        var _dashboard_example_routing_module__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./dashboard-example-routing.module */ "./src/app/dashboard-example/dashboard-example-routing.module.ts");
        /* harmony import */
        var _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/material/grid-list */ "./node_modules/@angular/material/esm5/grid-list.es5.js");
        /* harmony import */
        var _angular_material_card__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/material/card */ "./node_modules/@angular/material/esm5/card.es5.js");
        /* harmony import */
        var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm5/platform.es5.js");
        /* harmony import */
        var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/cdk/portal */ "./node_modules/@angular/cdk/esm5/portal.es5.js");
        /* harmony import */
        var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/cdk/scrolling */ "./node_modules/@angular/cdk/esm5/scrolling.es5.js");
        /* harmony import */
        var _angular_material_icon__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/material/icon */ "./node_modules/@angular/material/esm5/icon.es5.js");
        /* harmony import */
        var _angular_material_button__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm5/button.es5.js");
        /* harmony import */
        var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @angular/material/form-field */ "./node_modules/@angular/material/esm5/form-field.es5.js");
        /* harmony import */
        var _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/cdk/text-field */ "./node_modules/@angular/cdk/esm5/text-field.es5.js");
        /* harmony import */
        var _angular_material_input__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @angular/material/input */ "./node_modules/@angular/material/esm5/input.es5.js");
        /* harmony import */
        var _ngrx_store__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
        /* harmony import */
        var _ngrx_feature_core_reducers_dev_team_dev_team__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./ngrx-feature-core/reducers/dev-team/dev-team */ "./src/app/dashboard-example/ngrx-feature-core/reducers/dev-team/dev-team.ts");
        /* harmony import */
        var _angular_cdk_table__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @angular/cdk/table */ "./node_modules/@angular/cdk/esm5/table.es5.js");
        /* harmony import */
        var _angular_material_table__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @angular/material/table */ "./node_modules/@angular/material/esm5/table.es5.js");
        /* harmony import */
        var _dashboard_dashboard_container_component__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./dashboard/dashboard-container.component */ "./src/app/dashboard-example/dashboard/dashboard-container.component.ts");
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */































        var DashboardExampleModuleNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵcmf"](_dashboard_example_module__WEBPACK_IMPORTED_MODULE_1__["DashboardExampleModule"], [], function (_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmod"]([_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](512, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵCodegenComponentFactoryResolver"], [[8, [_dashboard_dashboard_container_component_ngfactory__WEBPACK_IMPORTED_MODULE_2__["DashboardContainerComponentNgFactory"], _node_modules_angular_material_tooltip_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_3__["TooltipComponentNgFactory"]]], [3, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleRef"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](4608, _angular_common__WEBPACK_IMPORTED_MODULE_4__["NgLocalization"], _angular_common__WEBPACK_IMPORTED_MODULE_4__["NgLocaleLocalization"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"], [2, _angular_common__WEBPACK_IMPORTED_MODULE_4__["ɵangular_packages_common_common_a"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](4608, _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormBuilder"], _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormBuilder"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](4608, _angular_forms__WEBPACK_IMPORTED_MODULE_5__["ɵangular_packages_forms_forms_i"], _angular_forms__WEBPACK_IMPORTED_MODULE_5__["ɵangular_packages_forms_forms_i"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](4608, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["ScrollStrategyOptions"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayContainer"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayPositionBuilder"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayKeyboardDispatcher"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"], _angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](5120, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["ɵc"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["ɵd"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](5120, _angular_material_menu__WEBPACK_IMPORTED_MODULE_8__["MAT_MENU_SCROLL_STRATEGY"], _angular_material_menu__WEBPACK_IMPORTED_MODULE_8__["ɵd24"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](4608, _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["ErrorStateMatcher"], _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["ErrorStateMatcher"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](5120, _angular_material_select__WEBPACK_IMPORTED_MODULE_10__["MAT_SELECT_SCROLL_STRATEGY"], _angular_material_select__WEBPACK_IMPORTED_MODULE_10__["MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](5120, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_11__["MAT_TOOLTIP_SCROLL_STRATEGY"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_11__["MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["Overlay"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](5120, _angular_material_paginator__WEBPACK_IMPORTED_MODULE_12__["MatPaginatorIntl"], _angular_material_paginator__WEBPACK_IMPORTED_MODULE_12__["MAT_PAGINATOR_INTL_PROVIDER_FACTORY"], [[3, _angular_material_paginator__WEBPACK_IMPORTED_MODULE_12__["MatPaginatorIntl"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](5120, _angular_material_sort__WEBPACK_IMPORTED_MODULE_13__["MatSortHeaderIntl"], _angular_material_sort__WEBPACK_IMPORTED_MODULE_13__["MAT_SORT_HEADER_INTL_PROVIDER_FACTORY"], [[3, _angular_material_sort__WEBPACK_IMPORTED_MODULE_13__["MatSortHeaderIntl"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"], _angular_common__WEBPACK_IMPORTED_MODULE_4__["CommonModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_forms__WEBPACK_IMPORTED_MODULE_5__["ɵangular_packages_forms_forms_bb"], _angular_forms__WEBPACK_IMPORTED_MODULE_5__["ɵangular_packages_forms_forms_bb"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_forms__WEBPACK_IMPORTED_MODULE_5__["ReactiveFormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_5__["ReactiveFormsModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_router__WEBPACK_IMPORTED_MODULE_14__["RouterModule"], _angular_router__WEBPACK_IMPORTED_MODULE_14__["RouterModule"], [[2, _angular_router__WEBPACK_IMPORTED_MODULE_14__["ɵangular_packages_router_router_a"]], [2, _angular_router__WEBPACK_IMPORTED_MODULE_14__["Router"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _dashboard_example_routing_module__WEBPACK_IMPORTED_MODULE_15__["DashboardExampleRoutingModule"], _dashboard_example_routing_module__WEBPACK_IMPORTED_MODULE_15__["DashboardExampleRoutingModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["BidiModule"], _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["BidiModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatCommonModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatCommonModule"], [[2, _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MATERIAL_SANITY_CHECKS"]]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatLineModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatLineModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_16__["MatGridListModule"], _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_16__["MatGridListModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_card__WEBPACK_IMPORTED_MODULE_17__["MatCardModule"], _angular_material_card__WEBPACK_IMPORTED_MODULE_17__["MatCardModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_18__["PlatformModule"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_18__["PlatformModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatRippleModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatRippleModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_19__["PortalModule"], _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_19__["PortalModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_20__["ScrollDispatchModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_20__["ScrollDispatchModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayModule"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__["OverlayModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_menu__WEBPACK_IMPORTED_MODULE_8__["MatMenuModule"], _angular_material_menu__WEBPACK_IMPORTED_MODULE_8__["MatMenuModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_icon__WEBPACK_IMPORTED_MODULE_21__["MatIconModule"], _angular_material_icon__WEBPACK_IMPORTED_MODULE_21__["MatIconModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_button__WEBPACK_IMPORTED_MODULE_22__["MatButtonModule"], _angular_material_button__WEBPACK_IMPORTED_MODULE_22__["MatButtonModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_23__["MatFormFieldModule"], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_23__["MatFormFieldModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_24__["TextFieldModule"], _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_24__["TextFieldModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_input__WEBPACK_IMPORTED_MODULE_25__["MatInputModule"], _angular_material_input__WEBPACK_IMPORTED_MODULE_25__["MatInputModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1024, _ngrx_store__WEBPACK_IMPORTED_MODULE_26__["STORE_FEATURES"], function () {
                return [{
                    key: "dashboard-feature",
                    reducerFactory: _ngrx_store__WEBPACK_IMPORTED_MODULE_26__["combineReducers"],
                    metaReducers: [],
                    initialState: undefined
                }];
            }, []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1024, _ngrx_store__WEBPACK_IMPORTED_MODULE_26__["_FEATURE_REDUCERS"], function () {
                return [{devTeam: _ngrx_feature_core_reducers_dev_team_dev_team__WEBPACK_IMPORTED_MODULE_27__["reducer"]}];
            }, []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1024, _ngrx_store__WEBPACK_IMPORTED_MODULE_26__["_FEATURE_REDUCERS_TOKEN"], function (p0_0) {
                return [p0_0];
            }, [_ngrx_store__WEBPACK_IMPORTED_MODULE_26__["_FEATURE_REDUCERS"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1024, _ngrx_store__WEBPACK_IMPORTED_MODULE_26__["FEATURE_REDUCERS"], function (p0_0, p0_1, p0_2) {
                return [_ngrx_store__WEBPACK_IMPORTED_MODULE_26__["_createFeatureReducers"](p0_0, p0_1, p0_2)];
            }, [_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"], _ngrx_store__WEBPACK_IMPORTED_MODULE_26__["_FEATURE_REDUCERS"], _ngrx_store__WEBPACK_IMPORTED_MODULE_26__["_FEATURE_REDUCERS_TOKEN"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073873408, _ngrx_store__WEBPACK_IMPORTED_MODULE_26__["StoreFeatureModule"], _ngrx_store__WEBPACK_IMPORTED_MODULE_26__["StoreFeatureModule"], [_ngrx_store__WEBPACK_IMPORTED_MODULE_26__["STORE_FEATURES"], _ngrx_store__WEBPACK_IMPORTED_MODULE_26__["FEATURE_REDUCERS"], _ngrx_store__WEBPACK_IMPORTED_MODULE_26__["ReducerManager"], _ngrx_store__WEBPACK_IMPORTED_MODULE_26__["StoreRootModule"]]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_28__["CdkTableModule"], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_28__["CdkTableModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_table__WEBPACK_IMPORTED_MODULE_29__["MatTableModule"], _angular_material_table__WEBPACK_IMPORTED_MODULE_29__["MatTableModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatPseudoCheckboxModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatPseudoCheckboxModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatOptionModule"], _angular_material_core__WEBPACK_IMPORTED_MODULE_9__["MatOptionModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_select__WEBPACK_IMPORTED_MODULE_10__["MatSelectModule"], _angular_material_select__WEBPACK_IMPORTED_MODULE_10__["MatSelectModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_11__["MatTooltipModule"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_11__["MatTooltipModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_paginator__WEBPACK_IMPORTED_MODULE_12__["MatPaginatorModule"], _angular_material_paginator__WEBPACK_IMPORTED_MODULE_12__["MatPaginatorModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _angular_material_sort__WEBPACK_IMPORTED_MODULE_13__["MatSortModule"], _angular_material_sort__WEBPACK_IMPORTED_MODULE_13__["MatSortModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1073742336, _dashboard_example_module__WEBPACK_IMPORTED_MODULE_1__["DashboardExampleModule"], _dashboard_example_module__WEBPACK_IMPORTED_MODULE_1__["DashboardExampleModule"], []), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵmpd"](1024, _angular_router__WEBPACK_IMPORTED_MODULE_14__["ROUTES"], function () {
                return [[{
                    path: "",
                    component: _dashboard_dashboard_container_component__WEBPACK_IMPORTED_MODULE_30__["DashboardContainerComponent"],
                    data: _dashboard_example_routing_module__WEBPACK_IMPORTED_MODULE_15__["ɵ0"]
                }]];
            }, [])]);
        });


        /***/
    }),

    /***/ "./src/app/dashboard-example/dashboard-example.module.ts":
    /*!***************************************************************!*\
  !*** ./src/app/dashboard-example/dashboard-example.module.ts ***!
  \***************************************************************/
    /*! exports provided: DashboardExampleModule */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DashboardExampleModule", function () {
            return DashboardExampleModule;
        });
        var DashboardExampleModule = /** @class */ (function () {
            function DashboardExampleModule() {
            }

            return DashboardExampleModule;
        }());


        /***/
    }),

    /***/ "./src/app/dashboard-example/dashboard/dashboard-container.component.css.shim.ngstyle.js":
    /*!***********************************************************************************************!*\
  !*** ./src/app/dashboard-example/dashboard/dashboard-container.component.css.shim.ngstyle.js ***!
  \***********************************************************************************************/
    /*! exports provided: styles */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "styles", function () {
            return styles;
        });
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */
        var styles = [".grid-container[_ngcontent-%COMP%] {\n  margin: 1rem;\n}\n\n.dashboard-card[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 1rem;\n  left: 1rem;\n  right: 1rem;\n  bottom: 1rem;\n}\n\n.more-button[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0.5rem;\n  right: 0.7rem;\n}\n\n.dashboard-card-content[_ngcontent-%COMP%] {\n\n}"];


        /***/
    }),

    /***/ "./src/app/dashboard-example/dashboard/dashboard-container.component.ngfactory.js":
    /*!****************************************************************************************!*\
  !*** ./src/app/dashboard-example/dashboard/dashboard-container.component.ngfactory.js ***!
  \****************************************************************************************/
    /*! exports provided: RenderType_DashboardContainerComponent, View_DashboardContainerComponent_0, View_DashboardContainerComponent_Host_0, DashboardContainerComponentNgFactory */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_DashboardContainerComponent", function () {
            return RenderType_DashboardContainerComponent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_DashboardContainerComponent_0", function () {
            return View_DashboardContainerComponent_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_DashboardContainerComponent_Host_0", function () {
            return View_DashboardContainerComponent_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DashboardContainerComponentNgFactory", function () {
            return DashboardContainerComponentNgFactory;
        });
        /* harmony import */
        var _dashboard_container_component_css_shim_ngstyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dashboard-container.component.css.shim.ngstyle */ "./src/app/dashboard-example/dashboard/dashboard-container.component.css.shim.ngstyle.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _dev_team_form_dev_team_form_component_ngfactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dev-team-form/dev-team-form.component.ngfactory */ "./src/app/dashboard-example/dev-team-form/dev-team-form.component.ngfactory.js");
        /* harmony import */
        var _dev_team_form_dev_team_form_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dev-team-form/dev-team-form.component */ "./src/app/dashboard-example/dev-team-form/dev-team-form.component.ts");
        /* harmony import */
        var _ngrx_store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
        /* harmony import */
        var _dev_graph_dev_graph_component_ngfactory__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dev-graph/dev-graph.component.ngfactory */ "./src/app/dashboard-example/dev-graph/dev-graph.component.ngfactory.js");
        /* harmony import */
        var _dev_graph_dev_graph_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dev-graph/dev-graph.component */ "./src/app/dashboard-example/dev-graph/dev-graph.component.ts");
        /* harmony import */
        var _dev_team_table_dev_team_table_component_ngfactory__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../dev-team-table/dev-team-table.component.ngfactory */ "./src/app/dashboard-example/dev-team-table/dev-team-table.component.ngfactory.js");
        /* harmony import */
        var _dev_team_table_dev_team_table_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../dev-team-table/dev-team-table.component */ "./src/app/dashboard-example/dev-team-table/dev-team-table.component.ts");
        /* harmony import */
        var _node_modules_angular_material_grid_list_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../node_modules/@angular/material/grid-list/typings/index.ngfactory */ "./node_modules/@angular/material/grid-list/typings/index.ngfactory.js");
        /* harmony import */
        var _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/grid-list */ "./node_modules/@angular/material/esm5/grid-list.es5.js");
        /* harmony import */
        var _node_modules_angular_material_card_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../node_modules/@angular/material/card/typings/index.ngfactory */ "./node_modules/@angular/material/card/typings/index.ngfactory.js");
        /* harmony import */
        var _angular_material_card__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/card */ "./node_modules/@angular/material/esm5/card.es5.js");
        /* harmony import */
        var _node_modules_angular_material_button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../node_modules/@angular/material/button/typings/index.ngfactory */ "./node_modules/@angular/material/button/typings/index.ngfactory.js");
        /* harmony import */
        var _angular_material_menu__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/menu */ "./node_modules/@angular/material/esm5/menu.es5.js");
        /* harmony import */
        var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _angular_material_button__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm5/button.es5.js");
        /* harmony import */
        var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm5/platform.es5.js");
        /* harmony import */
        var _node_modules_angular_material_icon_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../node_modules/@angular/material/icon/typings/index.ngfactory */ "./node_modules/@angular/material/icon/typings/index.ngfactory.js");
        /* harmony import */
        var _angular_material_icon__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/material/icon */ "./node_modules/@angular/material/esm5/icon.es5.js");
        /* harmony import */
        var _node_modules_angular_material_menu_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../../node_modules/@angular/material/menu/typings/index.ngfactory */ "./node_modules/@angular/material/menu/typings/index.ngfactory.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _dashboard_container_component__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./dashboard-container.component */ "./src/app/dashboard-example/dashboard/dashboard-container.component.ts");
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */

























        var styles_DashboardContainerComponent = [_dashboard_container_component_css_shim_ngstyle__WEBPACK_IMPORTED_MODULE_0__["styles"]];
        var RenderType_DashboardContainerComponent = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵcrt"]({
            encapsulation: 0,
            styles: styles_DashboardContainerComponent,
            data: {}
        });

        function View_DashboardContainerComponent_2(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 1, "dev-team-form", [], null, null, null, _dev_team_form_dev_team_form_component_ngfactory__WEBPACK_IMPORTED_MODULE_2__["View_DevTeamFormComponent_0"], _dev_team_form_dev_team_form_component_ngfactory__WEBPACK_IMPORTED_MODULE_2__["RenderType_DevTeamFormComponent"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 114688, null, 0, _dev_team_form_dev_team_form_component__WEBPACK_IMPORTED_MODULE_3__["DevTeamFormComponent"], [_ngrx_store__WEBPACK_IMPORTED_MODULE_4__["Store"]], null, null)], function (_ck, _v) {
                _ck(_v, 1, 0);
            }, null);
        }

        function View_DashboardContainerComponent_3(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 1, "dev-graph", [], null, null, null, _dev_graph_dev_graph_component_ngfactory__WEBPACK_IMPORTED_MODULE_5__["View_DevGraphComponent_0"], _dev_graph_dev_graph_component_ngfactory__WEBPACK_IMPORTED_MODULE_5__["RenderType_DevGraphComponent"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 114688, null, 0, _dev_graph_dev_graph_component__WEBPACK_IMPORTED_MODULE_6__["DevGraphComponent"], [_ngrx_store__WEBPACK_IMPORTED_MODULE_4__["Store"]], null, null)], function (_ck, _v) {
                _ck(_v, 1, 0);
            }, null);
        }

        function View_DashboardContainerComponent_4(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 1, "dev-team-table", [], null, null, null, _dev_team_table_dev_team_table_component_ngfactory__WEBPACK_IMPORTED_MODULE_7__["View_DevTeamTableComponent_0"], _dev_team_table_dev_team_table_component_ngfactory__WEBPACK_IMPORTED_MODULE_7__["RenderType_DevTeamTableComponent"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 114688, null, 0, _dev_team_table_dev_team_table_component__WEBPACK_IMPORTED_MODULE_8__["DevTeamTableComponent"], [_ngrx_store__WEBPACK_IMPORTED_MODULE_4__["Store"]], null, null)], function (_ck, _v) {
                _ck(_v, 1, 0);
            }, null);
        }

        function View_DashboardContainerComponent_1(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 35, "mat-grid-tile", [["class", "mat-grid-tile"]], null, null, null, _node_modules_angular_material_grid_list_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_9__["View_MatGridTile_0"], _node_modules_angular_material_grid_list_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_9__["RenderType_MatGridTile"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 49152, [[1, 4]], 0, _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_10__["MatGridTile"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]], {
                rowspan: [0, "rowspan"],
                colspan: [1, "colspan"]
            }, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](2, 0, null, 0, 33, "mat-card", [["class", "dashboard-card mat-card"]], null, null, null, _node_modules_angular_material_card_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_11__["View_MatCard_0"], _node_modules_angular_material_card_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_11__["RenderType_MatCard"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](3, 49152, null, 0, _angular_material_card__WEBPACK_IMPORTED_MODULE_12__["MatCard"], [], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](4, 0, null, 0, 21, "mat-card-header", [["class", "mat-card-header"]], null, null, null, _node_modules_angular_material_card_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_11__["View_MatCardHeader_0"], _node_modules_angular_material_card_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_11__["RenderType_MatCardHeader"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](5, 49152, null, 0, _angular_material_card__WEBPACK_IMPORTED_MODULE_12__["MatCardHeader"], [], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](6, 0, null, 1, 19, "mat-card-title", [["class", "mat-card-title"]], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](7, 16384, null, 0, _angular_material_card__WEBPACK_IMPORTED_MODULE_12__["MatCardTitle"], [], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](8, null, [" ", " "])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](9, 16777216, null, null, 5, "button", [["aria-haspopup", "true"], ["aria-label", "Toggle menu"], ["class", "more-button"], ["mat-icon-button", ""]], [[8, "disabled", 0]], [[null, "mousedown"], [null, "keydown"], [null, "click"]], function (_v, en, $event) {
                var ad = true;
                if (("mousedown" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 10)._handleMousedown($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (("keydown" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 10)._handleKeydown($event) !== false);
                    ad = (pd_1 && ad);
                }
                if (("click" === en)) {
                    var pd_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 10)._handleClick($event) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, _node_modules_angular_material_button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_13__["View_MatButton_0"], _node_modules_angular_material_button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_13__["RenderType_MatButton"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](10, 1196032, null, 0, _angular_material_menu__WEBPACK_IMPORTED_MODULE_14__["MatMenuTrigger"], [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_15__["Overlay"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_material_menu__WEBPACK_IMPORTED_MODULE_14__["MAT_MENU_SCROLL_STRATEGY"], [2, _angular_material_menu__WEBPACK_IMPORTED_MODULE_14__["MatMenu"]], [8, null], [2, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_16__["Directionality"]], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_17__["FocusMonitor"]], {menu: [0, "menu"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](11, 180224, null, 0, _angular_material_button__WEBPACK_IMPORTED_MODULE_18__["MatButton"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_19__["Platform"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_17__["FocusMonitor"]], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](12, 0, null, 0, 2, "mat-icon", [["class", "mat-icon"], ["role", "img"]], [[2, "mat-icon-inline", null]], null, null, _node_modules_angular_material_icon_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_20__["View_MatIcon_0"], _node_modules_angular_material_icon_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_20__["RenderType_MatIcon"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](13, 638976, null, 0, _angular_material_icon__WEBPACK_IMPORTED_MODULE_21__["MatIcon"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_material_icon__WEBPACK_IMPORTED_MODULE_21__["MatIconRegistry"], [8, null]], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, 0, ["more_vert"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](15, 0, null, null, 10, "mat-menu", [["xPosition", "before"]], null, null, null, _node_modules_angular_material_menu_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_22__["View_MatMenu_0"], _node_modules_angular_material_menu_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_22__["RenderType_MatMenu"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](16, 1228800, [["menu", 4]], 2, _angular_material_menu__WEBPACK_IMPORTED_MODULE_14__["MatMenu"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"], _angular_material_menu__WEBPACK_IMPORTED_MODULE_14__["MAT_MENU_DEFAULT_OPTIONS"]], {xPosition: [0, "xPosition"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 2, {items: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 3, {lazyContent: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, null, _angular_material_menu__WEBPACK_IMPORTED_MODULE_14__["ɵf24"], null, [_angular_material_menu__WEBPACK_IMPORTED_MODULE_14__["MatMenu"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](20, 0, null, 0, 2, "button", [["class", "mat-menu-item"], ["mat-menu-item", ""], ["role", "menuitem"]], [[2, "mat-menu-item-highlighted", null], [2, "mat-menu-item-submenu-trigger", null], [1, "tabindex", 0], [1, "aria-disabled", 0], [1, "disabled", 0]], [[null, "click"], [null, "mouseenter"]], function (_v, en, $event) {
                var ad = true;
                if (("click" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21)._checkDisabled($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (("mouseenter" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21)._handleMouseEnter() !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, _node_modules_angular_material_menu_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_22__["View_MatMenuItem_0"], _node_modules_angular_material_menu_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_22__["RenderType_MatMenuItem"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](21, 180224, [[2, 4]], 0, _angular_material_menu__WEBPACK_IMPORTED_MODULE_14__["MatMenuItem"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_common__WEBPACK_IMPORTED_MODULE_23__["DOCUMENT"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_17__["FocusMonitor"], [2, _angular_material_menu__WEBPACK_IMPORTED_MODULE_14__["ɵf24"]]], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, 0, ["Expand"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](23, 0, null, 0, 2, "button", [["class", "mat-menu-item"], ["mat-menu-item", ""], ["role", "menuitem"]], [[2, "mat-menu-item-highlighted", null], [2, "mat-menu-item-submenu-trigger", null], [1, "tabindex", 0], [1, "aria-disabled", 0], [1, "disabled", 0]], [[null, "click"], [null, "mouseenter"]], function (_v, en, $event) {
                var ad = true;
                if (("click" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 24)._checkDisabled($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (("mouseenter" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 24)._handleMouseEnter() !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, _node_modules_angular_material_menu_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_22__["View_MatMenuItem_0"], _node_modules_angular_material_menu_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_22__["RenderType_MatMenuItem"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](24, 180224, [[2, 4]], 0, _angular_material_menu__WEBPACK_IMPORTED_MODULE_14__["MatMenuItem"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_common__WEBPACK_IMPORTED_MODULE_23__["DOCUMENT"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_17__["FocusMonitor"], [2, _angular_material_menu__WEBPACK_IMPORTED_MODULE_14__["ɵf24"]]], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, 0, ["Remove"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](26, 0, null, 0, 9, "mat-card-content", [["class", "dashboard-card-content mat-card-content"]], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](27, 16384, null, 0, _angular_material_card__WEBPACK_IMPORTED_MODULE_12__["MatCardContent"], [], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](28, 0, null, null, 7, "div", [], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](29, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_23__["NgSwitch"], [], {ngSwitch: [0, "ngSwitch"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, null, 1, null, View_DashboardContainerComponent_2)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](31, 278528, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_23__["NgSwitchCase"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"], _angular_common__WEBPACK_IMPORTED_MODULE_23__["NgSwitch"]], {ngSwitchCase: [0, "ngSwitchCase"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, null, 1, null, View_DashboardContainerComponent_3)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](33, 278528, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_23__["NgSwitchCase"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"], _angular_common__WEBPACK_IMPORTED_MODULE_23__["NgSwitch"]], {ngSwitchCase: [0, "ngSwitchCase"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, null, 1, null, View_DashboardContainerComponent_4)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](35, 278528, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_23__["NgSwitchCase"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"], _angular_common__WEBPACK_IMPORTED_MODULE_23__["NgSwitch"]], {ngSwitchCase: [0, "ngSwitchCase"]}, null)], function (_ck, _v) {
                var currVal_0 = _v.context.$implicit.rows;
                var currVal_1 = _v.context.$implicit.cols;
                _ck(_v, 1, 0, currVal_0, currVal_1);
                var currVal_4 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 16);
                _ck(_v, 10, 0, currVal_4);
                _ck(_v, 13, 0);
                var currVal_6 = "before";
                _ck(_v, 16, 0, currVal_6);
                var currVal_17 = _v.context.$implicit.title;
                _ck(_v, 29, 0, currVal_17);
                var currVal_18 = "Dev Team member";
                _ck(_v, 31, 0, currVal_18);
                var currVal_19 = "Dev Graph";
                _ck(_v, 33, 0, currVal_19);
                var currVal_20 = "Dev Team members";
                _ck(_v, 35, 0, currVal_20);
            }, function (_ck, _v) {
                var currVal_2 = _v.context.$implicit.title;
                _ck(_v, 8, 0, currVal_2);
                var currVal_3 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 11).disabled || null);
                _ck(_v, 9, 0, currVal_3);
                var currVal_5 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 13).inline;
                _ck(_v, 12, 0, currVal_5);
                var currVal_7 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21)._highlighted;
                var currVal_8 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21)._triggersSubmenu;
                var currVal_9 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21)._getTabIndex();
                var currVal_10 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21).disabled.toString();
                var currVal_11 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21).disabled || null);
                _ck(_v, 20, 0, currVal_7, currVal_8, currVal_9, currVal_10, currVal_11);
                var currVal_12 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 24)._highlighted;
                var currVal_13 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 24)._triggersSubmenu;
                var currVal_14 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 24)._getTabIndex();
                var currVal_15 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 24).disabled.toString();
                var currVal_16 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 24).disabled || null);
                _ck(_v, 23, 0, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16);
            });
        }

        function View_DashboardContainerComponent_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 7, "div", [["class", "grid-container"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](1, 0, null, null, 1, "h1", [["class", "mat-h1"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["Dashboard"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](3, 0, null, null, 4, "mat-grid-list", [["class", "mat-grid-list"], ["cols", "2"], ["rowHeight", "17rem"]], null, null, null, _node_modules_angular_material_grid_list_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_9__["View_MatGridList_0"], _node_modules_angular_material_grid_list_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_9__["RenderType_MatGridList"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](4, 2211840, null, 1, _angular_material_grid_list__WEBPACK_IMPORTED_MODULE_10__["MatGridList"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], [2, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_16__["Directionality"]]], {
                cols: [0, "cols"],
                rowHeight: [1, "rowHeight"]
            }, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 1, {_tiles: 1}), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, 0, 1, null, View_DashboardContainerComponent_1)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](7, 802816, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_23__["NgForOf"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"]], {ngForOf: [0, "ngForOf"]}, null)], function (_ck, _v) {
                var _co = _v.component;
                var currVal_0 = "2";
                var currVal_1 = "17rem";
                _ck(_v, 4, 0, currVal_0, currVal_1);
                var currVal_2 = _co.cards;
                _ck(_v, 7, 0, currVal_2);
            }, null);
        }

        function View_DashboardContainerComponent_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 1, "dashboard", [], null, null, null, View_DashboardContainerComponent_0, RenderType_DashboardContainerComponent)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 114688, null, 0, _dashboard_container_component__WEBPACK_IMPORTED_MODULE_24__["DashboardContainerComponent"], [_ngrx_store__WEBPACK_IMPORTED_MODULE_4__["Store"]], null, null)], function (_ck, _v) {
                _ck(_v, 1, 0);
            }, null);
        }

        var DashboardContainerComponentNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵccf"]("dashboard", _dashboard_container_component__WEBPACK_IMPORTED_MODULE_24__["DashboardContainerComponent"], View_DashboardContainerComponent_Host_0, {}, {}, []);


        /***/
    }),

    /***/ "./src/app/dashboard-example/dashboard/dashboard-container.component.ts":
    /*!******************************************************************************!*\
  !*** ./src/app/dashboard-example/dashboard/dashboard-container.component.ts ***!
  \******************************************************************************/
    /*! exports provided: DashboardContainerComponent */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DashboardContainerComponent", function () {
            return DashboardContainerComponent;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _ngrx_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
        /* harmony import */
        var _ngrx_feature_core_reducers_dev_team_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ngrx-feature-core/reducers/dev-team/selectors */ "./src/app/dashboard-example/ngrx-feature-core/reducers/dev-team/selectors.ts");


        var DashboardContainerComponent = /** @class */ (function () {
            function DashboardContainerComponent(store) {
                this.store = store;
                this.cards = [
                    {title: 'Dev Team member', cols: 1, rows: 1},
                    {title: 'Dev Team members', cols: 1, rows: 3},
                    {title: 'Dev Graph', cols: 1, rows: 2}
                ];
            }

            DashboardContainerComponent.prototype.ngOnInit = function () {
                this.store.select(_ngrx_feature_core_reducers_dev_team_selectors__WEBPACK_IMPORTED_MODULE_2__["selectAllDevTeamMembers"])
                    .subscribe(function (x) {
                        return console.log('all: ', x);
                    });
                this.store.select(_ngrx_feature_core_reducers_dev_team_selectors__WEBPACK_IMPORTED_MODULE_2__["selectDevTeamMemberTotal"])
                    .subscribe(function (x) {
                        return console.log('total: ' + x);
                    });
                this.store.select(_ngrx_feature_core_reducers_dev_team_selectors__WEBPACK_IMPORTED_MODULE_2__["selectDevTeamMemberIds"])
                    .subscribe(function (x) {
                        return console.log('ids: ' + x);
                    });
                this.store.select(_ngrx_feature_core_reducers_dev_team_selectors__WEBPACK_IMPORTED_MODULE_2__["selectDevTeamMemberEntities"])
                    .subscribe(function (x) {
                        return console.log('entities: ', x);
                    });
            };
            return DashboardContainerComponent;
        }());


        /***/
    }),

    /***/ "./src/app/dashboard-example/dev-graph/dev-graph.component.css.shim.ngstyle.js":
    /*!*************************************************************************************!*\
  !*** ./src/app/dashboard-example/dev-graph/dev-graph.component.css.shim.ngstyle.js ***!
  \*************************************************************************************/
    /*! exports provided: styles */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "styles", function () {
            return styles;
        });
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */
        var styles = [""];


        /***/
    }),

    /***/ "./src/app/dashboard-example/dev-graph/dev-graph.component.ngfactory.js":
    /*!******************************************************************************!*\
  !*** ./src/app/dashboard-example/dev-graph/dev-graph.component.ngfactory.js ***!
  \******************************************************************************/
    /*! exports provided: RenderType_DevGraphComponent, View_DevGraphComponent_0, View_DevGraphComponent_Host_0, DevGraphComponentNgFactory */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_DevGraphComponent", function () {
            return RenderType_DevGraphComponent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_DevGraphComponent_0", function () {
            return View_DevGraphComponent_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_DevGraphComponent_Host_0", function () {
            return View_DevGraphComponent_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DevGraphComponentNgFactory", function () {
            return DevGraphComponentNgFactory;
        });
        /* harmony import */
        var _dev_graph_component_css_shim_ngstyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dev-graph.component.css.shim.ngstyle */ "./src/app/dashboard-example/dev-graph/dev-graph.component.css.shim.ngstyle.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _dev_graph_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dev-graph.component */ "./src/app/dashboard-example/dev-graph/dev-graph.component.ts");
        /* harmony import */
        var _ngrx_store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */





        var styles_DevGraphComponent = [_dev_graph_component_css_shim_ngstyle__WEBPACK_IMPORTED_MODULE_0__["styles"]];
        var RenderType_DevGraphComponent = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵcrt"]({
            encapsulation: 0,
            styles: styles_DevGraphComponent,
            data: {}
        });

        function View_DevGraphComponent_1(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 8, "div", [], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](1, 0, null, null, 1, "span", [], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](2, null, ["", ""])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](3, 0, null, null, 1, "span", [], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](4, null, ["", ""])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](5, 0, null, null, 1, "span", [], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](6, null, ["", ""])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](7, 0, null, null, 1, "span", [], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](8, null, ["", ""]))], null, function (_ck, _v) {
                var currVal_0 = _v.context.$implicit.name;
                _ck(_v, 2, 0, currVal_0);
                var currVal_1 = _v.context.$implicit.frontend;
                _ck(_v, 4, 0, currVal_1);
                var currVal_2 = _v.context.$implicit.backend;
                _ck(_v, 6, 0, currVal_2);
                var currVal_3 = _v.context.$implicit.teamwork;
                _ck(_v, 8, 0, currVal_3);
            });
        }

        function View_DevGraphComponent_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, null, 2, null, View_DevGraphComponent_1)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 802816, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_2__["NgForOf"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"]], {ngForOf: [0, "ngForOf"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵpid"](131072, _angular_common__WEBPACK_IMPORTED_MODULE_2__["AsyncPipe"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])], function (_ck, _v) {
                var _co = _v.component;
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunv"](_v, 1, 0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2).transform(_co.devTeamMembers$));
                _ck(_v, 1, 0, currVal_0);
            }, null);
        }

        function View_DevGraphComponent_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 1, "dev-graph", [], null, null, null, View_DevGraphComponent_0, RenderType_DevGraphComponent)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 114688, null, 0, _dev_graph_component__WEBPACK_IMPORTED_MODULE_3__["DevGraphComponent"], [_ngrx_store__WEBPACK_IMPORTED_MODULE_4__["Store"]], null, null)], function (_ck, _v) {
                _ck(_v, 1, 0);
            }, null);
        }

        var DevGraphComponentNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵccf"]("dev-graph", _dev_graph_component__WEBPACK_IMPORTED_MODULE_3__["DevGraphComponent"], View_DevGraphComponent_Host_0, {}, {}, []);


        /***/
    }),

    /***/ "./src/app/dashboard-example/dev-graph/dev-graph.component.ts":
    /*!********************************************************************!*\
  !*** ./src/app/dashboard-example/dev-graph/dev-graph.component.ts ***!
  \********************************************************************/
    /*! exports provided: DevGraphComponent */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DevGraphComponent", function () {
            return DevGraphComponent;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _ngrx_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
        /* harmony import */
        var _ngrx_feature_core_reducers_dev_team_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ngrx-feature-core/reducers/dev-team/selectors */ "./src/app/dashboard-example/ngrx-feature-core/reducers/dev-team/selectors.ts");


        var DevGraphComponent = /** @class */ (function () {
            function DevGraphComponent(store) {
                this.store = store;
                this.devTeamMembers$ = store.select(_ngrx_feature_core_reducers_dev_team_selectors__WEBPACK_IMPORTED_MODULE_2__["selectAllDevTeamMembers"]);
            }

            DevGraphComponent.prototype.ngOnInit = function () {
            };
            return DevGraphComponent;
        }());


        /***/
    }),

    /***/ "./src/app/dashboard-example/dev-team-form/dev-team-form.component.css.shim.ngstyle.js":
    /*!*********************************************************************************************!*\
  !*** ./src/app/dashboard-example/dev-team-form/dev-team-form.component.css.shim.ngstyle.js ***!
  \*********************************************************************************************/
    /*! exports provided: styles */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "styles", function () {
            return styles;
        });
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */
        var styles = [".dev-team-form[_ngcontent-%COMP%]    > mat-form-field[_ngcontent-%COMP%] {\n  margin-right: 0.5rem;\n  margin-bottom: 3rem;\n}"];


        /***/
    }),

    /***/ "./src/app/dashboard-example/dev-team-form/dev-team-form.component.ngfactory.js":
    /*!**************************************************************************************!*\
  !*** ./src/app/dashboard-example/dev-team-form/dev-team-form.component.ngfactory.js ***!
  \**************************************************************************************/
    /*! exports provided: RenderType_DevTeamFormComponent, View_DevTeamFormComponent_0, View_DevTeamFormComponent_Host_0, DevTeamFormComponentNgFactory */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_DevTeamFormComponent", function () {
            return RenderType_DevTeamFormComponent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_DevTeamFormComponent_0", function () {
            return View_DevTeamFormComponent_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_DevTeamFormComponent_Host_0", function () {
            return View_DevTeamFormComponent_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DevTeamFormComponentNgFactory", function () {
            return DevTeamFormComponentNgFactory;
        });
        /* harmony import */
        var _dev_team_form_component_css_shim_ngstyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dev-team-form.component.css.shim.ngstyle */ "./src/app/dashboard-example/dev-team-form/dev-team-form.component.css.shim.ngstyle.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/form-field */ "./node_modules/@angular/material/esm5/form-field.es5.js");
        /* harmony import */
        var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
        /* harmony import */
        var _node_modules_angular_material_form_field_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../node_modules/@angular/material/form-field/typings/index.ngfactory */ "./node_modules/@angular/material/form-field/typings/index.ngfactory.js");
        /* harmony import */
        var _angular_material_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/core */ "./node_modules/@angular/material/esm5/core.es5.js");
        /* harmony import */
        var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/cdk/bidi */ "./node_modules/@angular/cdk/esm5/bidi.es5.js");
        /* harmony import */
        var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/platform */ "./node_modules/@angular/cdk/esm5/platform.es5.js");
        /* harmony import */
        var _angular_material_input__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/input */ "./node_modules/@angular/material/esm5/input.es5.js");
        /* harmony import */
        var _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/cdk/text-field */ "./node_modules/@angular/cdk/esm5/text-field.es5.js");
        /* harmony import */
        var _angular_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
        /* harmony import */
        var _node_modules_angular_material_button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../node_modules/@angular/material/button/typings/index.ngfactory */ "./node_modules/@angular/material/button/typings/index.ngfactory.js");
        /* harmony import */
        var _angular_material_button__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/button */ "./node_modules/@angular/material/esm5/button.es5.js");
        /* harmony import */
        var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/cdk/a11y */ "./node_modules/@angular/cdk/esm5/a11y.es5.js");
        /* harmony import */
        var _dev_team_form_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./dev-team-form.component */ "./src/app/dashboard-example/dev-team-form/dev-team-form.component.ts");
        /* harmony import */
        var _ngrx_store__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */
















        var styles_DevTeamFormComponent = [_dev_team_form_component_css_shim_ngstyle__WEBPACK_IMPORTED_MODULE_0__["styles"]];
        var RenderType_DevTeamFormComponent = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵcrt"]({
            encapsulation: 0,
            styles: styles_DevTeamFormComponent,
            data: {}
        });

        function View_DevTeamFormComponent_1(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 2, "mat-error", [["class", "mat-error"], ["role", "alert"]], [[1, "id", 0]], null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, [[5, 4]], 0, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatError"], [], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["Developer name is required "]))], null, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 1).id;
                _ck(_v, 0, 0, currVal_0);
            });
        }

        function View_DevTeamFormComponent_2(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 2, "mat-error", [["class", "mat-error"], ["role", "alert"]], [[1, "id", 0]], null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, [[12, 4]], 0, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatError"], [], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, [" Frontend skill is required "]))], null, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 1).id;
                _ck(_v, 0, 0, currVal_0);
            });
        }

        function View_DevTeamFormComponent_3(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 2, "mat-error", [["class", "mat-error"], ["role", "alert"]], [[1, "id", 0]], null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, [[12, 4]], 0, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatError"], [], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["Value must be between 0 and 10 "]))], null, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 1).id;
                _ck(_v, 0, 0, currVal_0);
            });
        }

        function View_DevTeamFormComponent_4(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 2, "mat-hint", [["class", "mat-hint"]], [[2, "mat-right", null], [1, "id", 0], [1, "align", 0]], null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, [[13, 4]], 0, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatHint"], [], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["Awesome"]))], null, function (_ck, _v) {
                var currVal_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 1).align == "end");
                var currVal_1 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 1).id;
                var currVal_2 = null;
                _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2);
            });
        }

        function View_DevTeamFormComponent_5(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 2, "mat-error", [["class", "mat-error"], ["role", "alert"]], [[1, "id", 0]], null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, [[19, 4]], 0, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatError"], [], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["Backend skill is required "]))], null, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 1).id;
                _ck(_v, 0, 0, currVal_0);
            });
        }

        function View_DevTeamFormComponent_6(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 2, "mat-error", [["class", "mat-error"], ["role", "alert"]], [[1, "id", 0]], null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, [[19, 4]], 0, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatError"], [], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["Value must be between 0 and 10 "]))], null, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 1).id;
                _ck(_v, 0, 0, currVal_0);
            });
        }

        function View_DevTeamFormComponent_7(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 2, "mat-error", [["class", "mat-error"], ["role", "alert"]], [[1, "id", 0]], null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, [[26, 4]], 0, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatError"], [], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, [" Teamwork skill is required "]))], null, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 1).id;
                _ck(_v, 0, 0, currVal_0);
            });
        }

        function View_DevTeamFormComponent_8(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 2, "mat-error", [["class", "mat-error"], ["role", "alert"]], [[1, "id", 0]], null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, [[26, 4]], 0, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatError"], [], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, null, ["Value must be between 0 and 10 "]))], null, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 1).id;
                _ck(_v, 0, 0, currVal_0);
            });
        }

        function View_DevTeamFormComponent_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](402653184, 1, {devName: 0}), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](1, 0, null, null, 94, "form", [["class", "dev-team-form"], ["novalidate", ""]], [[2, "ng-untouched", null], [2, "ng-touched", null], [2, "ng-pristine", null], [2, "ng-dirty", null], [2, "ng-valid", null], [2, "ng-invalid", null], [2, "ng-pending", null]], [[null, "ngSubmit"], [null, "submit"], [null, "reset"]], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (("submit" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 3).onSubmit($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (("reset" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 3).onReset() !== false);
                    ad = (pd_1 && ad);
                }
                if (("ngSubmit" === en)) {
                    var pd_2 = (_co.submitForm(_co.devFormGroup) !== false);
                    ad = (pd_2 && ad);
                }
                return ad;
            }, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](2, 16384, null, 0, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ɵangular_packages_forms_forms_bg"], [], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](3, 540672, null, 0, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormGroupDirective"], [[8, null], [8, null]], {form: [0, "form"]}, {ngSubmit: "ngSubmit"}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, null, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ControlContainer"], null, [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormGroupDirective"]]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](5, 16384, null, 0, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControlStatusGroup"], [[4, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ControlContainer"]]], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](6, 0, null, null, 18, "mat-form-field", [["class", "mat-form-field"]], [[2, "mat-form-field-appearance-standard", null], [2, "mat-form-field-appearance-fill", null], [2, "mat-form-field-appearance-outline", null], [2, "mat-form-field-appearance-legacy", null], [2, "mat-form-field-invalid", null], [2, "mat-form-field-can-float", null], [2, "mat-form-field-should-float", null], [2, "mat-form-field-hide-placeholder", null], [2, "mat-form-field-disabled", null], [2, "mat-form-field-autofilled", null], [2, "mat-focused", null], [2, "mat-accent", null], [2, "mat-warn", null], [2, "ng-untouched", null], [2, "ng-touched", null], [2, "ng-pristine", null], [2, "ng-dirty", null], [2, "ng-valid", null], [2, "ng-invalid", null], [2, "ng-pending", null]], null, null, _node_modules_angular_material_form_field_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_4__["View_MatFormField_0"], _node_modules_angular_material_form_field_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_4__["RenderType_MatFormField"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](7, 7389184, null, 7, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatFormField"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"], [2, _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MAT_LABEL_GLOBAL_OPTIONS"]], [2, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"]], [2, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MAT_FORM_FIELD_DEFAULT_OPTIONS"]], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 2, {_control: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 3, {_placeholderChild: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 4, {_labelChild: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 5, {_errorChildren: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 6, {_hintChildren: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 7, {_prefixChildren: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 8, {_suffixChildren: 1}), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](15, 0, [[1, 0], ["devName", 1]], 1, 7, "input", [["autocomplete", "off"], ["class", "mat-input-element mat-form-field-autofill-control"], ["matInput", ""], ["placeholder", "Dev name"], ["type", "text"]], [[2, "ng-untouched", null], [2, "ng-touched", null], [2, "ng-pristine", null], [2, "ng-dirty", null], [2, "ng-valid", null], [2, "ng-invalid", null], [2, "ng-pending", null], [2, "mat-input-server", null], [1, "id", 0], [1, "placeholder", 0], [8, "disabled", 0], [8, "required", 0], [8, "readOnly", 0], [1, "aria-describedby", 0], [1, "aria-invalid", 0], [1, "aria-required", 0]], [[null, "input"], [null, "blur"], [null, "compositionstart"], [null, "compositionend"], [null, "focus"]], function (_v, en, $event) {
                var ad = true;
                if (("input" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 16)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (("blur" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 16).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (("compositionstart" === en)) {
                    var pd_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 16)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (("compositionend" === en)) {
                    var pd_3 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 16)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (("blur" === en)) {
                    var pd_4 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21)._focusChanged(false) !== false);
                    ad = (pd_4 && ad);
                }
                if (("focus" === en)) {
                    var pd_5 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21)._focusChanged(true) !== false);
                    ad = (pd_5 && ad);
                }
                if (("input" === en)) {
                    var pd_6 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21)._onInput() !== false);
                    ad = (pd_6 && ad);
                }
                return ad;
            }, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](16, 16384, null, 0, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["DefaultValueAccessor"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["COMPOSITION_BUFFER_MODE"]]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](1024, null, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"], function (p0_0) {
                return [p0_0];
            }, [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["DefaultValueAccessor"]]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](18, 540672, null, 0, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControlDirective"], [[8, null], [8, null], [6, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"]], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ɵangular_packages_forms_forms_j"]]], {form: [0, "form"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, null, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"], null, [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControlDirective"]]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](20, 16384, null, 0, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControlStatus"], [[4, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"]]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](21, 999424, null, 0, _angular_material_input__WEBPACK_IMPORTED_MODULE_8__["MatInput"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"], [6, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"]], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgForm"]], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormGroupDirective"]], _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["ErrorStateMatcher"], [8, null], _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_9__["AutofillMonitor"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]], {
                placeholder: [0, "placeholder"],
                type: [1, "type"]
            }, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[2, 4]], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatFormFieldControl"], null, [_angular_material_input__WEBPACK_IMPORTED_MODULE_8__["MatInput"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, 5, 1, null, View_DevTeamFormComponent_1)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](24, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_10__["NgIf"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], {ngIf: [0, "ngIf"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](25, 0, null, null, 22, "mat-form-field", [["class", "mat-form-field"]], [[2, "mat-form-field-appearance-standard", null], [2, "mat-form-field-appearance-fill", null], [2, "mat-form-field-appearance-outline", null], [2, "mat-form-field-appearance-legacy", null], [2, "mat-form-field-invalid", null], [2, "mat-form-field-can-float", null], [2, "mat-form-field-should-float", null], [2, "mat-form-field-hide-placeholder", null], [2, "mat-form-field-disabled", null], [2, "mat-form-field-autofilled", null], [2, "mat-focused", null], [2, "mat-accent", null], [2, "mat-warn", null], [2, "ng-untouched", null], [2, "ng-touched", null], [2, "ng-pristine", null], [2, "ng-dirty", null], [2, "ng-valid", null], [2, "ng-invalid", null], [2, "ng-pending", null]], null, null, _node_modules_angular_material_form_field_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_4__["View_MatFormField_0"], _node_modules_angular_material_form_field_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_4__["RenderType_MatFormField"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](26, 7389184, null, 7, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatFormField"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"], [2, _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MAT_LABEL_GLOBAL_OPTIONS"]], [2, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"]], [2, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MAT_FORM_FIELD_DEFAULT_OPTIONS"]], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 9, {_control: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 10, {_placeholderChild: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 11, {_labelChild: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 12, {_errorChildren: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 13, {_hintChildren: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 14, {_prefixChildren: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 15, {_suffixChildren: 1}), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](34, 0, null, 1, 7, "input", [["autocomplete", "off"], ["class", "mat-input-element mat-form-field-autofill-control"], ["matInput", ""], ["placeholder", "Frontend"]], [[2, "ng-untouched", null], [2, "ng-touched", null], [2, "ng-pristine", null], [2, "ng-dirty", null], [2, "ng-valid", null], [2, "ng-invalid", null], [2, "ng-pending", null], [2, "mat-input-server", null], [1, "id", 0], [1, "placeholder", 0], [8, "disabled", 0], [8, "required", 0], [8, "readOnly", 0], [1, "aria-describedby", 0], [1, "aria-invalid", 0], [1, "aria-required", 0]], [[null, "input"], [null, "blur"], [null, "compositionstart"], [null, "compositionend"], [null, "focus"]], function (_v, en, $event) {
                var ad = true;
                if (("input" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 35)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (("blur" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 35).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (("compositionstart" === en)) {
                    var pd_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 35)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (("compositionend" === en)) {
                    var pd_3 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 35)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (("blur" === en)) {
                    var pd_4 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 40)._focusChanged(false) !== false);
                    ad = (pd_4 && ad);
                }
                if (("focus" === en)) {
                    var pd_5 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 40)._focusChanged(true) !== false);
                    ad = (pd_5 && ad);
                }
                if (("input" === en)) {
                    var pd_6 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 40)._onInput() !== false);
                    ad = (pd_6 && ad);
                }
                return ad;
            }, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](35, 16384, null, 0, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["DefaultValueAccessor"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["COMPOSITION_BUFFER_MODE"]]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](1024, null, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"], function (p0_0) {
                return [p0_0];
            }, [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["DefaultValueAccessor"]]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](37, 540672, null, 0, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControlDirective"], [[8, null], [8, null], [6, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"]], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ɵangular_packages_forms_forms_j"]]], {form: [0, "form"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, null, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"], null, [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControlDirective"]]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](39, 16384, null, 0, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControlStatus"], [[4, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"]]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](40, 999424, null, 0, _angular_material_input__WEBPACK_IMPORTED_MODULE_8__["MatInput"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"], [6, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"]], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgForm"]], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormGroupDirective"]], _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["ErrorStateMatcher"], [8, null], _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_9__["AutofillMonitor"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]], {placeholder: [0, "placeholder"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[9, 4]], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatFormFieldControl"], null, [_angular_material_input__WEBPACK_IMPORTED_MODULE_8__["MatInput"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, 5, 1, null, View_DevTeamFormComponent_2)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](43, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_10__["NgIf"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], {ngIf: [0, "ngIf"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, 5, 1, null, View_DevTeamFormComponent_3)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](45, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_10__["NgIf"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], {ngIf: [0, "ngIf"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, 6, 1, null, View_DevTeamFormComponent_4)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](47, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_10__["NgIf"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], {ngIf: [0, "ngIf"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](48, 0, null, null, 20, "mat-form-field", [["class", "mat-form-field"]], [[2, "mat-form-field-appearance-standard", null], [2, "mat-form-field-appearance-fill", null], [2, "mat-form-field-appearance-outline", null], [2, "mat-form-field-appearance-legacy", null], [2, "mat-form-field-invalid", null], [2, "mat-form-field-can-float", null], [2, "mat-form-field-should-float", null], [2, "mat-form-field-hide-placeholder", null], [2, "mat-form-field-disabled", null], [2, "mat-form-field-autofilled", null], [2, "mat-focused", null], [2, "mat-accent", null], [2, "mat-warn", null], [2, "ng-untouched", null], [2, "ng-touched", null], [2, "ng-pristine", null], [2, "ng-dirty", null], [2, "ng-valid", null], [2, "ng-invalid", null], [2, "ng-pending", null]], null, null, _node_modules_angular_material_form_field_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_4__["View_MatFormField_0"], _node_modules_angular_material_form_field_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_4__["RenderType_MatFormField"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](49, 7389184, null, 7, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatFormField"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"], [2, _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MAT_LABEL_GLOBAL_OPTIONS"]], [2, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"]], [2, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MAT_FORM_FIELD_DEFAULT_OPTIONS"]], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 16, {_control: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 17, {_placeholderChild: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 18, {_labelChild: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 19, {_errorChildren: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 20, {_hintChildren: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 21, {_prefixChildren: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 22, {_suffixChildren: 1}), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](57, 0, null, 1, 7, "input", [["autocomplete", "off"], ["class", "mat-input-element mat-form-field-autofill-control"], ["matInput", ""], ["placeholder", "Backend"]], [[2, "ng-untouched", null], [2, "ng-touched", null], [2, "ng-pristine", null], [2, "ng-dirty", null], [2, "ng-valid", null], [2, "ng-invalid", null], [2, "ng-pending", null], [2, "mat-input-server", null], [1, "id", 0], [1, "placeholder", 0], [8, "disabled", 0], [8, "required", 0], [8, "readOnly", 0], [1, "aria-describedby", 0], [1, "aria-invalid", 0], [1, "aria-required", 0]], [[null, "input"], [null, "blur"], [null, "compositionstart"], [null, "compositionend"], [null, "focus"]], function (_v, en, $event) {
                var ad = true;
                if (("input" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 58)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (("blur" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 58).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (("compositionstart" === en)) {
                    var pd_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 58)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (("compositionend" === en)) {
                    var pd_3 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 58)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (("blur" === en)) {
                    var pd_4 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 63)._focusChanged(false) !== false);
                    ad = (pd_4 && ad);
                }
                if (("focus" === en)) {
                    var pd_5 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 63)._focusChanged(true) !== false);
                    ad = (pd_5 && ad);
                }
                if (("input" === en)) {
                    var pd_6 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 63)._onInput() !== false);
                    ad = (pd_6 && ad);
                }
                return ad;
            }, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](58, 16384, null, 0, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["DefaultValueAccessor"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["COMPOSITION_BUFFER_MODE"]]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](1024, null, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"], function (p0_0) {
                return [p0_0];
            }, [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["DefaultValueAccessor"]]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](60, 540672, null, 0, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControlDirective"], [[8, null], [8, null], [6, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"]], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ɵangular_packages_forms_forms_j"]]], {form: [0, "form"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, null, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"], null, [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControlDirective"]]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](62, 16384, null, 0, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControlStatus"], [[4, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"]]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](63, 999424, null, 0, _angular_material_input__WEBPACK_IMPORTED_MODULE_8__["MatInput"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"], [6, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"]], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgForm"]], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormGroupDirective"]], _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["ErrorStateMatcher"], [8, null], _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_9__["AutofillMonitor"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]], {placeholder: [0, "placeholder"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[16, 4]], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatFormFieldControl"], null, [_angular_material_input__WEBPACK_IMPORTED_MODULE_8__["MatInput"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, 5, 1, null, View_DevTeamFormComponent_5)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](66, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_10__["NgIf"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], {ngIf: [0, "ngIf"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, 5, 1, null, View_DevTeamFormComponent_6)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](68, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_10__["NgIf"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], {ngIf: [0, "ngIf"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](69, 0, null, null, 20, "mat-form-field", [["class", "mat-form-field"]], [[2, "mat-form-field-appearance-standard", null], [2, "mat-form-field-appearance-fill", null], [2, "mat-form-field-appearance-outline", null], [2, "mat-form-field-appearance-legacy", null], [2, "mat-form-field-invalid", null], [2, "mat-form-field-can-float", null], [2, "mat-form-field-should-float", null], [2, "mat-form-field-hide-placeholder", null], [2, "mat-form-field-disabled", null], [2, "mat-form-field-autofilled", null], [2, "mat-focused", null], [2, "mat-accent", null], [2, "mat-warn", null], [2, "ng-untouched", null], [2, "ng-touched", null], [2, "ng-pristine", null], [2, "ng-dirty", null], [2, "ng-valid", null], [2, "ng-invalid", null], [2, "ng-pending", null]], null, null, _node_modules_angular_material_form_field_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_4__["View_MatFormField_0"], _node_modules_angular_material_form_field_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_4__["RenderType_MatFormField"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](70, 7389184, null, 7, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatFormField"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"], [2, _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["MAT_LABEL_GLOBAL_OPTIONS"]], [2, _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_6__["Directionality"]], [2, _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MAT_FORM_FIELD_DEFAULT_OPTIONS"]], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 23, {_control: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 24, {_placeholderChild: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 25, {_labelChild: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 26, {_errorChildren: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 27, {_hintChildren: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 28, {_prefixChildren: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 29, {_suffixChildren: 1}), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](78, 0, null, 1, 7, "input", [["autocomplete", "off"], ["class", "mat-input-element mat-form-field-autofill-control"], ["matInput", ""], ["placeholder", "Teamwork"]], [[2, "ng-untouched", null], [2, "ng-touched", null], [2, "ng-pristine", null], [2, "ng-dirty", null], [2, "ng-valid", null], [2, "ng-invalid", null], [2, "ng-pending", null], [2, "mat-input-server", null], [1, "id", 0], [1, "placeholder", 0], [8, "disabled", 0], [8, "required", 0], [8, "readOnly", 0], [1, "aria-describedby", 0], [1, "aria-invalid", 0], [1, "aria-required", 0]], [[null, "input"], [null, "blur"], [null, "compositionstart"], [null, "compositionend"], [null, "focus"]], function (_v, en, $event) {
                var ad = true;
                if (("input" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 79)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (("blur" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 79).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (("compositionstart" === en)) {
                    var pd_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 79)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (("compositionend" === en)) {
                    var pd_3 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 79)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (("blur" === en)) {
                    var pd_4 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 84)._focusChanged(false) !== false);
                    ad = (pd_4 && ad);
                }
                if (("focus" === en)) {
                    var pd_5 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 84)._focusChanged(true) !== false);
                    ad = (pd_5 && ad);
                }
                if (("input" === en)) {
                    var pd_6 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 84)._onInput() !== false);
                    ad = (pd_6 && ad);
                }
                return ad;
            }, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](79, 16384, null, 0, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["DefaultValueAccessor"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["COMPOSITION_BUFFER_MODE"]]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](1024, null, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"], function (p0_0) {
                return [p0_0];
            }, [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["DefaultValueAccessor"]]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](81, 540672, null, 0, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControlDirective"], [[8, null], [8, null], [6, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NG_VALUE_ACCESSOR"]], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ɵangular_packages_forms_forms_j"]]], {form: [0, "form"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, null, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"], null, [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControlDirective"]]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](83, 16384, null, 0, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControlStatus"], [[4, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"]]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](84, 999424, null, 0, _angular_material_input__WEBPACK_IMPORTED_MODULE_8__["MatInput"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"], [6, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControl"]], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgForm"]], [2, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormGroupDirective"]], _angular_material_core__WEBPACK_IMPORTED_MODULE_5__["ErrorStateMatcher"], [8, null], _angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_9__["AutofillMonitor"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]], {placeholder: [0, "placeholder"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[23, 4]], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_2__["MatFormFieldControl"], null, [_angular_material_input__WEBPACK_IMPORTED_MODULE_8__["MatInput"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, 5, 1, null, View_DevTeamFormComponent_7)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](87, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_10__["NgIf"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], {ngIf: [0, "ngIf"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](16777216, null, 5, 1, null, View_DevTeamFormComponent_8)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](89, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_10__["NgIf"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], {ngIf: [0, "ngIf"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](90, 0, null, null, 2, "button", [["color", "primary"], ["mat-raised-button", ""], ["type", "submit"]], [[8, "disabled", 0]], null, null, _node_modules_angular_material_button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_11__["View_MatButton_0"], _node_modules_angular_material_button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_11__["RenderType_MatButton"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](91, 180224, null, 0, _angular_material_button__WEBPACK_IMPORTED_MODULE_12__["MatButton"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_13__["FocusMonitor"]], {
                disabled: [0, "disabled"],
                color: [1, "color"]
            }, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, 0, ["Submit "])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](93, 0, null, null, 2, "button", [["color", "warn"], ["mat-button", ""], ["type", "reset"]], [[8, "disabled", 0]], null, null, _node_modules_angular_material_button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_11__["View_MatButton_0"], _node_modules_angular_material_button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_11__["RenderType_MatButton"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](94, 180224, null, 0, _angular_material_button__WEBPACK_IMPORTED_MODULE_12__["MatButton"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__["Platform"], _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_13__["FocusMonitor"]], {color: [0, "color"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, 0, ["Reset "]))], function (_ck, _v) {
                var _co = _v.component;
                var currVal_7 = _co.devFormGroup;
                _ck(_v, 3, 0, currVal_7);
                var currVal_44 = _co.devFormGroup.get("name");
                _ck(_v, 18, 0, currVal_44);
                var currVal_45 = "Dev name";
                var currVal_46 = "text";
                _ck(_v, 21, 0, currVal_45, currVal_46);
                var currVal_47 = (_co.devFormGroup.get("name").hasError("required") && _co.devFormGroup.get("name").touched);
                _ck(_v, 24, 0, currVal_47);
                var currVal_84 = _co.devFormGroup.get("frontend");
                _ck(_v, 37, 0, currVal_84);
                var currVal_85 = "Frontend";
                _ck(_v, 40, 0, currVal_85);
                var currVal_86 = (_co.devFormGroup.get("frontend").hasError("required") && _co.devFormGroup.get("frontend").touched);
                _ck(_v, 43, 0, currVal_86);
                var currVal_87 = ((_co.devFormGroup.get("frontend").hasError("max") || _co.devFormGroup.get("frontend").hasError("pattern")) && _co.devFormGroup.get("frontend").touched);
                _ck(_v, 45, 0, currVal_87);
                var currVal_88 = (_co.devFormGroup.get("frontend").value > 7);
                _ck(_v, 47, 0, currVal_88);
                var currVal_125 = _co.devFormGroup.get("backend");
                _ck(_v, 60, 0, currVal_125);
                var currVal_126 = "Backend";
                _ck(_v, 63, 0, currVal_126);
                var currVal_127 = (_co.devFormGroup.get("backend").hasError("required") && _co.devFormGroup.get("backend").touched);
                _ck(_v, 66, 0, currVal_127);
                var currVal_128 = ((_co.devFormGroup.get("backend").hasError("max") || _co.devFormGroup.get("backend").hasError("pattern")) && _co.devFormGroup.get("backend").touched);
                _ck(_v, 68, 0, currVal_128);
                var currVal_165 = _co.devFormGroup.get("teamwork");
                _ck(_v, 81, 0, currVal_165);
                var currVal_166 = "Teamwork";
                _ck(_v, 84, 0, currVal_166);
                var currVal_167 = (_co.devFormGroup.get("teamwork").hasError("required") && _co.devFormGroup.get("teamwork").touched);
                _ck(_v, 87, 0, currVal_167);
                var currVal_168 = ((_co.devFormGroup.get("teamwork").hasError("max") || _co.devFormGroup.get("teamwork").hasError("pattern")) && _co.devFormGroup.get("teamwork").touched);
                _ck(_v, 89, 0, currVal_168);
                var currVal_170 = _co.devFormGroup.invalid;
                var currVal_171 = "primary";
                _ck(_v, 91, 0, currVal_170, currVal_171);
                var currVal_173 = "warn";
                _ck(_v, 94, 0, currVal_173);
            }, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 5).ngClassUntouched;
                var currVal_1 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 5).ngClassTouched;
                var currVal_2 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 5).ngClassPristine;
                var currVal_3 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 5).ngClassDirty;
                var currVal_4 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 5).ngClassValid;
                var currVal_5 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 5).ngClassInvalid;
                var currVal_6 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 5).ngClassPending;
                _ck(_v, 1, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
                var currVal_8 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7).appearance == "standard");
                var currVal_9 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7).appearance == "fill");
                var currVal_10 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7).appearance == "outline");
                var currVal_11 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7).appearance == "legacy");
                var currVal_12 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7)._control.errorState;
                var currVal_13 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7)._canLabelFloat;
                var currVal_14 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7)._shouldLabelFloat();
                var currVal_15 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7)._hideControlPlaceholder();
                var currVal_16 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7)._control.disabled;
                var currVal_17 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7)._control.autofilled;
                var currVal_18 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7)._control.focused;
                var currVal_19 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7).color == "accent");
                var currVal_20 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7).color == "warn");
                var currVal_21 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7)._shouldForward("untouched");
                var currVal_22 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7)._shouldForward("touched");
                var currVal_23 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7)._shouldForward("pristine");
                var currVal_24 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7)._shouldForward("dirty");
                var currVal_25 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7)._shouldForward("valid");
                var currVal_26 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7)._shouldForward("invalid");
                var currVal_27 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 7)._shouldForward("pending");
                _ck(_v, 6, 1, [currVal_8, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17, currVal_18, currVal_19, currVal_20, currVal_21, currVal_22, currVal_23, currVal_24, currVal_25, currVal_26, currVal_27]);
                var currVal_28 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 20).ngClassUntouched;
                var currVal_29 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 20).ngClassTouched;
                var currVal_30 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 20).ngClassPristine;
                var currVal_31 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 20).ngClassDirty;
                var currVal_32 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 20).ngClassValid;
                var currVal_33 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 20).ngClassInvalid;
                var currVal_34 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 20).ngClassPending;
                var currVal_35 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21)._isServer;
                var currVal_36 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21).id;
                var currVal_37 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21).placeholder;
                var currVal_38 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21).disabled;
                var currVal_39 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21).required;
                var currVal_40 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21).readonly;
                var currVal_41 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21)._ariaDescribedby || null);
                var currVal_42 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21).errorState;
                var currVal_43 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 21).required.toString();
                _ck(_v, 15, 1, [currVal_28, currVal_29, currVal_30, currVal_31, currVal_32, currVal_33, currVal_34, currVal_35, currVal_36, currVal_37, currVal_38, currVal_39, currVal_40, currVal_41, currVal_42, currVal_43]);
                var currVal_48 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26).appearance == "standard");
                var currVal_49 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26).appearance == "fill");
                var currVal_50 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26).appearance == "outline");
                var currVal_51 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26).appearance == "legacy");
                var currVal_52 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26)._control.errorState;
                var currVal_53 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26)._canLabelFloat;
                var currVal_54 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26)._shouldLabelFloat();
                var currVal_55 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26)._hideControlPlaceholder();
                var currVal_56 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26)._control.disabled;
                var currVal_57 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26)._control.autofilled;
                var currVal_58 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26)._control.focused;
                var currVal_59 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26).color == "accent");
                var currVal_60 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26).color == "warn");
                var currVal_61 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26)._shouldForward("untouched");
                var currVal_62 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26)._shouldForward("touched");
                var currVal_63 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26)._shouldForward("pristine");
                var currVal_64 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26)._shouldForward("dirty");
                var currVal_65 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26)._shouldForward("valid");
                var currVal_66 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26)._shouldForward("invalid");
                var currVal_67 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 26)._shouldForward("pending");
                _ck(_v, 25, 1, [currVal_48, currVal_49, currVal_50, currVal_51, currVal_52, currVal_53, currVal_54, currVal_55, currVal_56, currVal_57, currVal_58, currVal_59, currVal_60, currVal_61, currVal_62, currVal_63, currVal_64, currVal_65, currVal_66, currVal_67]);
                var currVal_68 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 39).ngClassUntouched;
                var currVal_69 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 39).ngClassTouched;
                var currVal_70 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 39).ngClassPristine;
                var currVal_71 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 39).ngClassDirty;
                var currVal_72 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 39).ngClassValid;
                var currVal_73 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 39).ngClassInvalid;
                var currVal_74 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 39).ngClassPending;
                var currVal_75 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 40)._isServer;
                var currVal_76 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 40).id;
                var currVal_77 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 40).placeholder;
                var currVal_78 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 40).disabled;
                var currVal_79 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 40).required;
                var currVal_80 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 40).readonly;
                var currVal_81 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 40)._ariaDescribedby || null);
                var currVal_82 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 40).errorState;
                var currVal_83 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 40).required.toString();
                _ck(_v, 34, 1, [currVal_68, currVal_69, currVal_70, currVal_71, currVal_72, currVal_73, currVal_74, currVal_75, currVal_76, currVal_77, currVal_78, currVal_79, currVal_80, currVal_81, currVal_82, currVal_83]);
                var currVal_89 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49).appearance == "standard");
                var currVal_90 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49).appearance == "fill");
                var currVal_91 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49).appearance == "outline");
                var currVal_92 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49).appearance == "legacy");
                var currVal_93 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49)._control.errorState;
                var currVal_94 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49)._canLabelFloat;
                var currVal_95 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49)._shouldLabelFloat();
                var currVal_96 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49)._hideControlPlaceholder();
                var currVal_97 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49)._control.disabled;
                var currVal_98 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49)._control.autofilled;
                var currVal_99 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49)._control.focused;
                var currVal_100 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49).color == "accent");
                var currVal_101 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49).color == "warn");
                var currVal_102 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49)._shouldForward("untouched");
                var currVal_103 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49)._shouldForward("touched");
                var currVal_104 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49)._shouldForward("pristine");
                var currVal_105 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49)._shouldForward("dirty");
                var currVal_106 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49)._shouldForward("valid");
                var currVal_107 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49)._shouldForward("invalid");
                var currVal_108 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 49)._shouldForward("pending");
                _ck(_v, 48, 1, [currVal_89, currVal_90, currVal_91, currVal_92, currVal_93, currVal_94, currVal_95, currVal_96, currVal_97, currVal_98, currVal_99, currVal_100, currVal_101, currVal_102, currVal_103, currVal_104, currVal_105, currVal_106, currVal_107, currVal_108]);
                var currVal_109 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 62).ngClassUntouched;
                var currVal_110 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 62).ngClassTouched;
                var currVal_111 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 62).ngClassPristine;
                var currVal_112 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 62).ngClassDirty;
                var currVal_113 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 62).ngClassValid;
                var currVal_114 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 62).ngClassInvalid;
                var currVal_115 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 62).ngClassPending;
                var currVal_116 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 63)._isServer;
                var currVal_117 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 63).id;
                var currVal_118 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 63).placeholder;
                var currVal_119 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 63).disabled;
                var currVal_120 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 63).required;
                var currVal_121 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 63).readonly;
                var currVal_122 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 63)._ariaDescribedby || null);
                var currVal_123 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 63).errorState;
                var currVal_124 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 63).required.toString();
                _ck(_v, 57, 1, [currVal_109, currVal_110, currVal_111, currVal_112, currVal_113, currVal_114, currVal_115, currVal_116, currVal_117, currVal_118, currVal_119, currVal_120, currVal_121, currVal_122, currVal_123, currVal_124]);
                var currVal_129 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70).appearance == "standard");
                var currVal_130 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70).appearance == "fill");
                var currVal_131 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70).appearance == "outline");
                var currVal_132 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70).appearance == "legacy");
                var currVal_133 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70)._control.errorState;
                var currVal_134 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70)._canLabelFloat;
                var currVal_135 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70)._shouldLabelFloat();
                var currVal_136 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70)._hideControlPlaceholder();
                var currVal_137 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70)._control.disabled;
                var currVal_138 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70)._control.autofilled;
                var currVal_139 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70)._control.focused;
                var currVal_140 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70).color == "accent");
                var currVal_141 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70).color == "warn");
                var currVal_142 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70)._shouldForward("untouched");
                var currVal_143 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70)._shouldForward("touched");
                var currVal_144 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70)._shouldForward("pristine");
                var currVal_145 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70)._shouldForward("dirty");
                var currVal_146 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70)._shouldForward("valid");
                var currVal_147 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70)._shouldForward("invalid");
                var currVal_148 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 70)._shouldForward("pending");
                _ck(_v, 69, 1, [currVal_129, currVal_130, currVal_131, currVal_132, currVal_133, currVal_134, currVal_135, currVal_136, currVal_137, currVal_138, currVal_139, currVal_140, currVal_141, currVal_142, currVal_143, currVal_144, currVal_145, currVal_146, currVal_147, currVal_148]);
                var currVal_149 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 83).ngClassUntouched;
                var currVal_150 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 83).ngClassTouched;
                var currVal_151 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 83).ngClassPristine;
                var currVal_152 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 83).ngClassDirty;
                var currVal_153 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 83).ngClassValid;
                var currVal_154 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 83).ngClassInvalid;
                var currVal_155 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 83).ngClassPending;
                var currVal_156 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 84)._isServer;
                var currVal_157 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 84).id;
                var currVal_158 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 84).placeholder;
                var currVal_159 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 84).disabled;
                var currVal_160 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 84).required;
                var currVal_161 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 84).readonly;
                var currVal_162 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 84)._ariaDescribedby || null);
                var currVal_163 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 84).errorState;
                var currVal_164 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 84).required.toString();
                _ck(_v, 78, 1, [currVal_149, currVal_150, currVal_151, currVal_152, currVal_153, currVal_154, currVal_155, currVal_156, currVal_157, currVal_158, currVal_159, currVal_160, currVal_161, currVal_162, currVal_163, currVal_164]);
                var currVal_169 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 91).disabled || null);
                _ck(_v, 90, 0, currVal_169);
                var currVal_172 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 94).disabled || null);
                _ck(_v, 93, 0, currVal_172);
            });
        }

        function View_DevTeamFormComponent_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 1, "dev-team-form", [], null, null, null, View_DevTeamFormComponent_0, RenderType_DevTeamFormComponent)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 114688, null, 0, _dev_team_form_component__WEBPACK_IMPORTED_MODULE_14__["DevTeamFormComponent"], [_ngrx_store__WEBPACK_IMPORTED_MODULE_15__["Store"]], null, null)], function (_ck, _v) {
                _ck(_v, 1, 0);
            }, null);
        }

        var DevTeamFormComponentNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵccf"]("dev-team-form", _dev_team_form_component__WEBPACK_IMPORTED_MODULE_14__["DevTeamFormComponent"], View_DevTeamFormComponent_Host_0, {}, {}, []);


        /***/
    }),

    /***/ "./src/app/dashboard-example/dev-team-form/dev-team-form.component.ts":
    /*!****************************************************************************!*\
  !*** ./src/app/dashboard-example/dev-team-form/dev-team-form.component.ts ***!
  \****************************************************************************/
    /*! exports provided: DevTeamFormComponent */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DevTeamFormComponent", function () {
            return DevTeamFormComponent;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _dev_team_member_form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dev-team-member.form */ "./src/app/dashboard-example/dev-team-form/dev-team-member.form.ts");
        /* harmony import */
        var _ngrx_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
        /* harmony import */
        var _ngrx_feature_core_actions_dev_team_dev_team__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ngrx-feature-core/actions/dev-team/dev-team */ "./src/app/dashboard-example/ngrx-feature-core/actions/dev-team/dev-team.ts");


        var DevTeamFormComponent = /** @class */ (function () {
            function DevTeamFormComponent(store) {
                this.store = store;
                this.devFormGroup = new _dev_team_member_form__WEBPACK_IMPORTED_MODULE_1__["DevTeamMemberForm"]();
            }

            DevTeamFormComponent.prototype.ngOnInit = function () {
            };
            DevTeamFormComponent.prototype.submitForm = function (devFormGroup) {
                this.store.dispatch(new _ngrx_feature_core_actions_dev_team_dev_team__WEBPACK_IMPORTED_MODULE_3__["AddDevTeamMember"]({
                    devTeamMember: {
                        name: devFormGroup.controls.name.value,
                        frontend: devFormGroup.controls.frontend.value,
                        backend: devFormGroup.controls.backend.value,
                        teamwork: devFormGroup.controls.teamwork.value
                    }
                }));
                this.devName.nativeElement.focus();
                this.devFormGroup.reset();
            };
            return DevTeamFormComponent;
        }());


        /***/
    }),

    /***/ "./src/app/dashboard-example/dev-team-form/dev-team-member.form.ts":
    /*!*************************************************************************!*\
  !*** ./src/app/dashboard-example/dev-team-form/dev-team-member.form.ts ***!
  \*************************************************************************/
    /*! exports provided: DevTeamMemberForm */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DevTeamMemberForm", function () {
            return DevTeamMemberForm;
        });
        /* harmony import */
        var _angular_forms__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
        var __extends = (undefined && undefined.__extends) || (function () {
            var extendStatics = Object.setPrototypeOf ||
                ({__proto__: []} instanceof Array && function (d, b) {
                    d.__proto__ = b;
                }) ||
                function (d, b) {
                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                };
            return function (d, b) {
                extendStatics(d, b);

                function __() {
                    this.constructor = d;
                }

                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        })();

        var DevTeamMemberForm = /** @class */ (function (_super) {
            __extends(DevTeamMemberForm, _super);

            function DevTeamMemberForm() {
                return _super.call(this, {
                    name: new _angular_forms__WEBPACK_IMPORTED_MODULE_0__["FormControl"]('', [
                        _angular_forms__WEBPACK_IMPORTED_MODULE_0__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_0__["Validators"].maxLength(10)
                    ]),
                    frontend: new _angular_forms__WEBPACK_IMPORTED_MODULE_0__["FormControl"]('', [
                        _angular_forms__WEBPACK_IMPORTED_MODULE_0__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_0__["Validators"].pattern('[0-9]+$'), _angular_forms__WEBPACK_IMPORTED_MODULE_0__["Validators"].max(10)
                    ]),
                    backend: new _angular_forms__WEBPACK_IMPORTED_MODULE_0__["FormControl"]('', [
                        _angular_forms__WEBPACK_IMPORTED_MODULE_0__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_0__["Validators"].pattern('[0-9]+$'), _angular_forms__WEBPACK_IMPORTED_MODULE_0__["Validators"].max(10)
                    ]),
                    teamwork: new _angular_forms__WEBPACK_IMPORTED_MODULE_0__["FormControl"]('', [
                        _angular_forms__WEBPACK_IMPORTED_MODULE_0__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_0__["Validators"].pattern('[0-9]+$'), _angular_forms__WEBPACK_IMPORTED_MODULE_0__["Validators"].max(10)
                    ])
                }) || this;
            }

            return DevTeamMemberForm;
        }(_angular_forms__WEBPACK_IMPORTED_MODULE_0__["FormGroup"]));


        /***/
    }),

    /***/ "./src/app/dashboard-example/dev-team-table/dev-team-table-datasource.ts":
    /*!*******************************************************************************!*\
  !*** ./src/app/dashboard-example/dev-team-table/dev-team-table-datasource.ts ***!
  \*******************************************************************************/
    /*! exports provided: DevTeamTableDataSource */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DevTeamTableDataSource", function () {
            return DevTeamTableDataSource;
        });
        /* harmony import */
        var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/cdk/collections */ "./node_modules/@angular/cdk/esm5/collections.es5.js");
        /* harmony import */
        var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
        /* harmony import */
        var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
        var __extends = (undefined && undefined.__extends) || (function () {
            var extendStatics = Object.setPrototypeOf ||
                ({__proto__: []} instanceof Array && function (d, b) {
                    d.__proto__ = b;
                }) ||
                function (d, b) {
                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                };
            return function (d, b) {
                extendStatics(d, b);

                function __() {
                    this.constructor = d;
                }

                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        })();


        /**
         * Data source for the DevTeamTable view. This class should
         * encapsulate all logic for fetching and manipulating the displayed data
         * (including sorting, pagination, and filtering).
         */
        var DevTeamTableDataSource = /** @class */ (function (_super) {
            __extends(DevTeamTableDataSource, _super);

            function DevTeamTableDataSource(paginator, sort, members) {
                var _this = _super.call(this) || this;
                _this.paginator = paginator;
                _this.sort = sort;
                _this.members = members;
                _this.data = members;
                return _this;
            }

            /**
             * Connect this data source to the table. The table will only update when
             * the returned stream emits new items.
             * @returns A stream of the items to be rendered.
             */
            DevTeamTableDataSource.prototype.connect = function () {
                var _this = this;
                // Combine everything that affects the rendered data into one update
                // stream for the data-table to consume.
                var dataMutations = [
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(this.data),
                    this.paginator.page,
                    this.sort.sortChange
                ];
                // Set the paginators length
                this.paginator.length = this.data.length;
                // Listening data, page change and sorting events
                return rxjs__WEBPACK_IMPORTED_MODULE_2__["merge"].apply(void 0, dataMutations).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function () {
                    return _this.getPagedData(_this.getSortedData(_this.data.slice()));
                }));
            };
            /**
             *  Called when the table is being destroyed. Use this function, to clean up
             * any open connections or free any held resources that were set up during connect.
             */
            DevTeamTableDataSource.prototype.disconnect = function () {
            };
            /**
             * Paginate the data (client-side). If you're using server-side pagination,
             * this would be replaced by requesting the appropriate data from the server.
             */
            DevTeamTableDataSource.prototype.getPagedData = function (data) {
                var startIndex = this.paginator.pageIndex * this.paginator.pageSize;
                return data.splice(startIndex, this.paginator.pageSize);
            };
            /**
             * Sort the data (client-side). If you're using server-side sorting,
             * this would be replaced by requesting the appropriate data from the server.
             */
            DevTeamTableDataSource.prototype.getSortedData = function (data) {
                var _this = this;
                if (!this.sort.active || this.sort.direction === '') {
                    return data;
                }
                return data.sort(function (a, b) {
                    var isAsc = _this.sort.direction === 'asc';
                    switch (_this.sort.active) {
                        case 'name':
                            return compare(a.name, b.name, isAsc);
                        case 'frontend':
                            return compare(a.frontend, b.frontend, isAsc);
                        case 'backend':
                            return compare(a.backend, b.backend, isAsc);
                        case 'teamwork':
                            return compare(a.teamwork, b.teamwork, isAsc);
                        default:
                            return 0;
                    }
                });
            };
            return DevTeamTableDataSource;
        }(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_0__["DataSource"]));

        /** Simple sort comparator for example ID/Name columns (for client-side sorting). */
        function compare(a, b, isAsc) {
            return (a < b ? -1 : 1) * (isAsc ? 1 : -1);
        }


        /***/
    }),

    /***/ "./src/app/dashboard-example/dev-team-table/dev-team-table.component.css.shim.ngstyle.js":
    /*!***********************************************************************************************!*\
  !*** ./src/app/dashboard-example/dev-team-table/dev-team-table.component.css.shim.ngstyle.js ***!
  \***********************************************************************************************/
    /*! exports provided: styles */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "styles", function () {
            return styles;
        });
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */
        var styles = [""];


        /***/
    }),

    /***/ "./src/app/dashboard-example/dev-team-table/dev-team-table.component.ngfactory.js":
    /*!****************************************************************************************!*\
  !*** ./src/app/dashboard-example/dev-team-table/dev-team-table.component.ngfactory.js ***!
  \****************************************************************************************/
    /*! exports provided: RenderType_DevTeamTableComponent, View_DevTeamTableComponent_0, View_DevTeamTableComponent_Host_0, DevTeamTableComponentNgFactory */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "RenderType_DevTeamTableComponent", function () {
            return RenderType_DevTeamTableComponent;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_DevTeamTableComponent_0", function () {
            return View_DevTeamTableComponent_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "View_DevTeamTableComponent_Host_0", function () {
            return View_DevTeamTableComponent_Host_0;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DevTeamTableComponentNgFactory", function () {
            return DevTeamTableComponentNgFactory;
        });
        /* harmony import */
        var _dev_team_table_component_css_shim_ngstyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dev-team-table.component.css.shim.ngstyle */ "./src/app/dashboard-example/dev-team-table/dev-team-table.component.css.shim.ngstyle.js");
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _node_modules_angular_material_sort_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../node_modules/@angular/material/sort/typings/index.ngfactory */ "./node_modules/@angular/material/sort/typings/index.ngfactory.js");
        /* harmony import */
        var _angular_material_table__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/table */ "./node_modules/@angular/material/esm5/table.es5.js");
        /* harmony import */
        var _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/table */ "./node_modules/@angular/cdk/esm5/table.es5.js");
        /* harmony import */
        var _angular_material_sort__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/sort */ "./node_modules/@angular/material/esm5/sort.es5.js");
        /* harmony import */
        var _node_modules_angular_material_table_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../node_modules/@angular/material/table/typings/index.ngfactory */ "./node_modules/@angular/material/table/typings/index.ngfactory.js");
        /* harmony import */
        var _node_modules_angular_material_paginator_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../node_modules/@angular/material/paginator/typings/index.ngfactory */ "./node_modules/@angular/material/paginator/typings/index.ngfactory.js");
        /* harmony import */
        var _angular_material_paginator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/paginator */ "./node_modules/@angular/material/esm5/paginator.es5.js");
        /* harmony import */
        var _dev_team_table_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dev-team-table.component */ "./src/app/dashboard-example/dev-team-table/dev-team-table.component.ts");
        /* harmony import */
        var _ngrx_store__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
        /**
         * @fileoverview This file was generated by the Angular template compiler. Do not edit.
         *
         * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
         * tslint:disable
         */











        var styles_DevTeamTableComponent = [_dev_team_table_component_css_shim_ngstyle__WEBPACK_IMPORTED_MODULE_0__["styles"]];
        var RenderType_DevTeamTableComponent = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵcrt"]({
            encapsulation: 0,
            styles: styles_DevTeamTableComponent,
            data: {}
        });

        function View_DevTeamTableComponent_1(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 3, "mat-header-cell", [["class", "mat-header-cell"], ["mat-sort-header", ""], ["role", "columnheader"]], [[1, "aria-sort", 0], [2, "mat-sort-header-disabled", null]], [[null, "click"], [null, "mouseenter"], [null, "longpress"], [null, "mouseleave"]], function (_v, en, $event) {
                var ad = true;
                if (("click" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._handleClick() !== false);
                    ad = (pd_0 && ad);
                }
                if (("mouseenter" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._setIndicatorHintVisible(true) !== false);
                    ad = (pd_1 && ad);
                }
                if (("longpress" === en)) {
                    var pd_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._setIndicatorHintVisible(true) !== false);
                    ad = (pd_2 && ad);
                }
                if (("mouseleave" === en)) {
                    var pd_3 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._setIndicatorHintVisible(false) !== false);
                    ad = (pd_3 && ad);
                }
                return ad;
            }, _node_modules_angular_material_sort_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_2__["View_MatSortHeader_0"], _node_modules_angular_material_sort_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_2__["RenderType_MatSortHeader"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatHeaderCell"], [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](2, 245760, null, 0, _angular_material_sort__WEBPACK_IMPORTED_MODULE_5__["MatSortHeader"], [_angular_material_sort__WEBPACK_IMPORTED_MODULE_5__["MatSortHeaderIntl"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"], [2, _angular_material_sort__WEBPACK_IMPORTED_MODULE_5__["MatSort"]], [2, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"]]], {id: [0, "id"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, 0, ["Name"]))], function (_ck, _v) {
                var currVal_2 = "";
                _ck(_v, 2, 0, currVal_2);
            }, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._getAriaSortAttribute();
                var currVal_1 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._isDisabled();
                _ck(_v, 0, 0, currVal_0, currVal_1);
            });
        }

        function View_DevTeamTableComponent_2(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 2, "mat-cell", [["class", "mat-cell"], ["role", "gridcell"]], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatCell"], [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](2, null, ["", ""]))], null, function (_ck, _v) {
                var currVal_0 = _v.context.$implicit.name;
                _ck(_v, 2, 0, currVal_0);
            });
        }

        function View_DevTeamTableComponent_3(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 3, "mat-header-cell", [["class", "mat-header-cell"], ["mat-sort-header", ""], ["role", "columnheader"]], [[1, "aria-sort", 0], [2, "mat-sort-header-disabled", null]], [[null, "click"], [null, "mouseenter"], [null, "longpress"], [null, "mouseleave"]], function (_v, en, $event) {
                var ad = true;
                if (("click" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._handleClick() !== false);
                    ad = (pd_0 && ad);
                }
                if (("mouseenter" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._setIndicatorHintVisible(true) !== false);
                    ad = (pd_1 && ad);
                }
                if (("longpress" === en)) {
                    var pd_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._setIndicatorHintVisible(true) !== false);
                    ad = (pd_2 && ad);
                }
                if (("mouseleave" === en)) {
                    var pd_3 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._setIndicatorHintVisible(false) !== false);
                    ad = (pd_3 && ad);
                }
                return ad;
            }, _node_modules_angular_material_sort_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_2__["View_MatSortHeader_0"], _node_modules_angular_material_sort_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_2__["RenderType_MatSortHeader"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatHeaderCell"], [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](2, 245760, null, 0, _angular_material_sort__WEBPACK_IMPORTED_MODULE_5__["MatSortHeader"], [_angular_material_sort__WEBPACK_IMPORTED_MODULE_5__["MatSortHeaderIntl"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"], [2, _angular_material_sort__WEBPACK_IMPORTED_MODULE_5__["MatSort"]], [2, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"]]], {id: [0, "id"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, 0, ["Frontend"]))], function (_ck, _v) {
                var currVal_2 = "";
                _ck(_v, 2, 0, currVal_2);
            }, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._getAriaSortAttribute();
                var currVal_1 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._isDisabled();
                _ck(_v, 0, 0, currVal_0, currVal_1);
            });
        }

        function View_DevTeamTableComponent_4(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 2, "mat-cell", [["class", "mat-cell"], ["role", "gridcell"]], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatCell"], [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](2, null, ["", ""]))], null, function (_ck, _v) {
                var currVal_0 = _v.context.$implicit.frontend;
                _ck(_v, 2, 0, currVal_0);
            });
        }

        function View_DevTeamTableComponent_5(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 3, "mat-header-cell", [["class", "mat-header-cell"], ["mat-sort-header", ""], ["role", "columnheader"]], [[1, "aria-sort", 0], [2, "mat-sort-header-disabled", null]], [[null, "click"], [null, "mouseenter"], [null, "longpress"], [null, "mouseleave"]], function (_v, en, $event) {
                var ad = true;
                if (("click" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._handleClick() !== false);
                    ad = (pd_0 && ad);
                }
                if (("mouseenter" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._setIndicatorHintVisible(true) !== false);
                    ad = (pd_1 && ad);
                }
                if (("longpress" === en)) {
                    var pd_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._setIndicatorHintVisible(true) !== false);
                    ad = (pd_2 && ad);
                }
                if (("mouseleave" === en)) {
                    var pd_3 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._setIndicatorHintVisible(false) !== false);
                    ad = (pd_3 && ad);
                }
                return ad;
            }, _node_modules_angular_material_sort_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_2__["View_MatSortHeader_0"], _node_modules_angular_material_sort_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_2__["RenderType_MatSortHeader"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatHeaderCell"], [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](2, 245760, null, 0, _angular_material_sort__WEBPACK_IMPORTED_MODULE_5__["MatSortHeader"], [_angular_material_sort__WEBPACK_IMPORTED_MODULE_5__["MatSortHeaderIntl"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"], [2, _angular_material_sort__WEBPACK_IMPORTED_MODULE_5__["MatSort"]], [2, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"]]], {id: [0, "id"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, 0, ["Backend"]))], function (_ck, _v) {
                var currVal_2 = "";
                _ck(_v, 2, 0, currVal_2);
            }, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._getAriaSortAttribute();
                var currVal_1 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._isDisabled();
                _ck(_v, 0, 0, currVal_0, currVal_1);
            });
        }

        function View_DevTeamTableComponent_6(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 2, "mat-cell", [["class", "mat-cell"], ["role", "gridcell"]], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatCell"], [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](2, null, ["", ""]))], null, function (_ck, _v) {
                var currVal_0 = _v.context.$implicit.backend;
                _ck(_v, 2, 0, currVal_0);
            });
        }

        function View_DevTeamTableComponent_7(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 3, "mat-header-cell", [["class", "mat-header-cell"], ["mat-sort-header", ""], ["role", "columnheader"]], [[1, "aria-sort", 0], [2, "mat-sort-header-disabled", null]], [[null, "click"], [null, "mouseenter"], [null, "longpress"], [null, "mouseleave"]], function (_v, en, $event) {
                var ad = true;
                if (("click" === en)) {
                    var pd_0 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._handleClick() !== false);
                    ad = (pd_0 && ad);
                }
                if (("mouseenter" === en)) {
                    var pd_1 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._setIndicatorHintVisible(true) !== false);
                    ad = (pd_1 && ad);
                }
                if (("longpress" === en)) {
                    var pd_2 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._setIndicatorHintVisible(true) !== false);
                    ad = (pd_2 && ad);
                }
                if (("mouseleave" === en)) {
                    var pd_3 = (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._setIndicatorHintVisible(false) !== false);
                    ad = (pd_3 && ad);
                }
                return ad;
            }, _node_modules_angular_material_sort_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_2__["View_MatSortHeader_0"], _node_modules_angular_material_sort_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_2__["RenderType_MatSortHeader"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatHeaderCell"], [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](2, 245760, null, 0, _angular_material_sort__WEBPACK_IMPORTED_MODULE_5__["MatSortHeader"], [_angular_material_sort__WEBPACK_IMPORTED_MODULE_5__["MatSortHeaderIntl"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"], [2, _angular_material_sort__WEBPACK_IMPORTED_MODULE_5__["MatSort"]], [2, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"]]], {id: [0, "id"]}, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](-1, 0, ["Teamwork"]))], function (_ck, _v) {
                var currVal_2 = "";
                _ck(_v, 2, 0, currVal_2);
            }, function (_ck, _v) {
                var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._getAriaSortAttribute();
                var currVal_1 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵnov"](_v, 2)._isDisabled();
                _ck(_v, 0, 0, currVal_0, currVal_1);
            });
        }

        function View_DevTeamTableComponent_8(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 2, "mat-cell", [["class", "mat-cell"], ["role", "gridcell"]], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatCell"], [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵted"](2, null, ["", ""]))], null, function (_ck, _v) {
                var currVal_0 = _v.context.$implicit.teamwork;
                _ck(_v, 2, 0, currVal_0);
            });
        }

        function View_DevTeamTableComponent_9(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 1, "mat-header-row", [["class", "mat-header-row"], ["role", "row"]], null, null, null, _node_modules_angular_material_table_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_6__["View_MatHeaderRow_0"], _node_modules_angular_material_table_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_6__["RenderType_MatHeaderRow"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 49152, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatHeaderRow"], [], null, null)], null, null);
        }

        function View_DevTeamTableComponent_10(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 1, "mat-row", [["class", "mat-row"], ["role", "row"]], null, null, null, _node_modules_angular_material_table_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_6__["View_MatRow_0"], _node_modules_angular_material_table_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_6__["RenderType_MatRow"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 49152, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatRow"], [], null, null)], null, null);
        }

        function View_DevTeamTableComponent_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](402653184, 1, {paginator: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](402653184, 2, {sort: 0}), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](2, 0, null, null, 64, "div", [["class", "mat-elevation-z8"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](3, 0, null, null, 60, "mat-table", [["aria-label", "Elements"], ["class", "mat-table"], ["matSort", ""]], null, null, null, _node_modules_angular_material_table_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_6__["View_MatTable_0"], _node_modules_angular_material_table_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_6__["RenderType_MatTable"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](4, 2342912, [["table", 4]], 4, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatTable"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], [8, null]], {dataSource: [0, "dataSource"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 3, {_contentColumnDefs: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 4, {_contentRowDefs: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 5, {_contentHeaderRowDefs: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](603979776, 6, {_contentFooterRowDefs: 1}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](9, 737280, [[2, 4]], 0, _angular_material_sort__WEBPACK_IMPORTED_MODULE_5__["MatSort"], [], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](10, 0, null, null, 11, null, null, null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](11, 16384, null, 3, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatColumnDef"], [], {name: [0, "name"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 7, {cell: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 8, {headerCell: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 9, {footerCell: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[3, 4]], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"], null, [_angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatColumnDef"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](0, null, null, 2, null, View_DevTeamTableComponent_1)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](17, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatHeaderCellDef"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[8, 4]], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkHeaderCellDef"], null, [_angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatHeaderCellDef"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](0, null, null, 2, null, View_DevTeamTableComponent_2)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](20, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatCellDef"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[7, 4]], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkCellDef"], null, [_angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatCellDef"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](22, 0, null, null, 11, null, null, null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](23, 16384, null, 3, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatColumnDef"], [], {name: [0, "name"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 10, {cell: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 11, {headerCell: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 12, {footerCell: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[3, 4]], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"], null, [_angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatColumnDef"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](0, null, null, 2, null, View_DevTeamTableComponent_3)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](29, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatHeaderCellDef"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[11, 4]], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkHeaderCellDef"], null, [_angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatHeaderCellDef"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](0, null, null, 2, null, View_DevTeamTableComponent_4)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](32, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatCellDef"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[10, 4]], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkCellDef"], null, [_angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatCellDef"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](34, 0, null, null, 11, null, null, null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](35, 16384, null, 3, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatColumnDef"], [], {name: [0, "name"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 13, {cell: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 14, {headerCell: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 15, {footerCell: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[3, 4]], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"], null, [_angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatColumnDef"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](0, null, null, 2, null, View_DevTeamTableComponent_5)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](41, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatHeaderCellDef"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[14, 4]], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkHeaderCellDef"], null, [_angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatHeaderCellDef"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](0, null, null, 2, null, View_DevTeamTableComponent_6)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](44, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatCellDef"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[13, 4]], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkCellDef"], null, [_angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatCellDef"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](46, 0, null, null, 11, null, null, null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](47, 16384, null, 3, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatColumnDef"], [], {name: [0, "name"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 16, {cell: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 17, {headerCell: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵqud"](335544320, 18, {footerCell: 0}), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[3, 4]], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkColumnDef"], null, [_angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatColumnDef"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](0, null, null, 2, null, View_DevTeamTableComponent_7)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](53, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatHeaderCellDef"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[17, 4]], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkHeaderCellDef"], null, [_angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatHeaderCellDef"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](0, null, null, 2, null, View_DevTeamTableComponent_8)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](56, 16384, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatCellDef"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[16, 4]], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkCellDef"], null, [_angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatCellDef"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](0, null, null, 2, null, View_DevTeamTableComponent_9)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](59, 540672, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatHeaderRowDef"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"]], {columns: [0, "columns"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[5, 4]], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkHeaderRowDef"], null, [_angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatHeaderRowDef"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵand"](0, null, null, 2, null, View_DevTeamTableComponent_10)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](62, 540672, null, 0, _angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatRowDef"], [_angular_core__WEBPACK_IMPORTED_MODULE_1__["TemplateRef"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["IterableDiffers"]], {columns: [0, "columns"]}, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵprd"](2048, [[4, 4]], _angular_cdk_table__WEBPACK_IMPORTED_MODULE_4__["CdkRowDef"], null, [_angular_material_table__WEBPACK_IMPORTED_MODULE_3__["MatRowDef"]]), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](64, 0, null, null, 2, "mat-paginator", [["class", "mat-paginator"]], null, null, null, _node_modules_angular_material_paginator_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_7__["View_MatPaginator_0"], _node_modules_angular_material_paginator_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_7__["RenderType_MatPaginator"])), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](65, 245760, [[1, 4], ["paginator", 4]], 0, _angular_material_paginator__WEBPACK_IMPORTED_MODULE_8__["MatPaginator"], [_angular_material_paginator__WEBPACK_IMPORTED_MODULE_8__["MatPaginatorIntl"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]], {
                pageIndex: [0, "pageIndex"],
                length: [1, "length"],
                pageSize: [2, "pageSize"],
                pageSizeOptions: [3, "pageSizeOptions"]
            }, null), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵpad"](66, 3)], function (_ck, _v) {
                var _co = _v.component;
                var currVal_0 = _co.dataSource;
                _ck(_v, 4, 0, currVal_0);
                _ck(_v, 9, 0);
                var currVal_1 = "name";
                _ck(_v, 11, 0, currVal_1);
                var currVal_2 = "frontend";
                _ck(_v, 23, 0, currVal_2);
                var currVal_3 = "backend";
                _ck(_v, 35, 0, currVal_3);
                var currVal_4 = "teamwork";
                _ck(_v, 47, 0, currVal_4);
                var currVal_5 = _co.displayedColumns;
                _ck(_v, 59, 0, currVal_5);
                var currVal_6 = _co.displayedColumns;
                _ck(_v, 62, 0, currVal_6);
                var currVal_7 = 0;
                var currVal_8 = _co.dataSource.data.length;
                var currVal_9 = 10;
                var currVal_10 = _ck(_v, 66, 0, 5, 10, 15);
                _ck(_v, 65, 0, currVal_7, currVal_8, currVal_9, currVal_10);
            }, null);
        }

        function View_DevTeamTableComponent_Host_0(_l) {
            return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵvid"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵeld"](0, 0, null, null, 1, "dev-team-table", [], null, null, null, View_DevTeamTableComponent_0, RenderType_DevTeamTableComponent)), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵdid"](1, 114688, null, 0, _dev_team_table_component__WEBPACK_IMPORTED_MODULE_9__["DevTeamTableComponent"], [_ngrx_store__WEBPACK_IMPORTED_MODULE_10__["Store"]], null, null)], function (_ck, _v) {
                _ck(_v, 1, 0);
            }, null);
        }

        var DevTeamTableComponentNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵccf"]("dev-team-table", _dev_team_table_component__WEBPACK_IMPORTED_MODULE_9__["DevTeamTableComponent"], View_DevTeamTableComponent_Host_0, {}, {}, []);


        /***/
    }),

    /***/ "./src/app/dashboard-example/dev-team-table/dev-team-table.component.ts":
    /*!******************************************************************************!*\
  !*** ./src/app/dashboard-example/dev-team-table/dev-team-table.component.ts ***!
  \******************************************************************************/
    /*! exports provided: DevTeamTableComponent */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DevTeamTableComponent", function () {
            return DevTeamTableComponent;
        });
        /* harmony import */
        var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
        /* harmony import */
        var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
        /* harmony import */
        var _dev_team_table_datasource__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dev-team-table-datasource */ "./src/app/dashboard-example/dev-team-table/dev-team-table-datasource.ts");
        /* harmony import */
        var _ngrx_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
        /* harmony import */
        var _ngrx_feature_core_reducers_dev_team_selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ngrx-feature-core/reducers/dev-team/selectors */ "./src/app/dashboard-example/ngrx-feature-core/reducers/dev-team/selectors.ts");


        var DevTeamTableComponent = /** @class */ (function () {
            function DevTeamTableComponent(store) {
                this.store = store;
                this.displayedColumns = ['name', 'frontend', 'backend', 'teamwork'];
            }

            DevTeamTableComponent.prototype.ngOnInit = function () {
                var _this = this;
                this.dataSource = new _dev_team_table_datasource__WEBPACK_IMPORTED_MODULE_2__["DevTeamTableDataSource"](this.paginator, this.sort, []);
                this.store.select(_ngrx_feature_core_reducers_dev_team_selectors__WEBPACK_IMPORTED_MODULE_4__["selectAllDevTeamMembers"]).subscribe(function (members) {
                    _this.dataSource = new _dev_team_table_datasource__WEBPACK_IMPORTED_MODULE_2__["DevTeamTableDataSource"](_this.paginator, _this.sort, members);
                });
            };
            return DevTeamTableComponent;
        }());


        /***/
    }),

    /***/ "./src/app/dashboard-example/ngrx-feature-core/actions/dev-team/dev-team.ts":
    /*!**********************************************************************************!*\
  !*** ./src/app/dashboard-example/ngrx-feature-core/actions/dev-team/dev-team.ts ***!
  \**********************************************************************************/
    /*! exports provided: DevTeamMemberActionTypes, LoadDevTeamMembers, AddDevTeamMember, UpsertDevTeamMember, AddDevTeamMembers, UpsertDevTeamMembers, UpdateDevTeamMember, UpdateDevTeamMembers, DeleteDevTeamMember, DeleteDevTeamMembers, ClearDevTeamMembers */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DevTeamMemberActionTypes", function () {
            return DevTeamMemberActionTypes;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "LoadDevTeamMembers", function () {
            return LoadDevTeamMembers;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AddDevTeamMember", function () {
            return AddDevTeamMember;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "UpsertDevTeamMember", function () {
            return UpsertDevTeamMember;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "AddDevTeamMembers", function () {
            return AddDevTeamMembers;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "UpsertDevTeamMembers", function () {
            return UpsertDevTeamMembers;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "UpdateDevTeamMember", function () {
            return UpdateDevTeamMember;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "UpdateDevTeamMembers", function () {
            return UpdateDevTeamMembers;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DeleteDevTeamMember", function () {
            return DeleteDevTeamMember;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DeleteDevTeamMembers", function () {
            return DeleteDevTeamMembers;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "ClearDevTeamMembers", function () {
            return ClearDevTeamMembers;
        });
        var DevTeamMemberActionTypes;
        (function (DevTeamMemberActionTypes) {
            DevTeamMemberActionTypes["LOAD_DEV_TEAM_MEMBERS"] = "[DevTeam] Load DevTeamMembers";
            DevTeamMemberActionTypes["ADD_DEV_TEAM_MEMBER"] = "[DevTeam] Add DevTeamMember";
            DevTeamMemberActionTypes["UPSERT_DEV_TEAM_MEMBER"] = "[DevTeam] Upsert DevTeamMember";
            DevTeamMemberActionTypes["ADD_DEV_TEAM_MEMBERS"] = "[DevTeam] Add DevTeamMembers";
            DevTeamMemberActionTypes["UPSERT_DEV_TEAM_MEMBERS"] = "[DevTeam] Upsert DevTeamMembers";
            DevTeamMemberActionTypes["UPDATE_DEV_TEAM_MEMBER"] = "[DevTeam] Update DevTeamMember";
            DevTeamMemberActionTypes["UPDATE_DEV_TEAM_MEMBERS"] = "[DevTeam] Update DevTeamMembers";
            DevTeamMemberActionTypes["DELETE_DEV_TEAM_MEMBER"] = "[DevTeam] Delete DevTeamMember";
            DevTeamMemberActionTypes["DELETE_DEV_TEAM_MEMBERS"] = "[DevTeam] Delete DevTeamMembers";
            DevTeamMemberActionTypes["CLEAR_DEV_TEAM_MEMBERS"] = "[DevTeam] Clear DevTeamMembers";
        })(DevTeamMemberActionTypes || (DevTeamMemberActionTypes = {}));
        var LoadDevTeamMembers = /** @class */ (function () {
            function LoadDevTeamMembers(payload) {
                this.payload = payload;
                this.type = DevTeamMemberActionTypes.LOAD_DEV_TEAM_MEMBERS;
            }

            return LoadDevTeamMembers;
        }());

        var AddDevTeamMember = /** @class */ (function () {
            function AddDevTeamMember(payload) {
                this.payload = payload;
                this.type = DevTeamMemberActionTypes.ADD_DEV_TEAM_MEMBER;
            }

            return AddDevTeamMember;
        }());

        var UpsertDevTeamMember = /** @class */ (function () {
            function UpsertDevTeamMember(payload) {
                this.payload = payload;
                this.type = DevTeamMemberActionTypes.UPSERT_DEV_TEAM_MEMBER;
            }

            return UpsertDevTeamMember;
        }());

        var AddDevTeamMembers = /** @class */ (function () {
            function AddDevTeamMembers(payload) {
                this.payload = payload;
                this.type = DevTeamMemberActionTypes.ADD_DEV_TEAM_MEMBERS;
            }

            return AddDevTeamMembers;
        }());

        var UpsertDevTeamMembers = /** @class */ (function () {
            function UpsertDevTeamMembers(payload) {
                this.payload = payload;
                this.type = DevTeamMemberActionTypes.UPSERT_DEV_TEAM_MEMBERS;
            }

            return UpsertDevTeamMembers;
        }());

        var UpdateDevTeamMember = /** @class */ (function () {
            function UpdateDevTeamMember(payload) {
                this.payload = payload;
                this.type = DevTeamMemberActionTypes.UPDATE_DEV_TEAM_MEMBER;
            }

            return UpdateDevTeamMember;
        }());

        var UpdateDevTeamMembers = /** @class */ (function () {
            function UpdateDevTeamMembers(payload) {
                this.payload = payload;
                this.type = DevTeamMemberActionTypes.UPDATE_DEV_TEAM_MEMBERS;
            }

            return UpdateDevTeamMembers;
        }());

        var DeleteDevTeamMember = /** @class */ (function () {
            function DeleteDevTeamMember(payload) {
                this.payload = payload;
                this.type = DevTeamMemberActionTypes.DELETE_DEV_TEAM_MEMBER;
            }

            return DeleteDevTeamMember;
        }());

        var DeleteDevTeamMembers = /** @class */ (function () {
            function DeleteDevTeamMembers(payload) {
                this.payload = payload;
                this.type = DevTeamMemberActionTypes.DELETE_DEV_TEAM_MEMBERS;
            }

            return DeleteDevTeamMembers;
        }());

        var ClearDevTeamMembers = /** @class */ (function () {
            function ClearDevTeamMembers() {
                this.type = DevTeamMemberActionTypes.CLEAR_DEV_TEAM_MEMBERS;
            }

            return ClearDevTeamMembers;
        }());


        /***/
    }),

    /***/ "./src/app/dashboard-example/ngrx-feature-core/reducers/dev-team/dev-team.ts":
    /*!***********************************************************************************!*\
  !*** ./src/app/dashboard-example/ngrx-feature-core/reducers/dev-team/dev-team.ts ***!
  \***********************************************************************************/
    /*! exports provided: adapter, initialstate, reducer, selectDevTeamMemberIds, selectDevTeamMemberEntities, selectAllDevTeamMembers, selectDevTeamMemberTotal */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "adapter", function () {
            return adapter;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "initialstate", function () {
            return initialstate;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "reducer", function () {
            return reducer;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "selectDevTeamMemberIds", function () {
            return selectDevTeamMemberIds;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "selectDevTeamMemberEntities", function () {
            return selectDevTeamMemberEntities;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "selectAllDevTeamMembers", function () {
            return selectAllDevTeamMembers;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "selectDevTeamMemberTotal", function () {
            return selectDevTeamMemberTotal;
        });
        /* harmony import */
        var _ngrx_entity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ngrx/entity */ "./node_modules/@ngrx/entity/fesm5/entity.js");
        /* harmony import */
        var _actions_dev_team_dev_team__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../actions/dev-team/dev-team */ "./src/app/dashboard-example/ngrx-feature-core/actions/dev-team/dev-team.ts");
        var __assign = (undefined && undefined.__assign) || Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };


        var adapter = Object(_ngrx_entity__WEBPACK_IMPORTED_MODULE_0__["createEntityAdapter"])({
            selectId: function (element) {
                return element.name;
            },
            sortComparer: sortByName
        });

        function sortByName(ob1, ob2) {
            return ob1.name.localeCompare(ob2.name);
        }

        var initialstate = adapter.getInitialState({
            selectedElementId: null
        });

        function reducer(state, action) {
            if (state === void 0) {
                state = initialstate;
            }
            switch (action.type) {
                case _actions_dev_team_dev_team__WEBPACK_IMPORTED_MODULE_1__["DevTeamMemberActionTypes"].ADD_DEV_TEAM_MEMBER: {
                    return adapter.addOne(action.payload.devTeamMember, state);
                }
                case _actions_dev_team_dev_team__WEBPACK_IMPORTED_MODULE_1__["DevTeamMemberActionTypes"].UPSERT_DEV_TEAM_MEMBER: {
                    return adapter.upsertOne(action.payload.devTeamMember, state);
                }
                case _actions_dev_team_dev_team__WEBPACK_IMPORTED_MODULE_1__["DevTeamMemberActionTypes"].UPSERT_DEV_TEAM_MEMBERS: {
                    return adapter.upsertMany(action.payload.devTeamMembers, state);
                }
                case _actions_dev_team_dev_team__WEBPACK_IMPORTED_MODULE_1__["DevTeamMemberActionTypes"].ADD_DEV_TEAM_MEMBERS: {
                    return adapter.addMany(action.payload.devTeamMembers, state);
                }
                case _actions_dev_team_dev_team__WEBPACK_IMPORTED_MODULE_1__["DevTeamMemberActionTypes"].UPDATE_DEV_TEAM_MEMBER: {
                    return adapter.updateOne(action.payload.devTeamMember, state);
                }
                case _actions_dev_team_dev_team__WEBPACK_IMPORTED_MODULE_1__["DevTeamMemberActionTypes"].UPDATE_DEV_TEAM_MEMBERS: {
                    return adapter.updateMany(action.payload.devTeamMembers, state);
                }
                case _actions_dev_team_dev_team__WEBPACK_IMPORTED_MODULE_1__["DevTeamMemberActionTypes"].DELETE_DEV_TEAM_MEMBER: {
                    return adapter.removeOne(action.payload.id, state);
                }
                case _actions_dev_team_dev_team__WEBPACK_IMPORTED_MODULE_1__["DevTeamMemberActionTypes"].DELETE_DEV_TEAM_MEMBERS: {
                    return adapter.removeMany(action.payload.ids, state);
                }
                case _actions_dev_team_dev_team__WEBPACK_IMPORTED_MODULE_1__["DevTeamMemberActionTypes"].LOAD_DEV_TEAM_MEMBERS: {
                    return adapter.addAll(action.payload.devTeamMembers, state);
                }
                case _actions_dev_team_dev_team__WEBPACK_IMPORTED_MODULE_1__["DevTeamMemberActionTypes"].CLEAR_DEV_TEAM_MEMBERS: {
                    return adapter.removeAll(__assign({}, state, {selectedElementId: null}));
                }
                default: {
                    return state;
                }
            }
        }

// export const selectSelectedDevTeamMemberId = (state: DevTeamState) => state.selectedElementId;
        var
// select the array of user ids
            selectDevTeamMemberIds = (_a = adapter.getSelectors(), _a.selectIds),
// select the dictionary of user entities -> map<id, object> -> id is defined by adapter selectId attribute
            selectDevTeamMemberEntities = _a.selectEntities,
// select the array of users -> real array
            selectAllDevTeamMembers = _a.selectAll,
// select the total user count
            selectDevTeamMemberTotal = _a.selectTotal;
        var _a;


        /***/
    }),

    /***/ "./src/app/dashboard-example/ngrx-feature-core/reducers/dev-team/selectors.ts":
    /*!************************************************************************************!*\
  !*** ./src/app/dashboard-example/ngrx-feature-core/reducers/dev-team/selectors.ts ***!
  \************************************************************************************/
    /*! exports provided: selectDevTeamMemberIds, selectDevTeamMemberEntities, selectAllDevTeamMembers, selectDevTeamMemberTotal */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "selectDevTeamMemberIds", function () {
            return selectDevTeamMemberIds;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "selectDevTeamMemberEntities", function () {
            return selectDevTeamMemberEntities;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "selectAllDevTeamMembers", function () {
            return selectAllDevTeamMembers;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "selectDevTeamMemberTotal", function () {
            return selectDevTeamMemberTotal;
        });
        /* harmony import */
        var _ngrx_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
        /* harmony import */
        var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index */ "./src/app/dashboard-example/ngrx-feature-core/reducers/index.ts");
        /* harmony import */
        var _dev_team__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dev-team */ "./src/app/dashboard-example/ngrx-feature-core/reducers/dev-team/dev-team.ts");


        var selectDevTeamMemberIds = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(_index__WEBPACK_IMPORTED_MODULE_1__["selectDevTeamState"], _dev_team__WEBPACK_IMPORTED_MODULE_2__["selectDevTeamMemberIds"]);
        var selectDevTeamMemberEntities = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(_index__WEBPACK_IMPORTED_MODULE_1__["selectDevTeamState"], _dev_team__WEBPACK_IMPORTED_MODULE_2__["selectDevTeamMemberEntities"]);
        var selectAllDevTeamMembers = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(_index__WEBPACK_IMPORTED_MODULE_1__["selectDevTeamState"], _dev_team__WEBPACK_IMPORTED_MODULE_2__["selectAllDevTeamMembers"]);
        var selectDevTeamMemberTotal = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(_index__WEBPACK_IMPORTED_MODULE_1__["selectDevTeamState"], _dev_team__WEBPACK_IMPORTED_MODULE_2__["selectDevTeamMemberTotal"]);
// export const selectCurrentDevTeamMemberId = createSelector(
//   selectDevTeamState,
//   dashboard.selectSelectedDevTeamMemberId
// );
//
// export const selectCurrentDevTeamMember = createSelector(
//   selectDevTeamMemberEntities,
//   selectCurrentDevTeamMemberId,
//   (entities, dashboardElementId) => entities[dashboardElementId]
// );


        /***/
    }),

    /***/ "./src/app/dashboard-example/ngrx-feature-core/reducers/index.ts":
    /*!***********************************************************************!*\
  !*** ./src/app/dashboard-example/ngrx-feature-core/reducers/index.ts ***!
  \***********************************************************************/
    /*! exports provided: initialState, reducers, DASHBOARD_FEATURE_STATE, selectDashboardFeatureState, selectDevTeamState */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "initialState", function () {
            return initialState;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "reducers", function () {
            return reducers;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "DASHBOARD_FEATURE_STATE", function () {
            return DASHBOARD_FEATURE_STATE;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "selectDashboardFeatureState", function () {
            return selectDashboardFeatureState;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "selectDevTeamState", function () {
            return selectDevTeamState;
        });
        /* harmony import */
        var _ngrx_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ngrx/store */ "./node_modules/@ngrx/store/fesm5/store.js");
        /* harmony import */
        var _dev_team_dev_team__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dev-team/dev-team */ "./src/app/dashboard-example/ngrx-feature-core/reducers/dev-team/dev-team.ts");


        var initialState = {
            devTeam: _dev_team_dev_team__WEBPACK_IMPORTED_MODULE_1__["initialstate"]
        };
        var reducers = {
            devTeam: _dev_team_dev_team__WEBPACK_IMPORTED_MODULE_1__["reducer"]
        };
        var DASHBOARD_FEATURE_STATE = 'dashboard-feature';
        var selectDashboardFeatureState = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createFeatureSelector"])(DASHBOARD_FEATURE_STATE);
        var selectDevTeamState = Object(_ngrx_store__WEBPACK_IMPORTED_MODULE_0__["createSelector"])(selectDashboardFeatureState, function (state) {
            return state.devTeam;
        });


        /***/
    })

}]);
//# sourceMappingURL=dashboard-example-dashboard-example-module-ngfactory.js.map